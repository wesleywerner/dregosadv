! For those interested, the Maro River starts in the Arafura Sea, Indonesia,
! at coordinates 8°28'03.0"S 140°21'20.8"E

Release 1;
Serial "400410";

Constant Story "Dr Ego and the Egg of Man-Toomba";
Constant Headline
            "^An Interactive Fiction Story
             ^by Special Agent.^";

! [ ================================================================ Constants ]

! Enable beta test functions
Constant BETA_TEST;

! Mention to dead players that they can UNDO the last action.
Constant DEATH_MENTION_UNDO;

! The time which this story begins (60 * HH + mm)
Constant StoryStartTime 780; ! 13:00

! The number of turns to pass until the canoe ride ends
Constant TurnsInCanoe 12;

! When going to undefined direction while in a JungleRoom, the player gets lost.
! Reading the compass returns them back on track, but if the player lost
! the device or does not use it, these are the odds of finding their way back:
! 1 in OddsOfFindingWayWhenLost.
Constant OddsOfFindingWayWhenLost 16;

! Weather states
Constant WEATHER_DRY 1;
Constant WEATHER_RAIN 2;
! Turns in dry state before rain may start
Constant RAIN_START_T 40;
! Turns in wet state before rain may stop
Constant RAIN_STOP_T 20;
! Chance of thunder when it RAINS (1 in n)
Constant THUNDER_ROLL 10;
! Multiplier for chance of thunder in DRY state (1 in n*THUNDER_ROLL)
Constant THUNDER_MULTIPLIER 3;
! Chance of rain (1 in n)
Constant RAIN_START_ROLL 60;
! Chance of rain stop (1 in n)
Constant RAIN_STOP_ROLL 30;
! Chance of rain drops falling on player when wet (1 in n)
Constant RAIN_ON_PLAYER_ROLL 3;

! Show the option to list AMUSING things you can try (at the End of the story)
Constant AMUSING_PROVIDED;

! Define default responses for the five senses.
Constant LOOK_DOWN_REPLY = "The ground is below you -- thank heavens!";

! Set the PC carryall
Constant MAX_CARRIED = 2;
Constant SACK_OBJECT = satchel;

! [ ========================================================= Scoring & Status ]

! Show the time instead of the turn number
Statusline time;

! Use task-based scoring - as listed in doc.md
Constant TASKS_PROVIDED;
Constant NUMBER_TASKS = 9;
Constant MAX_SCORE = 108;

! List of points for each task completed via the `Achieved` keyword.
Array task_scores -> 1 1 1 1 1 1 100 1 1;

! List of score achievement indices
Constant SCORE_USE_COMPASS = 0;
Constant SCORE_FIND_THE_WAY = 1;
Constant SCORE_WHIP_THE_BANANA = 2;
Constant SCORE_RESCUE_COMPASS = 3;
Constant SCORE_CRAFT_TORCH = 4;
Constant SCORE_FIND_ALCOVE = 5;
Constant SCORE_TREASURE = 6;
Constant SCORE_FISHING = 7;
Constant SCORE_BRIBERY = 8;

! Prints the list of achieved scores and the items they relate to
[ PrintTaskName task_number;
    switch (task_number) {
        SCORE_USE_COMPASS: "Use your compass in the jungle";
        SCORE_FIND_THE_WAY: "Spot the way from atop a tree";
        SCORE_WHIP_THE_BANANA: "Whip a banana off the tree";
        SCORE_RESCUE_COMPASS: "Rescue your compass from the monkey";
        SCORE_CRAFT_TORCH: "Craft a torch";
        SCORE_FIND_ALCOVE: "Find the alcove behind the waterfall";
        SCORE_TREASURE: "Get the treasure";
        SCORE_FISHING: "Catch a fish with your whip";
        SCORE_BRIBERY: "Trade with the Carver";
    }
];

! Points for visiting a room or taking an item with the "scored" attribute.
Constant OBJECT_SCORE 1;
Constant ROOM_SCORE 1;

! Hide status line for debug builds.
! This streamlines the diffs used by unit tests.
#ifdef DEBUG;
[DrawStatusLine;];
#endif;

! [ ================================================================= Includes ]

Include "Parser";

! Beta test helper
#ifdef BETA_TEST;
Include "BetaTest";
#endif;

! Override default library messages. See DM4 $25 and $A4.
Object LibraryMessages
with before [;
    Take:
        ! lm_n holds the message number, 1 is "Taken".
        ! lm_o holds the object in question.
        ! EssentialObject provides takenFromBag which is set true
        ! if the item is in the satchel before taking.
        if (lm_n == 1 && lm_o provides takenFromBag && lm_o.takenFromBag) {
            lm_o.takenFromBag = false;
            "You take ", (a) lm_o, " from your satchel. ";
        }
    Miscellany:
        ! code 50 is the score message.
        ! lm_o contains the number of points scored.
        ! print "You scored ", (number) lm_o, " points";
        if (lm_n == 50) {
            if (score == 1) {
                print "You scored your first point!
                Type SCORE/FULL to list them";
            } else if (lm_o == 1) {
                print "You scored another point";
            } else {
                print "You scored ", (number) lm_o, " points";
            }
            rtrue;
        }
    ],
    after [;
    ];

Include "VerbLib";

! [ =============================================================== Attributes ]

! Applied to NPCs to indicate an active state of interest in the player.
Attribute curious;
Attribute is_torch;
Attribute wet;
Attribute oily;
Attribute examined;
Attribute burdened;

! [ ================================================================= Routines ]

[ Initialise;

    ! Set the clock and turn progression rate
    SetTime(StoryStartTime, 1);

    ! Set the timer on the canoe
    StartTimer(canoe, TurnsInCanoe);

    ! Set the starting location
    location = canoe;
    
    ! Move objects to their starting places
    move canoe to River;
    move boatman to canoe;
    move box_trap to canoe;
    move monkey to fig_tree;
    move banana to garden_trees;
    move yam to Garden;
    move cloth to bungalow_rubble;
    move torch_of_wood to jungle_scenery;
    move golden_egg to stone_altar;
    move stone_egg to temple_stone_box;
    move urn to temple_stone_box;
    move torch_of_bone to temple_stone_box;
    
    ! Start Daemons
    StartDaemon(monkey);
    StartDaemon(sky);
    StartDaemon(chicken);

    ! enable debugging actions:
    #ifdef DEBUG;
      ! allow skipping the long boat ride with GO FASTER
      move canoe_hasten to River;
      ! disable the weather - the rng consumed each turn affects tests
      sky.enabled = false;
    #endif;

    ! Give player inventory
    move lodestar to satchel;
    move bullwhip to player;
    move journal to satchel;
    move matchbook to satchel;
    move fedora_hat to player;
    move leather_jacket to player;
    move satchel to player;

    ! Give the player a name and description
    player.short_name = "Dr Ego";
    player.description = "You are Dr Ego, purveyor of artifacts,
                            seeker of treasure, adventurous archeologist. ";

    ! Print the preface text (for non debug builds)
    #ifdef DEBUG;
    print "THIS GAME IS IN DEBUG MODE^";
    #ifnot;
    print   "^April 10th, 1940.
            ^^Your journey started a few days ago after
            docking at Port Moresby, from there it was two days ride on
            the back of a truck to Kerema, followed by a small aircraft
            flight and landing near the mouth of the Maro River.
            ^^You met your guide and his canoe, who will take you up-river
            to your final destination -- a remote and relatively uncharted
            area in New Guinea -- to find the legendary ",
            (name) golden_egg, ".^";
    #endif;
    
    ! Print beta test banner
    #ifndef DEBUG;
    #ifdef BETA_TEST;
    style underline;
    print "^This story is in testing -- 
    type BETA to enable beta features (recommended)^";
    style roman;
    #endif;
    #endif;
    
    ! Auto enable beta mode
    !#ifdef BETA_TEST;
    !<<BetaTestOn>>;
    !#endif;
];

! Remember the last known location of the player, before they get lost
! in the jungle, and return the player to this good location when they
! find their way back.
Global last_known_location = 0;

! Print out amusing things to try (only available after game is won).
[ Amusing;
    print_ret "Here are some strange and fun things that you can try
            (if you haven't already):^
            ^1) Whip the water while in the canoe.
            ^2) Get lost in the jungle, then look at your compass.";
];

[ PressAnyKey k; @read_char 1 -> k; return k; ];

! Test if the player is carrying an item with is_torch.
! Get a torch object carried by the player.
[ GetPlayerTorchObject n;
    objectloop (n in player && n has is_torch)
        return n;
    return false;
];

[ PrintWinWording;
    print "^^You spend the next week cataloguing the precious artifact,
    before you donate ", (the) golden_egg, " to the museum of
    Natural History and Archeology. ";
];

! Alternate ending: you have a fish dinner with Rom
[ SetupFishDinnerScene;
    move wood_stool to Shore;
    move fish_fire to Shore;
    give yam ~concealed;
    move yam to fish_fire;
    move fish to fish_fire;
    move boatman to Shore;
];

! [ ================================================================== Classes ]

Class Room
with
    !printed_ways,
    !before [;
    !    if (action == ##Look) {
    !        self.printed_ways = false;
    !    }
    !],
  after [item;
    ! in location prevents printing ways while in a container (like a canoe)
    if (action == ##Look && player in location) {
      !print "^";
      objectloop(item in location) {
        if (item ofclass DoorWay) {
          !print (A) item, " is to the ", (name) item.door_dir(), ". ";
          if (item.door_dir() == u_to) {
              print (A) item, " leads upward. ";
          } else if (item.door_dir() == d_to) {
              print (A) item, " leads downward. ";
          } else {
              ! If the way was visited, or if it obvious what lies that way, print the door's name
              if (item.obvious_way || item.door_to() has visited) {
                  print (A) item, " is due ", (name) item.door_dir(), ". ";
              ! If the way hasnt visited, print a nameless exit
              } else {
                  if (location ofclass IndoorRoom) {
                      print "There is an exit to the ", (name) item.door_dir(), ". ";
                  } else {
                      print "An unexplored path is to the ", (name) item.door_dir(), ". ";
                  }
              }
          }
        }
      }
      print "^";
    }
  ];

Class IndoorRoom
class Room
with
    cant_go "You bump into the stone wall. Ouch!";

! The outdoor room always contains the sky object, looking up examines the sky.
Class OutdoorRoom
class Room
with
    before [;
        Examine:
            ! Examine the sky when looking up
            if (noun == u_obj)
                <<Examine sky>>;
            ! Examine the ground when looking down
            if (noun == d_obj)
                print_ret (string) LOOK_DOWN_REPLY;
            ! If looking in any other compass direction
            if (noun in compass) {
                ! if the direction in the location is a DoorWay
                if (location.(noun) ofclass DoorWay) {
                    ! Describe what is seen that way
                    print_ret "You see ", (a) location.(noun), " that way.";
                } else {
                    if (location ofclass JungleRoom) {
                        print_ret "You see the jungle that way.";
                    }
                    if (location ofclass OutdoorRoom) {
                        print_ret "A wall is that way.";
                    }
                }
            }
        Listen:
            if (sky.state == WEATHER_DRY) {
                print_ret "You hear the sounds of the jungle - faint rustling of
                leaves in the wind, faint chirps of insects, and occasionally some
                small critter moving under cover of the dense foliage.";
            } else {
                print_ret "You hear the pitter-patter of rain around you.";
            }
        Smell:
            print_ret "The air smells fresh with earthy jungle tones.";
    ],
    has light;

! The jungle room allows the player to "get lost" for a little while, but
! they always find their way back to the last known location.
! The LostInJungle object handles returning the player back safely.
Class JungleRoom
class OutdoorRoom
with
    ! Get lost when going in undefined direction
    n_to LostInJungle,
    nw_to LostInJungle,
    ne_to LostInJungle,
    s_to LostInJungle,
    sw_to LostInJungle,
    se_to LostInJungle,
    e_to LostInJungle,
    w_to LostInJungle,
    ! Record the last known good location
    after [;
        Go:
            if (location ~= LostInJungle)
                last_known_location = location;
    ];

Class NonPlayerCharacter
with
    life [;
        Attack:
            print_ret "You are not fond of hurting other living things.";
    ];

Class HumanNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "You think human trafficking is deplorable.";
        ],
    has animate;

Class AnimalNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "You think animal trafficking is deplorable.";
        ],
    has animate;

! A class that prevents the player from taking what isn't theirs.
Class NotYourPropertyObject
    with
        before [;
            Take:
                print_ret (The) noun, " is not yours to take.";
        ];

! Tools the player would consider essential, cannot be dropped by default.
Class EssentialObject
    with
        article "your",
        takenFromBag,
        before [;
            Take:
                ! Remember that this item came from your satchel
                self.takenFromBag = self in satchel;
            Examine:
                if (self in satchel) {
                    <Take self>;
                }
            Insert:
                if (second ~= satchel) {
                    print_ret "You would not dream of leaving ", (a) noun, "
                    behind.";
                }
            Drop, ThrowAt:
                print_ret "You would not dream of leaving ",
                            (a) noun, " behind.";
            Taste, Eat:
                print_ret (A) noun, " is not food.";
        ];

! Provides a feature to print additional text when a scenic item is examined
! the first time.
Class ScenicBase
with
    description_lead "",
    before [;
        Examine:
            if (~~self has examined) {
                give self examined;
                print (string) self.description_lead;
            }
    ],
    has scenery static;

! Provides the scenery attribute
Class ScenicRockObject
with
    before [;
        Take, Push, Pull:
            if (noun has pluralname)
                print_ret (The) self, " are way too large and heavy to move.";
            else
                print_ret (The) self, " is way too large and heavy to move.";
    ],
has scenery static;

Class ScenicEngravingObject
class ScenicBase
with
    before [;
        Take:
            print_ret "You can't take ", (the) self, " as they are part of the
            stone.";
    ];

! A door that is listed in the room description.
Class DoorWay
with
    ! Some ways are visible and it is obvious what lies there, so always
    ! print the door name.
    obvious_way false,
    before [;
        Take:
            print_ret (The) self, " is not something you can take.";
    ],
has static door open scenery;

Class RockDoor
with
    before [;
        Take:
            if (noun has pluralname)
                print_ret (The) self, " are way too large and heavy to move.";
            else
                print_ret (The) self, " is way too large and heavy to move.";
    ],
has scenery static door open;

! An object that reveals its children when searched.
! The search_lead property prints when the search is actioned
! and search_concludes prints after the items are listed.
! The auto_take flag will move the discovered items to the player, otherwise
! the items are moved to the location of parent.
! The object itself cannot be taken, but hints at it hiding something.
Class SearchableObject
with
    search_lead "You find ",
    search_concludes "",
    auto_take false,
    before [;
        Take:
            if (child(self))
                "You don't want ", (the) self, ", but perhaps it hides
                some other things that may be of use.";
            else
                "You don't want ", (the) self, ".";
        Search:
            ! we have no children to give
            if (child(self)==nothing) 
                print_ret "You find nothing in ", (the) self, ".";
            ! list the things inside us
            print (string) self.search_lead;
            WriteListFrom(child(self), ENGLISH_BIT);
            print ". ", (string) self.search_concludes, "^";
            ! move them into scope
            while (child(self)) {
                if (self.auto_take)
                    move child(self) to player;
                else
                    move child(self) to parent(self);
            }
            return true;
];

Class ScenicWaterObject
with
    before [;
        Take, Drink:
            "You drink some of ", (the) self, " from your cupped hand.
            You feel refreshed.";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicTreeObject
with
    before [;
        Take:
            print_ret (The) self, " is too firmly rooted in the earth.";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicPlantObject
with
    before [;
        Take:
            print_ret "You have no need for ", (the) self, ".";
    ],
has scenery static;

! Something edible
Class EdibleFruitObject has edible;

! Can be used to LIGHT a torch.
Class SparkThrowerObject;

! A long straight object that can be made into a torch.
! The material property describes what the torch is made of.
Class TorchBaseObject 
with

    ! The default material that makes this object.
    ! This value should be set on instances.
    material "nondescript",
    
    ! The torch can be made of multiple things, display the material which
    ! this torch is made of, in the display name.
    short_name [;
        if (self has is_torch) {
            print (string) self.material, " torch";
            return true;
        }
        else
            rfalse;
    ],
    
    before [;
        Burn:
            if (self has light)
                "", (The) self, " is already lit.";
            if (self notin player)
                <Take self>;
            if (second == nothing)
                "(You need to say what you want to light ", (the) self, " with).";
            if (~~second ofclass SparkThrowerObject)
                "You can't light ", (the) self, " with that.";
            if (second has wet)
                "", (The) second, " is wet, you fail to light ", (the) self, ".";
            if (self hasnt oily)
                "", (The) self, " fails to burn -- The wick needs some kind of fuel.";
            give self light;
            print_ret "You strike ", (the) second, " and sparks fly onto the wick,
            they catch and a small flame appears -- gradually the flame grows
            until it covers the wick.";
    ],
    
    ! Describe the wick tied to this object, if any.
    after [;
        Examine:
            if (self has is_torch)
                print_ret "A crude wick is tied to the one end.";
        Take:
            "You take ", (the) self, ".";
    ],
    
    has;

! A material that acts as a wick
Class TorchWickObject
with
    before [;
        PutOn:
            if (second ofclass TorchBaseObject) {
                print_ret "Perhaps you meant to TIE ", (the) self, " around ", (the) second, ".";
            }
        Tie:
            ! Remove this wick when tying it on a TorchBase.
            ! Then change the torch's name and give it the torch attribute.
            if (second ofclass TorchBaseObject) {
                print "You wrap ", (the) self, " around ", (the) second, " to
                make a crude torch.^";
                remove self;
                give second is_torch;
                second.&name-->0 = 'torch';
                return true;
            }
    ];

Class WeightedObject
with 
    each_turn [;
        if (action == ##Go && self in player) {
            give player burdened;
            "You lug ", (the) self," with you. ";
        } else {
            give player ~burdened;
        }
        if (self provides swings_shut) {
            self.swings_shut();
        }
];

! [ ================================================================== Objects ]

!
EdibleFruitObject banana "banana"
with
    name 'banana' 'bananas',
    whip_count 0,
    eaten false,
    description [;
        if (parent(self) == garden_trees)
            print "A bunch of wild bananas hang from the top of the tree.";
        else
            print "It is a wild banana with a bright green and yellow skin.";
    ],
    before [;
        Take:
            if (parent(self) == garden_trees)
                print_ret "The bananas are way up in the tree, out of reach.";
        Eat:
            if (self.eaten)
                print_ret "You have had your fill of bananas.";
        Whip:
            <<Whip garden_trees>>;
    ],
    after [;
        Eat:
            move banana to garden_trees;
            banana.eaten = true;
            print_ret "You peel the banana and take a bite, the fruit is
            firm and sweet with a subtle flavor. You finish eating the rest
            of the delicious fruit - You feel revitalized.";
    ];

! Also see the custom 'WhipSub' action.
EssentialObject bullwhip "bullwhip"
with
    name 'bullwhip' 'whip',
    description "A leather whip made of braided strips, you can use it to
                WHIP SOMETHING to grab items out of reach, or to grip a
                fixture to swing and pull yourself over short distances.",
    before [;
        Use:
            print_ret "Start your sentence with WHIP, like WHIP THE TREE.";
    ],
    has clothing worn;

!
Object canoe "canoe"
with
    name 'boat' 'canoe' 'oar',

    ! Room Description when outside the canoe
    initial [;
        if (boatman in self) {
            print (A) boatman, " sits in the canoe gazing out over the
            moving river, the salty water lapping up the sides of his
            craft.^";
        } else {
            print "The canoe is nearby, the river gently lapping at its sides.^";
        }
    ],

    description "The canoe is built from a hollowed-out log and wooden planks, 
    it has a single lateral support float fastened to the hull on one side, to
    help stabilize the craft.
    A fishing spear and net are in the boat.",
    
    before [;
        ! Prevent the player from exiting the craft before it has shored.
        Go, Exit:
            if (parent(canoe) == River) {
                print "~We will reach your destination soon enough~ ",
                        (the) boatman, " says with a wide grin.^";
                return 2;
            }
        Enter:
            if (fish_fire in location) {
                "There is no rush, besides you are famished and that fish 
                cooking over the fire smells inviting. ";
            }
    ],
    
    after [;
        Enter:
            ! Win condition
            if (golden_egg in player) {
                deadflag = 2;
                print "You get in the canoe, ", (a) boatman ,"'s eyes light up
                when you show him ", (the) golden_egg, ". 
                You spend the time telling him of your adventure. ";
                PrintWinWording();
            }
    ],

    ! Print flavor text during the trip in the canoe
    each_turn [;
        if (self.time_left == 2 && location == River)
            print_ret "^~We are almost there, ", (a) player, "~, ",
                        (a) boatman, " says.";
    ],

    ! Initialise TurnsInCanoe timer to 0
    time_left,

    ! called when TurnsInCanoe timer expires
    time_out [;
        if (location == River) {
            ! The "1" parameter moves player silently
            ! so that we can reposition the canoe then call look.
            ! DM4 pg 21
            PlayerTo(Shore, 1);
            move canoe to Shore;
            move player to canoe;
            print "^~Here we are~, ", (a) boatman,
                    " says -- the canoe comes to a stop on the shore.^";
            <<Look>>;
        }
    ],
    has   enterable static container open;

! A debug-only object that provides the GO FASTER command to skip the ride.
#ifdef DEBUG;
Object canoe_hasten
    with
        name 'faster',
        before [;
            Enter:
                canoe.time_left = 0;
                print_ret "You hasten your journey.";
        ],
    has scenery enterable;
#endif;

TorchWickObject cloth "strip of canvas"
with 
    name 'cloth' 'canvas',
    description "A strip of canvas cloth the length of your arm, it seems pretty
    old since it is a pale dirty white.";

EssentialObject fedora_hat "fedora"
with
    name 'fedora' 'hat',
    description "This is your brown felt hat.",
    has clothing worn;

EssentialObject leather_jacket "leather jacket"
with
    name 'jacket',
    description "This is your brown jacket.",
    has clothing worn;

!
ScenicTreeObject fig_tree "fig tree"
with
    name 'fig' 'tree' 'ficus',
    description [;
        print "The fig tree, also known as Ficus Obliqua, is taller than 
            most of the surrounding jungle.";
        if (location == Clearing)
            print " The view from up there must be great.";
        print "^";
    ],
    found_in Clearing TreeTop,
        
    ! climb fig_tree => go up
    before [;
        Climb:
            if (location == Clearing)
                <<Go u_obj>>;
            if (location == TreeTop)
                <<Go d_obj>>;
    ],
    has container open light;

! A black bass that you catch with your whip
Object fish "fish"
with
    name 'fish',
    initial "A fish flops around inside the canoe.",
    description "It looks like a black bass.",

    ! Tracks if the fish was caught
    caught false,

    ! try catch the fish with the whip
    try_catch [;
        if (self notin canoe && self.caught == false) {
            Achieved(SCORE_FISHING);
            move self to canoe;
            self.caught = true;
            print_ret "*SNAP* -- As you crack the whip into the water
                    you snag a fish!
                    ~Mogillo!~ ", (a) boatman, " shouts excitedly.
                    ~What are the chances!~";
        }
    ],

    before [;
        Take:
            if (parent(self) == fish_fire) {
                "Best you take a seat first. ";
            } else {
                "You decide to leave the fish for ", (a) boatman, ". ";
            }
    ],

    after [;
        Insert:
            if (second == river_water) {
                print_ret "You put the fish back into ", (the) river_water,
                            ". ~Ai, there goes supper~ ",
                            (a) boatman, " says.";
            }
    ],

    each_turn [;
        if (self in canoe && random(3) == 1) {
            print "^A fish flops around inside the canoe.^";
        }
    ];

Object fish_fire "fire"
with
    name 'fire',
    description "The fire is burning hot, a fish is impaled on a stick 
    and suspended over the fire. ",
    before [;
        Take, Touch: 
            "It is too hot to handle safely. ";
        Receive:
            "Let us not, but say we did. ";
    ],
    has supporter;

!
NotYourPropertyObject fishing_spear "fishing spear" canoe
with
    name 'fishing' 'rod' 'spear' 'kalawai',
    description "A traditional fishing spear made from wood, it has three
    metal prongs at the business end.";

NotYourPropertyObject fishing_net "fishing net" canoe
with
    name 'fishing' 'net',
    description "The brown net seems to be hand woven from natural fibers. ";

!
SparkThrowerObject flint_stone "flint"
with
    name 'flint' 'stone' 'metallic' 'blue' 'glint',
    initial "A metallic blue glint catches your eye. ",
    description [;
        if (self has moved)
            print "A piece of flint stone, it can be used to spark a flame.^ ";
        else
            print "The glint is coming from a stone on the ground.^ ";
        ],
    found_in [;
        ! Only visible when the player has crafted the torch
        return (location == Waterfall && GetPlayerTorchObject());
    ],
    before [;
        Use:
            print_ret "Try to LIGHT TORCH WITH FLINT. ";
    ],
    after [;
        Take:
            if (self hasnt moved)
                print_ret "You pick up the stone, it is a piece of flint. ";
    ];

!
ScenicPlantObject garden_trees "fruit trees"
with
    name 'fruit' 'fruits' 'cherry' 'tree' 'trees',

    description "You see a cherry tree but it is not bearing any fruit.
    The other tree next to it, however, has a bunch of bananas.",
    
    found_in Garden,

    before [;
        Climb:
            "You try climb up the banana tree, its trunk is too smooth and
            you slide back down. ";
        Whip:
            if (parent(banana) ~= garden_trees)
                print_ret "You don't need another banana right now.";
    ],
    after [;
        Whip:
            Achieved(SCORE_WHIP_THE_BANANA);
            move banana to Garden;
            banana.whip_count = banana.whip_count + 1;
            switch (banana.whip_count) {
                1: print_ret "You take careful aim at the bunch of bananas
                up in the tree, swing your arm in a smooth arch and *SNAP*
                -- a single banana drops to the ground.";
                2: print_ret "*SNAP* -- Another banana drops to the ground.
                Years of using your whip is finally paying off.";
                default: print_ret "*SNAP* -- You deftly whip a banana off
                the tree.";
            }
    ],
    has container open;

! The prized treasure you are looking for.
EssentialObject golden_egg "Golden Egg of Man-Toomba"
with
    article "the",
    name 'gold' 'golden' 'egg',
    description "It shimmers with golden light.",
    after [;
        Take:
            if (~~self has moved) {
                print_ret "You lift ", (the) self, " carefully from it's
                resting place.";
            }
    ],
    has concealed;

!
EssentialObject journal "journal"
    with
        name 'your' 'diary' 'journal' 'book',
        
        description [;
        "Your journal is filled with your research notes about Papua
        New Guinea, its people and ", (the) golden_egg, ".  
        To consult your journal about a topic, type NOTES ON <topic>.  
        To read about the Maro River for example, enter NOTES ON THE MARO.";
        ],
        
    before [w1 w2 context;
        Consult:
            ! forward the word marker to the first word in the consult topic.
            wn = consult_from;
            ! Grab the first word in the topic
            w1 = NextWord();
            ! If the word is 'the', 'a' or 'an', grab the next word
            if (w1=='the') w1 = NextWord();
            if (w1=='a') w1 = NextWord();
            if (w1=='an') w1 = NextWord();
            w2 = NextWord();
            
            if (w1=='Papua' || w2=='Guinea' || w1=='land' || w2=='land')
                context = 'New Guinea';
                
            if (w1=='people' || w1=='native' || w1=='natives')
                context = 'People';
            
            if (w1=='jungle' || w1=='forest' || w1=='rainforest')
                context = 'Jungle';
                
            if (w1=='yam' || w1=='yams' || w1=='karuka')
                context = 'Edibles';
    
            if (w1=='maro' || w1=='river' || w2=='river')
                context = 'Maro River';
            
            if ((w1=='air' && w2 =='terjun') || (w1=='terjun'))
                context = 'air terjun';
            
            if (w1=='Mogillo' || w1=='fish' || w1=='bass' || w2=='bass')
                context = 'Mogillo';
            
            if (w1=='Kalawai' || w1=='spear' || w1=='fishing' || w2=='fishing')
                context = 'Fishing';
            
            if (w1=='treasure' || w2=='treasure')
                context = 'Treasure';
            
            if ((w1=='gold' || w1=='golden') && (w2=='egg'))
                context = 'Golden Egg';
            
            if (w1=='mannaz' || w1=='ehwaz' || w1=='gebo' || w1=='peorth')
                context = 'Glyphs';
            
            if (w1=='Sowilu' || w2=='Sowilu')
                context = 'Sowilu';
                
            if ((parent(boatman)==parent(player)) && 
                (w1=='canoe' || w1=='boat' || w1=='craft'))
                context = 'Ask Rom';
            
            switch (context) {
                'New Guinea':
                "You leaf through your notes and come to an entry about Papua
                New Guinea: It is a country in Oceania that occupies the eastern
                half of the island. Its capital, located along its southeastern
                coast, is Port Moresby. It is the world's 3rd largest island
                country. It is known to have numerous groups of uncontacted
                peoples, and researchers believe there are many undiscovered
                species of plants and animals in the interior.";
                
                'Jungle':
                "Papua New Guinea is populated by dense rain forest and large
                wetland areas. This terrain has made it difficult for the
                country to develop transportation infrastructure. Some areas are
                accessible only on foot or by plane.";
                
                'People':
                "Papua New Guinea has more than a thousand cultural groups, the
                majority being from the group known as Papuans, whose ancestors
                arrived in the New Guinea region tens of thousands of years
                ago. Most of these cultural groups have their own language.
                People typically live in villages that rely on subsistence
                farming. In some areas people hunt and collect wild plants (such
                as yam roots and karuka) to supplement their diets. Those who
                become skilled at hunting, farming and fishing earn a great deal
                of respect.";
                
                'Edibles':
                "Yam roots and karuka are popular foods in Papua New Guinea.
                A yam is a starchy edible tuber, it has a rough skin that is
                difficult to peel but readily softened by heating. The skins
                vary in color from dark brown to light pink.
                Karuka is a nut bearing tree that is a cultivated crop, the
                fruit are more nutritious than coconuts and has been used as a
                major food source for over 30 millennia.";
                
                'Maro River':
                "The Maro river flows from north-east to south-west into the
                Arafura Sea. It runs over 124 miles or 200 kilometers in length,
                and is up to 1 kilometer or two thirds of a mile wide.
                It is a complex system of swamps and oxbow lakes which hosts a
                large number of birds and reptiles.";
                
                'Glyphs':
                "You page through your notes and find the meanings of these glyphs: 
                Mannaz means mankind, intelligence and forethought.
                Ehwaz means horse, Movement and change for the better.
                Gebo means gifts or treasure.
                Peorth means something concealed or a secret.";
                
                'air terjun':
                "You page through your journal until you find your notes about
                glyphs, and find an underlined passage about air terjun -- you
                learn that the symbol indicates a hidden thing ~behind the
                falling water~.";
                
                'Mogillo':
                "Lutjanus goldiei, the Papuan black bass known locally as
                mogillo, is a large snapper species native to the Pacific Ocean
                from New Guinea all the way to Malaysia and known to inhabit
                thick, jungle rivers and brackish river mouths.
                See ~Fishing~.";
                
                'Fishing':
                "Spear fishing is a traditional method of hunting food in New
                Guinea. A fishing spear made from a wooden pole with metal
                prongs fixed to the one end. Divers in shallow water use it to
                harpoon small fish.
                See ~Mogillo~.";
                
                'Treasure':
                "New Guinea is rumored to have many hidden treasures because of
                its unexplored and rich land, most treasures are historical
                relics, however some of these items are crafted from precious
                metals or stones and are sought after by many a treasure hunter
                looking for profit.
                See ~Golden Egg~.";
                
                'Golden Egg':
                "", (The) golden_egg, " is mysterious and rumored to be
                cursed. It is said to bring misfortune to whomever tries to
                covet the shimmering artifact. The Egg is said to be crafted
                from gold and is the size of a fist.
                See ~Treasure~.";
                
                'Sowilu':
                print "You leaf through your journal and find this entry:
                ~Sowilu is the rune for the sun, and because of its symbolic
                power, it is rumored that the treasure can only be unlocked with
                a key of the sun~.^";
                if (~~sun_drawing has moved) {
                    move sun_drawing to player;
                    sun_key_hole.short_name = "keyhole";
                    "^On the opposite page is a pencil drawing of the key,
                    you remove the drawing from your journal and compare it to
                    the hole - A perfect fit - It would appear that is a 
                    keyhole.";
                }
                
                'Ask Rom':
                print "You rifle through the pages without luck, you decide to
                ask ", (a) boatman, " about it.^";
                <<Ask boatman w1>>;
                
                default: "You leaf through your journal but can't find any notes
                about that topic.";
            }
            
        Use:
            <<Examine self>>;
    ];

! The jungle is visible in all JungleRooms
SearchableObject jungle_scenery "jungle"
    with
        name 'vegetation' 'jungle' 'foliage' 'plant' 'plants' 'bush' 'brush' 'shrub',
        description "The jungle foliage is dense and lush.",
        auto_take true,
        found_in [;
            return (location ofclass JungleRoom);
        ],
        before [;
            Attack:
                print_ret "You shout and wave your fist at ", (the) self, ". ";
        ],
    has scenery;

! The word "compass" is a reserved keyword in Inform, as such we use "lodestar"
! to identify the object as it lives in the player's inventory.
! The literal, albeit archaic, meaning of "lodestar" is "a star that leads or
! guides; especially : the North Star." (The first half of the word derives from
! the Middle English word "lode," meaning "course.") Both the literal and the
! figurative sense ("an inspiration or guide") date back to the 14th century, the
! time of Geoffrey Chaucer. The literal sense fell out of use in the 17th century,
! and so, for a while, did the figurative sense - but it appeared again 170 years
! later, when Sir Walter Scott used it in his 1813 poem The Bridal of Triermain.
EssentialObject lodestar "compass"
with
    name 'compass',

    ! display a random description
    rnd_no 0,

    ! Track if the compass has been dropped before
    has_dropped false,

    description [;

        ! Test for posession
        if (self notin player) print_ret "You do not have ", (a) self, ".";

        ! Return the player to the last known good location
        if (location == LostInJungle) {
            Achieved(SCORE_USE_COMPASS);
            print "^", (A) self, " guides you back to safety.^";
            ! Parameter "1" does not perform a "look" on PlayerTo,
            ! which seems to action ##Look twice, and causes the DoorWay
            ! listing code in the Room class to run twice.
            ! Manually calling <Look> resolves this duplicate case.
            ! See DM4 $21 for more on PlayerTo.
            PlayerTo(last_known_location, 1);
            <Look>;
            return true;
        }

        ! Display a random text when examining this.
        self.rnd_no = random(5); ! 1..n
        switch (self.rnd_no) {
            1: print "You are exactly where you need to be.^";
            2: print "The needle points towards north.^";
            default:
                print (A) self, " helps you navigate while in the jungle.^";
        }

        ! In the presence of the boatman
        boatman.notice_lodestar();
        
        ! The monkey notices your action
        if (monkey_in_view()) {
            print (The) monkey, " seems very interested in the device.^";
        }
        
    ],
    
    before [;
        Take, Remove:
            if (self in monkey) {
                if (parent(monkey) == location) {
                    print "When you approach the small critter it deftly 
                    moves out of your reach. ";
                    ! monkey_forget_about_food();
                    monkey_frighten();
                    monkey_speak(random(10));
                    print_ret "";
                } else {
                    print_ret "It is out of your reach.";
                }
            }
    ],
    
    after [;
        Use:
            "To use ", (the) self, ", READ it.";
    ];

SparkThrowerObject matchbook "matchbook"
with 
    name 'match' 'matches' 'matchbook',
    description "It is a booklet of matches with red phosphorous heads,
    ~Red Herring Lucifers~ is printed on the back.",
    stock 5,
    before [;
        Burn:
            if (--self.stock == 0) {
                remove self;
                "The last match crumbles without so much as a spark, 
                you are not surprised.
                You discard the booklet, which is as useless now as
                it was 5 lucifers ago.";
            } else {
                "You strike a match, the red phosphor crumbles into dust.
                They must have gotten wet, and are now useless.";
            }
    ],
    has wet;

!
Object yam "yam"
with
    name 'yam' 'tuber',
    description [;
        if (self has moved) {
            "The yam has a rough light yellow skin.";
        } else {
            "The tuber is partially exposed above ground.";
        }],
    before [;
        Take:
            if (parent(self) == fish_fire) {
                "Best you take a seat first. ";
            }
        Eat:
            print_ret "It would be better served cooked.";
    ],
    after [;
        Take:
        if (self hasnt moved) {
            give self ~concealed;
            print_ret "You reach down pulling on the leafy parts of the plant,
            and a yam emerges from of the ground. You discard the leaves and
            keep the yam.";
        }
    ],
    has concealed edible;

!
Object river_water "Maro River"
with
    name 'maro' 'river' 'water',
    article "the",
    description "The cold water laps up against the sides of the craft. You
    remember writing facts about the river in your journal, you can READ ABOUT
    RIVER IN JOURNAL if you want to see what you have written.",
    found_in  River Shore,
    after [;
        Whip:
            return fish.try_catch();
    ],
    has container open scenery;

! The PC's bag
EssentialObject satchel "satchel"
with
    name 'bag' 'satchel',
    description "This is your brown shoulder bag.",
    before [;
        Receive:
            if (noun ofclass WeightedObject) {
                print (The) noun, " is too heavy for the satchel.^";
                return true;
            }
            if (noun == urn && urn has open) {
                "You decide to not put the open urn in your satchel, 
                it might make a mess if it spills. ";
            }
    ],
    has container open clothing worn;

! The sky is visible in all outdoor areas.
Object sky "sky"
    with
        name 'sky' 'clouds' 'weather' 'sun',
        
        ! Describe the changing sky
        description [;
            if (self.state == WEATHER_DRY) {
                "Rolling clouds move overhead. ";
            } else if (self.state == WEATHER_RAIN) {
                ! Random flavour text
                if (random(2) == 1) {
                    print "You feel the rain on your face as you look up. ";
                }
                "You see dark rain bearing clouds moving overhead. ";
            }
        ],
        
        ! The sky is found in any outside location
        found_in [;
            return (location ofclass OutdoorRoom);
        ],
        
        ! Weather state - WEATHER_DRY, WEATHER_RAIN
        state WEATHER_DRY,
        ! Turns passed in the current state
        counter,
        ! Turns until thunder is heard after lightning
        thunder_in,
        ! Switch to turn the weather off
        enabled true,
        
    daemon [;
        
        ! The weather is not enabled
        if (~~self.enabled) return;
        
        ! Add the counter
        self.counter = self.counter + 1;
        
        ! Do nothing if the sky is not in the location
        if (~~self in location) {
            return;
        }

        ! Expect rolling thunder on the way
        if (self.thunder_in > 0) {
            self.thunder_in = self.thunder_in - 1;
            if (self.thunder_in == 0) {
                print (string) random("The sound of thunder rumbles overhead",
                "The air trembles with the rolling thunder",
                "Your ears ring from the sudden clap of a lightning strike"),
                ".^";
            }
            ! No more processing while thunder is on the way
            return;
        }
                
        if (self.state == WEATHER_DRY) {
            ! Lighting
            if (random(THUNDER_ROLL * THUNDER_MULTIPLIER) == 1) {
                ! Let the player hear the thunder in n turns
                self.thunder_in = random(3);
                print (string) random("Lightning arcs across the sky.",
                "Lightning flashes in the distance.",
                "Clouds flicker menacingly with lightning."), "^";
            }
            ! Chance of rain
            if (self.counter > RAIN_START_T && random(RAIN_START_ROLL) == 1) {
                self.counter = 0;
                self.state = WEATHER_RAIN;
                print "It starts to rain.^";
            }
        } else if (self.state == WEATHER_RAIN) {
            ! Rain messages
            if (random(RAIN_ON_PLAYER_ROLL) == 1) {
                print 
                (string) random("Cold drops", "Rain drops", "Drops of rain"), 
                " ",
                (string) random("fall", "land", "spatter"),
                " on your ",
                (string) random("head", "arms", "neck", "face", "cheek", "back"),
                ".^";
            }
            ! Lightning
            if (self.thunder_in == 0 && random(THUNDER_ROLL) == 1) {
                ! Let the player hear the thunder in n turns
                self.thunder_in = random(3);
                print (string) random("Lightning arcs across the sky.",
                "Lightning flashes in the distance.",
                "Clouds flicker menacingly with lightning."), "^";
            }
            ! Clears up
            if (self.counter > RAIN_STOP_T && self.thunder_in == 0 && random(RAIN_STOP_ROLL) == 1) {
                self.counter = 0;
                self.state = WEATHER_DRY;
                print "The rain ", 
                (string) random("subsides", "peters out", "eases off"),
                ".^";
            }
        }
    ],
    has scenery;

WeightedObject stone_egg "stone egg"
with 
    name 'stone' 'egg',
    description "The stone is carved in the shape of an egg, it is the size of a
    head.";

Object sun_key "sun key"
with
    name 'sun' 'key',
    description "It is a replica carving of the sun key that you had 
    in your journal. The quality of workmanship is superb.",
    before [;
        Turn:
            if (self in sun_key_hole) {
                if (stone_altar in location) {
                    "It does not want to turn any more.";
                }
                stone_column.lower();
                return true;
            } else {
                "You turn the key around in your hands, it is a fine piece of
                work indeed.";
            }
    ];

Object sun_drawing "drawing of the sun key"
with
    name 'drawing' 'page',
    description "It is a drawing of a key, which resembles a large flat amulet
    in the shape of a sun, the beams are fashioned to serve as the 
    teeth of the key.";

! A bone that can be made into a torch.
TorchBaseObject torch_of_bone "bone"
with
    name 'bone' 'bone' 'femur',
    material "bone",
    description "It is a part of a human leg, a femur bone.";

! A wooden stick that can be made into a torch.
TorchBaseObject torch_of_wood "stick"
with
    name 'wood' 'wood' 'stick',
    material "wooden",
    description "A wooden stick about the length of your arm.";

Object seed_pouch "seed pouch"
with
    name 'seed' 'pouch' 'seeds//p',
    description "A small pouch with a drawstring and filled with edible seeds.",
    before [;
        Drop:
            "The seeds will work better inside the trap.";
        Eat:
            "Mmm not bad, but it would probably taste better to a chicken.";
        Insert:
            if (second == box_trap) {
                if (box_trap in player) 
                    "It would be easier if you put the trap down first.";
                if (some_seed in box_trap) {
                    "There is some seed in there already.";
                }
                else {
                    if (box_trap hasnt open) <Open box_trap>;
                    move some_seed to box_trap;
                    "You scatter some seeds inside the trap.";
                }
            }
    ],
    has edible;

Object some_seed "seed"
has pluralname;

WeightedObject box_trap "trap"
with
    name 'trap',
    description "The trap is a crude box consisting of a wooden frame and
    some kind of netting covering the sides. One of the sides is openable and
    acts as a door.",
    is_set false,
    
    before [;
        Take:
            ! Cannot take it before it is given to you
            if (~~self has moved) print_ret (The) noun, " is not yours to take.";
            remove some_seed;
            remove trap_string;
            self.is_set = false;
        Drop:
            if (last_known_location == Tribe) 
                print "This looks like a good place to set the trap. ";
        Open:
            ! Cannot open it before it is given to you
            if (~~self has moved) "You would rather leave it alone.";
            if (chicken in self) "If you do that the chicken might escape.";
        Set:
            if (chicken in self)
                "But you already have ", (the) chicken, ".";
            if (player in canoe)
                "This is not an ideal location to set the trap.";
            if (self in player)
                "It would be easier if you put the trap down first.";
            self.is_set = true;
            give self open;
            move trap_string to player;
            "You prop the trap door open with the stick, and take hold
            of the free end of the string. You take a few paces back from the
            trap.";
    ],
    
    swings_shut [;
        if (self has open && self.is_set == false) {
            give self ~open;
            print "The trap door swings shut by itself.^";
        }
    ],
    
    has container openable transparent;

Object trap_string "trigger string (held)"
with 
    name 'string',
    before [;
        Pull:
            box_trap.is_set = false;
            "You give the string a quick yank, the propped stick flies out from
            under the trap door.";
    ];

! [ ==================================================== Non Player Characters ]

! [ ------------------------------------------------------------------ Chicken ]
AnimalNPC chicken "hen"
with
    name 'chicken' 'bird' 'hen',
    description [;
        if (self in box_trap)
            "The hen sits quietly in the trap.";
        else
            "The female chicken is pecking at the dirt for grubs and bugs.";
    ],
    venture_clock 5,
    before [;
        Take:
            if (parent(self) == box_trap) {
                "Best keep the chicken inside the trap, lest it escapes.";
            }
            remove self;
            self.venture_clock=5;
            print_ret (The) self, " moves quickly out of reach and
            disappears into the jungle.";
        Drop:
            ! release the hen, reset capture progress
            StartDaemon(chicken);
            print "You put the hen down on the ground. ";
            ! Try take the hen which makes it scatter away
            <<Take self>>;
    ],
    
    life [;
        Show:
            if (noun == seed_pouch)
                "The hen is determined to keep a safe distance from you.";
            else
                "She shows no interest in ", (the) noun, ".";
    ],
    
    daemon [;
        ! when inside the trap
        if (self in box_trap) {
            if (box_trap has open) {
                ! exit the trap
                if (random(5)==1) {
                    move self to parent(box_trap);
                    remove some_seed;
                    "The chicken exits the trap.";
                }
            }
            ! the trap is closed and our chicken no longer can wander
            else {
                remove some_seed;
                StopDaemon(chicken);
                if (box_trap notin player) "The chicken is oblivious and keeps on pecking at the seed.";
            }
            ! stop processing
            return;
        }
        ! when not in the player's location
        ! and player is in the Tribe, or adjacent to the Tribe (LostInJungle)
        if (parent(self) ~= location && last_known_location == Tribe) {
            ! only when venture clock has run down
            if (--self.venture_clock > 0) return;
            ! reset venture clock
            self.venture_clock=5;
            ! move hen to the location
            move self to location;
            if (location == LostInJungle)
                "A hen appears from out the foliage.";
            else
                "A hen appears from out the jungle.";
            ! stop processing
            return;
        }
        ! enter the trap
        if (box_trap.is_set && some_seed in box_trap && random(5)==1) {
            move self to box_trap;
            "The hen enters the trap posthaste and begins her pecking frenzy.";
        }
    ],
    
    has female;

! [ ------------------------------------------------------------------- Monkey ]
AnimalNPC monkey "monkey"
with
    name 'monkey',
    
    ! Hiding away counter
    fright_turns 0,
    
    ! First fright state
    first_fright true,
    
    ! When in the presence of a banana, take a few turns before taking it.
    reach_for_food_counter 0,
    
    initial [;
        print "There is a monkey here. ";
        if (lodestar in self)
            print "It has ", (a) lodestar, ". ";
        print_ret "";
    ],
    
    description [;
        if (lodestar in self) {
            print "The small creature is fascinated by ", (a) lodestar, ".^ ";
        }
        else {
            print "It is a small grey monkey with big brown eyes.
            It looks back at you.^ ";
        }
    ],
    
    life [;
        Ask, Answer, Tell:
            monkey_speak(random(10));
            print_ret "";
        Give:
            if (noun ofclass EdibleFruitObject) {
                "The creature smacks its lips at the sight of ", (the) noun, 
                ", but hesitates to go near you.";
            }
            if (noun ofclass EssentialObject) {
                "There is no way are you giving ", (a) noun, 
                " to ", (the) self, "!";
            }
            "You offer ", (the) noun, " to the small critter, it couldn't be
            less interested.";
        Show:
            if (noun ofclass EdibleFruitObject)
                print_ret "The small monkey head swivels side-to-side as you
                wave ", (the) noun, ", showing it off. ", (The) self, "
                likes what it sees but looks hesitant to go near you.";
            if (noun ofclass EssentialObject)
                print_ret "It seems curious about ", (the) noun, ".";
        ThrowAt:
            if (noun ofclass EdibleFruitObject)
                print_ret "Maybe it would be better to just drop ", (the) noun,
                ".";
            else
                <<Attack self>>;
    ],
    
    orders [;
        Give:
            if (noun == lodestar) {
                monkey_speak(random(10));
                print_ret " it replies, gripping the device tightly.";
            }
    ],
    
    ! Monkey Movements
    daemon [look_item fruit;
    
        ! Move to the clearing if the player is in the tree
        if (self in fig_tree && location == TreeTop) {
            print "The monkey is not impressed, it climbs down the tree.^";
            give self curious;
            move self to Clearing;
            return;
        }
        
        ! No action if not curious
        if (monkey hasnt curious) return;
        
        ! Flee when frightened
        if (self.fright_turns > 0 && monkey_near_player(true)) {
            move self to fig_tree;
            ! Print flavor text when monkey is frightened the first time
            ! from a whip action.
            if (self.first_fright && action == ##Whip) {
                self.first_fright = false;
                print "^The piercing sound startles ", (the) self, 
                ", it launches up into the air and ";
            } else {
                print "^", (The) self;
            }
            if (location == Clearing) {
                print_ret " scrambles up ", (the) fig_tree, ".";
            } else {
                print_ret " scrambles out of sight.";
            }
        }
        
        ! Rebuild confidence
        if (self.fright_turns > 0) {
            self.fright_turns = self.fright_turns - 1;
            return;
        }

        ! Climb down the tree
        if (self in fig_tree) {
            move self to Clearing;
            if (location == Clearing) {
                print_ret "^", (The) self, " climbs down from ", (the) fig_tree, ".";
            }
        }
    
        ! No action if the player is not nearby.
        if (~~monkey_near_player(false)) return;
        
        ! Scan for any edibles in the room
        fruit = nothing;
        objectloop(look_item in parent(self)) {
            if (look_item ofclass EdibleFruitObject)
                fruit = look_item;
        }
        
        ! If there is a fruit in reach
        if (fruit && parent(self) == parent(fruit)) {
            self.reach_for_food_counter = self.reach_for_food_counter + 1;
            print "^";
            switch (self.reach_for_food_counter) {
                1:  
                    print_ret (The) self, " stares at ", (the) fruit,
                    ", then glares at you, looks at the banana again,
                    smacking it's lips.";
                2:  
                    print_ret (The) self, " edges closer to ", (the) fruit,
                    " while keeping one eye on you.";
                3:  
                    print (The) self, " grabs ", (the) fruit, 
                    ", stuffing its face with the delicious fruit.";
                    if (lodestar in self) {
                        ! remove the fruit and return the player's possession
                        move fruit to garden_trees;
                        move lodestar to location;
                        ! climb back into the tree and reset counters
                        monkey_forget_about_food();
                        Achieved(SCORE_RESCUE_COMPASS);
                        print_ret " It seems distracted and left ", 
                        (the) lodestar, " lying on the ground.";
                    }
                    print_ret "";
            }
        }
        
        ! Let the monkey do something when in the presence of the player
        if (parent(self) == parent(player)) {
            monkey_action();
        } else {
            ! When not with the player, follow the player.
            if (random(4) == 1) {
                ! Move to the player's location
                print (The) self, " appears nearby.^";
                move self to parent(player);
            }
        }    
    ],
    has transparent;

[monkey_forget_about_food;
    monkey.reach_for_food_counter = 0;
];

[ monkey_frighten;
    if (monkey_near_player(true)) {
        monkey.fright_turns = 4;
        ! Reset turn to reach for the banana
        monkey_forget_about_food();
    }
];

! Test if the monkey is near the player
[ monkey_near_player same_room;
    if (same_room) {
        return parent(monkey) == parent(player);
    }
    else {
        ! Test the Player's location
        return location == Clearing || location == Bungalow 
            || location == Garden || location == JunglePath
            || location == Tribe;
    }
];

! Test if the monkey is in view of the player
[ monkey_in_view;
    if (monkey_near_player(true)) {
        return true;
    } else {
        if (location == Clearing && monkey in fig_tree) {
            return true;
        }
    }
    return false;
];

[ monkey_action n;

    ! only some times
    n = random(10);
    if (n > 6) return;
    
    ! begin a new line
    print "^";
    
    ! The monkey has the compass and half the time
    if (lodestar in self && n > 15) {
        switch (n % 5) {
            0: print_ret (The) self, " stares at the moving needle on ", 
                (a) lodestar, ".";
            1: print_ret (The) self, " fidgets with ", (a) lodestar, ".";
            2: print_ret (The) self, " taps ", (a) lodestar, " on the ground.";
            3: print_ret (The) self, " bites on ", (a) lodestar, ".";
            4: print_ret (The) self, " sniffs ", (a) lodestar, ".";
        }
    } 
    else { ! The monkey does not have the compass, or the other half the time
        switch (n % 4) {
            0: print_ret (The) self, " scratches itself.";
            1: print_ret (The) self, " picks something off the ground, 
                and eats it.";
            2: print_ret (The) self, " makes grunting noises.";
            3: print_ret "~Ook ook~ says ", (the) self, ".";
        }
    }
];

! hoot, scream, howl, coo, rumble, bark, pant, grunt, whoop, screech, gibber.
[ monkey_speak n;
    switch (n % 8) {
        1: print "~*Coo*coo*~";
        2: print "~*Whoop*whoop*~";
        3: print "~*Howls*~";
        4: print "~*Pants*Grunt*~";
        4: print "~*Gibbers*~";
        6: print "~*Screech*~";
        7: print "~*Rumble*~";
        default: print "~*Grunts*~";
    }
];

! [ ------------------------------------------------------------------ Boatman ]
HumanNPC boatman
    with
        name 'guide' 'rom' 'man',
        article "your",
        short_name "guide",

        ! he noticed you examining your compass
        noticed_compass false,
        
        ! he told you to bring him a yam in exchange for the trap
        expects_yam false,

        ! Hide the room listing (in the boat you see your guide)
        initial [;
            if (self in canoe) {
                return true;
            } else if (fish_fire in location) {
                "", (A) self, " is sitting here next to a fire. 
                He beckons you to take a seat. ";
            }
        ],

        each_turn [;
            ! Only while on the River
            if (parent(canoe) == River && self in canoe)
                boatman_each_turn_action(random(10));
        ],

        description [;
            print "A native to Papua New Guinea, he seems to navigate
            this river like he has done it for all his years. ";
            if (self hasnt proper) {
                print "Perhaps you should SAY HI.^";
            }
        ],
        
        notice_lodestar [;
            if (TestScope(self, player)) {
                if (boatman.noticed_compass == false) {
                    boatman.noticed_compass = true;
                    print "^", (A) self, " notices ", (a) lodestar, " -- ";
                }
                print "~My father had one just like that.~^";
            }
        ],
        
        life [pname pause pause_n;
            ! Refers to the player by name, if introduced
            if (self has proper) {
                pname = player.short_name;
            } else {
                pname = "mister";
            }
            ! Takes a pause between sentences
            pause_n = random(14);
            switch (pause_n) {
                1: pause = ",~ he says, taking a moment to listen to the sound
                of the river, and continues, ~";
                5: pause = ",~ he turns his gaze up to judge the weather, then
                back at you, ~";
                9: if (parent(canoe) == River) {
                        ! On the river specifically
                        pause = ",~ he pauses to steer the craft around 
                        a floating tree trunk, ~";
                    } else {
                        pause = ",~ he ruminates, ~";
                    }
                13: if (parent(canoe) == River) {
                        ! On the river specifically
                        pause = ",~ he muses while paddling with the oar, ~";
                    } else {
                        pause = ",~ he pauses to listen to the sound of a monkey
                        barking in the jungle, ~";
                    }
                default:
                    pause = ". ";
            }
            Answer:
                return boatman_answers(noun);
            Ask:
                return boatman_ask(second, pause);
            Tell:
                return boatman_ask(second, pause);
            Show:
                if (noun == lodestar) {
                    self.notice_lodestar();
                    return;
                }
                if (noun == yam && self.expects_yam) {
                    "~Yep, that is a yam alright, it will make a good meal.~ ";
                }
                if (noun == banana) {
                    "~Those are good for eating, the wild monkeys that live
                    in the jungle here, they like them bananas too.~ ";
                }
                if (noun == box_trap) {
                    boatman_ask('trap');
                }
                if (noun == bullwhip) {
                    "~I have seen whips before, ", (string)pname, ", but we
                    don't have much use for them"
                    , (string) pause,
                    "We farm the waters mostly, and some pigs too.~ ";
                }
                if (noun == leather_jacket) {
                    "~I like your jacket, ", (string)pname, ".~ ";
                }
                if (noun == fedora_hat) {
                    "~That is one fine hat, ", (string)pname, ", but I never
                    cared for having one myself.~ ";
                }
                if (noun == golden_egg) {
                    "", (A) self, "'s are sparkle with delight - 
                    ~The legends were true!~ ";
                }
                if (noun == matchbook) {
                    "~Those are useful, but hard to get those around here"
                    , (string) pause,
                    "I make fire with a fire plough, rubbing a stick in a 
                    groove, or using a piece of flint. Those are plentiful
                    near running water.~ ";
                }
                if (noun == satchel) {
                    "~Nice bag you got there, ", (string)pname, ".~ ";
                }
                if (noun == seed_pouch) {
                    "~You put those in the trap to lure the chicken inside.~ ";
                }
                print_ret (A) self, " looks amusingly at ", (the) noun, ". ";
            Give:
                if (self.expects_yam && noun == yam) {
                    move yam to self;
                    move box_trap to player;
                    move seed_pouch to player;
                    print "~This will do fine!~ he says with a laugh. He hands
                    you a pouch filled with seeds, along with the trap. 
                    ~Remember to SET the trap, then PULL the string
                    when the chicken is inside. Good luck!~ ";
                    return true;
                }
                if (noun == box_trap || noun == seed_pouch) {
                    if (carver.carving_state == 0) {
                        "No, you still have to catch that sneaky chicken. ";
                    }
                    move box_trap to canoe;
                    move seed_pouch to canoe;
                    "~Thanks friend, I hope you caught that chicken.~ ";
                }
                "~No thanks~, ", (a) self, " politely declines.";
            Order:
                if (Tribe has visited && (second == box_trap || noun == box_trap)) {
                    if (yam in self) {
                        "~I hope you caught that chicken you were after!~ ";
                    } else if (self.expects_yam) {
                        "~Of course you are free to use my trap, just find me a
                        yam~, ", (a) self, " says smiling. ";
                    } else {
                        self.expects_yam = true;
                        "~You know, I will lend you my chicken trap, if you find
                        me a yam. I think yam and fish will make a good meal.~ ";
                    }
                } else
                "You have no reason to ask for that. ";
        ],
;

[ boatman_ask second pause;
    switch (second) {
        'papua', 'new', 'guinea':
            "~Lived here all my life, just like my family before me.~";
        'family', 'wife':
            "~My wife and I live in a village nearby, she makes fishing nets
            and beaded jewelry"
            , (string) pause,
            "I catch fish and give boat rides.~ ";
        'jungle', 'forest':
            "~The jungle is our home, our past and our present, 
            and our livelihood.~ ";
        'path':
            "~That path to the north will take you into the jungle.~ ";
        'canoe', 'boat', 'oar':
            "~I have the canoe for many years now, built it myself,~ ",
            (a) self, " says proudly"
            , (string) pause;
        'river', 'maro', 'water':
            "~The ancient waters of the Maro will swallow you whole if you try
            to swim,~ he says mournfully"
            , (string) pause,
            "It may not look it, but the current is strong and the water is
            cold.~ ";
        'father':
            "~He taught me how to build boats and fish, taught me
            everything to live and survive out here.~ ";
        'spear':
            "~We call that a Kalawai~, nodding at the spear in the
            boat"
            , (string) pause,
            "Good for catching dinner.~ ";
        'net':
            "~That is a cast net"
            , (string) pause,
            "I throw it out into the water, haul it back in.~ ";
        'fish':
            if (fish in fish_fire) {
                "~It smells good, and almost done.~";
            } else if (fish in canoe) {
                "~We will have some good dinner tonight!~";
            } else {
                "~If you catch us a fish, we will cook it,~ he says in jest. ";
            }
        'fishing':
            <Ask self 'spear'>;
            <<Ask self 'net'>>;
        'time', 'longer':
            "~We will reach the shore soon.~ ";
        'trap':
            "~That, my friend, is a chicken trap"
            , (string) pause,
            "You set the trap - prop the door open with this wooden rod - 
            and pull on the this string to swing the door shut.~ ";
        'pig', 'pigs':
            "~Had a pig once, had it as a pet, but then I lost pig,~ 
            he chuckles as if thinking about something funny. ";
        'lost', 'pig':
            "~It ran away, into a place under ground - never did find that
            pig.~ ";
        'chicken':
            if (carver.carving_state == 0) {
                "~You will no doubt see some chickens roaming these parts.~ ";
            } else {
                "~Glad to hear you caught it!~ ";
            }
    }
    print_ret (The) self, " grins at you and nods. ";
];

[ boatman_answers noun;
    switch (noun) {
        'hello', 'hi', 'greetings':
            if (self has proper)
                print_ret (A) self, " looks baffled at your repeated greeting,
                            but he obliges you with a big grin anyway.";
            else {
                print "You introduce yourself to ", (a) self, ". ^^~Nice to meet
                        you, ", (a) player, "~, he says with a grin, ~I am
                        Rompinjimp-Nanganbia Tiki. ";
                boatman_rename();
                print "Call me ", (a) self, ".~^ ";
                return true;
            }
        'bye', 'goodbye', 'cheers':
            if (location == River)
                "No need to say goodbye to ", (a) self, " before you reach your
                destination.";
            if (location == Shore)
                "~Safe travels ", (a) player, ", I hope you find what you are
                looking for!~, ", (a) self, " waves.";
        'yes':
            "~Glad to hear it!~ ";
        default:
            print_ret (A) self, " does not reply.";
    }
];

[ boatman_rename;
    boatman.short_name = "Rom";
    give boatman proper;
];

[ boatman_each_turn_action n;
    switch (n) {
        1, 3:
            print "^", (A) boatman, " paddles with the oar.^";
        5:
            if (fish in canoe)
                print "~We will have fish for dinner tonight~, ",
                    (a) boatman, " says hungrily.^";
        7:
            print "^", (A) boatman, " looks across the salty water,
                into the distance.^";
        9:
            if (random(2) == 1)
                if (boatman.noticed_compass == true)
                    print "^~I still have my father's compass...~, ",
                        (a) boatman, " reflects nostalgically.^";
    }
];

! [ ------------------------------------------------------------- Native Tribe ]
HumanNPC natives "natives"
with
    name 'people' 'men' 'women' 'native' 'natives',
    description "Women and men are weaving plant fibers into
    fishing nets and ropes, some are tending to a firepit while others
    prepare pumpkins, tubers and fish. ",
    found_in Tribe,
    Life [;
        Ask, Tell, Give:
            ! test second
            "They seem content with doing their chores, you would rather not
            disturb them. ";
        Answer:
            ! test noun
            switch (noun) {
            'hi', 'hello':
                "The people wave back at you with smiles.";
            }
    ],
    has pluralname scenery;

! [ ------------------------------------------------------------------- Carver ]
HumanNPC carver "carver"
with 
    name 'man' 'carver',
    initial [;
        if (self.carving_state == 1) {
            "The carver gestures at you for the drawing. ";
        }
        "A man sits nearby, carving a piece of wood. ";
    ],
    description [;
        if (self.carving_state == 0 || self.carving_state == 50)
            "He is busy carving a rough piece of dry wood using a knife and
            other assorted hand tools. There are half a dozen carved wooden
            statuettes and figurines in various stages of completion on the
            ground beside him. His handiwork tells you he is very skilled in his
            trade.";
        else if (self.carving_state == 1)
            "The carver is waiting for the drawing of the sun key.";
        else if (self.carving_state > 1)
            "The carver is busy working on your sun key replica.";
    ],
        
    found_in Tribe,
    
    ! 0: initial
    ! 1: waits for drawing
    ! 2-n: busy with the carving
    ! 50: done with the carving
    carving_state 0,
    
    life [;
        Ask,Answer,Tell:
            "The man says something unintelligible while gesturing to his works.";
        Give:
            if (noun ofclass EssentialObject) {
                "He refuses to take ", (the) noun, ".";
            }
            else if (noun == sun_drawing && self.carving_state == 0) {
                <<Show noun self>>;
            }
            else if (noun == sun_drawing && self.carving_state == 1) {
                remove sun_drawing;
                self.carving_state = 2;
                Achieved(SCORE_BRIBERY);
                StartDaemon(self);
                "He takes the drawing from you, picks a piece of wood
                from his pile and begins carving. This may take a while, 
                you could return the trap while you wait. ";
            }
            else if (noun == box_trap && chicken in box_trap && self.carving_state == 0) {
                remove chicken;
                self.carving_state = 1;
                "The carver has a big grin on his face, he removes the hen
                from the trap and takes her over to the firepit, handing the
                hen to another man. He returns and gestures to you for the
                drawing. ";
            }
            else
                "He takes ", (the) noun, " and examines it, turns it around a
                few times, and finally hands it back to you. ";
        Show:
            if (noun ofclass EssentialObject)
                "He seems more interested in his carvings than ", (the) noun, ".";
            if (noun == sun_drawing && self.carving_state == 0)
                "The man takes a look at the drawing, and he seems to understand
                that you want a carving of it. He gestures to his mouth as if 
                eating, and tucking his hands under his shoulders, flaps his
                elbows like a bird.";
            if (noun == sun_drawing && self.carving_state == 1)
                <<Give noun self>>;
            if (noun == box_trap && chicken in box_trap) {
                "The man seems impressed!";
            }
    ],
    
    daemon [;
        if (self.carving_state > 1 && self.carving_state < 50) {
            if (++self.carving_state == 20) {
                self.carving_state = 50;
                move sun_key to Tribe;
                StopDaemon(self);
                if (player in Tribe) {
                    "The carver gestures to you that he is done with the 
                    carving.";
                }
            }
        }
    ];

! [ ==================================================================== Rooms ]

! [ ----------------------------------------------------------------- Bungalow ]
OutdoorRoom Bungalow "Bungalow"
with
    description [;
        if (self hasnt visited) {
            print "You enter the decrepit hovel and immediately notice the
            missing roof, it has long since collapsed onto the floor, providing
            little protection from the elements. ";
        } else {
            print "You are inside a dilapidated bungalow. ";
        }
    ],
    before [;
        Examine:
            if (noun == d_obj)
                print_ret "The ground is strewn with rubble.";
            if (noun == u_obj) {
                print "Since the roof is no longer there you can see the sky.^";
                <<Examine sky>>;
            }
    ],
    cant_go "The only exits are North and Southwest.",
    n_to clearing_way,
    sw_to garden_way;

SearchableObject bungalow_rubble "rubble"
with 
    name 'rubble' 'detritus' 'junk' 'debris' 'roof' 'floor' 'bungalow' 'hut' 'room',
    found_in Bungalow,
    description "A pile of debris litters the floor, made up of chunks of roof thatching and
    broken remnants of furniture.",
    search_lead "You scrounge amid the rubble and disturb a giant centipede -
    The critter scurries out of sight. You continue your search and find ",
    search_concludes "You take it.",
    auto_take true,
    before [;
        ! Alias Dig as searching
        Dig:
            <<Search self>>;
        ! Hide the rubble from the room description when searched
        Search:
            give self scenery;
    ],
    has pluralname;

! [ ----------------------------------------------------------------- Clearing ]
JungleRoom Clearing "Clearing"
with
    description [;
        if (self hasnt visited) {
            print "The jungle recedes here to create a natural clearing, the
            ground is firm and the area is surrounded by jungle vegetation. 
            You have a clear view of the sky above. ";
        } else {
            print "You are in a natural clearing surrounded by jungle. ";
        }
        if (monkey in fig_tree) {
            print "A large fig tree stands here with a monkey sitting in it. ";
        } else {
            print "A large fig tree stands here. ";
        }
    ],
    e_to jungle_path_way,
    s_to bungalow_way,
    u_to TreeTop,

    before [;
    
        ! climb up => go up
        Climb:
            if (noun == u_obj)
                <<Go noun>>;
        
        ! Describe climbing up the tree
        Go:
            if (noun == u_obj) {
                if (player has burdened) {
                    "Not while carrying that heavy thing. ";
                }
                print "You climb up the strong branches of the fig tree.^";
            }
    ];

! [ -------------------------------------------------------------------- Cliff ]
JungleRoom Cliff "Gorge"
with
    description [;
        if (self hasnt visited) {
            print "After a good climb you reach the top of the hill.
            Jungle is around you on all sides except for a deep gorge to the 
            east, a rope bridge spans across it. ";
        } else {
            print "You are overlooking a deep gorge. ";
        }
    ],
    d_to stone_stairs,
    s_to stone_stairs,
    e_to bridge_way;

! [ -------------------------------------------------------------- Deadly Drop ]
OutdoorRoom DeadlyDrop "Deadly Drop"
with
    description "",
    turn_count 0,
    before [;
        Whip:
            ! Whip the bridge to save yourself
            if (noun == rope_bridge) {
                ! Reset puzzle state
                ! self.turn_count = 0;
                print "You swing your whip and *SNAP* it on the 
                rope bridge. Dangling precariously, you pull yourself back up
                to safety. That was close!^ ";
                playerTo(Waterfall);
                return true;
            }
        Take:
            if (noun == rope_bridge) {
                print_ret "You are off balance and the rope is just out of your
                reach! ";
            }
        Jump, JumpOver:
            print_ret "A rope bridge is a terrible place to decide to start jumping. ";
    ],
    each_turn [;
        if (self.turn_count == 0) {
            print "You step on a rotten plank and it cracks under your weight,
            you lose your balance!^";
        }
        if (self.turn_count == 1) {
            if (fedora_hat in player) {
                print "Teetering the other way, your fedora tumbles into the
                gorge below -- You are about to fall!^";
                remove fedora_hat;
            } else {
                print "You teeter the other way -- You are about to fall!^";
            }
        }
        if (self.turn_count == 2) {
            deadflag = 1;
            print "^You plummet into the gorge below, cracking your head
            on a rocky outcropping, far down below. Weeks pass before the small
            search party discover your broken body. Luckily you did not suffer.
            ^^(If only you tried your WHIP)";
        }
        self.turn_count = self.turn_count + 1;
    ],
has light;

Object rope_bridge "rope bridge" DeadlyDrop
with
    name 'rope' 'bridge',
    description "The bridge is made from plait ropes and narrow planks, 
    it seems weathered and old. ",
    has scenery;

! [ ------------------------------------------------------------------- Garden ]
JungleRoom Garden "Garden"
with
    description [;
        if (self hasnt visited) {
            print "You enter into a small garden -- whoever kept it hasn't been
            here for a very long time. The plants are growing wild and are all
            over the place. ";
        } else {
            print "You are in a small garden, you see some vegetable plants
            and fruit trees. ";
        }
    ],
    ne_to bungalow_way;

ScenicPlantObject "vegetable plants" Garden
with
    name 'veg' 'veggie' 'veggies' 'vegetable' 'vegetables' 'plant' 'plants',
    description [;
        print "The vegetable plants in the garden have grown wild without
        anybody around to harvest them. ";
        if (yam has concealed) {
            print "You notice some kind of tuber growing on the ground. ";
        }
        "";
    ],
    before [;
        Search:
            <<Examine self>>;
    ];

! [ -------------------------------------------------------------- Jungle Path ]
JungleRoom JunglePath "Jungle Path"
with
    description [;
        if (self hasnt visited) {
            print "Plants of all shapes and sizes fill every nook the jungle,
            this narrow path is drowning in vegetation. ";
        } else {
            print "You are on a narrow path surrounded by dense vegetation. ";
        }
    ],
    before [;
        Examine:
            if (noun == s_obj)
                print_ret "You see a river that way. ";
            if (noun == w_obj)
                print_ret "You see a clearing in the jungle that way. ";
        Go:
            if (fish in canoe && (golden_egg in player || golden_egg in satchel)) {
                SetupFishDinnerScene();
            }
    ],
    n_to [;
        if (temple_way in location) return temple_way;
        return LostInJungle;
    ],
    w_to clearing_way,
    s_to shore_way;

! [ -------------------------------------------------------------- Lost Jungle ]
JungleRoom LostInJungle "Lost in the Jungle"
with
    description [;
        if (self hasnt visited) {
            print "There is no path this way and you struggle walking through
            the dense vegetation. You are surrounded by the jungle and every
            direction looks the same -- You are lost.";
        } else {
            print "You don't know where you are.";
        }
    ],
    before [;
        Go:
            if (random(OddsOfFindingWayWhenLost) == 1) {
                print "^You happen to find your way back.^";
                ! parameter "2" honors brief room descriptions - DM4 pg 21
                PlayerTo(last_known_location, 2);
                return true;
            }
            else
                print_ret "You fumble through the jungle.";
    ];

! [ --------------------------------------------------------------- Maro River ]
OutdoorRoom River "The Maro River"
with
    #ifdef DEBUG;
    description "",
    #ifnot;
    description [;
        if (self hasnt visited) {
            print "The ", (a) canoe, " rocks gently on the water as you travel
            up the river. ", (A) boatman, " sits at the other end of the craft
            rowing with an oar. You wonder how much longer this will take, you
            have been in this ", (a) canoe, " for a while now. You are anxious
            to start searching for the treasure.";
        } else {
            print "You are in ", (a) canoe, " on the Maro river. ", (A)
            boatman, " is with you, rowing the craft.";
        }
    ],
    #endif;
    
    before [;
        ! Senses
        Examine:
            if (noun == u_obj)
                <<Examine sky>>;
            if (noun == d_obj)
                <<Examine canoe>>;
            if (noun in compass)
                print_ret "You see the jungle across the water.";
        Listen:
            print_ret "You hear the sound of water splashing as ", (a) boatman,
            " paddles with his oar.";
        Smell:
            print_ret "You smell the fresh air and feel revitalized.";
    ];

Object "jungle"
with 
    name 'jungle' 'foliage' 'plant' 'plants' 'bush' 'brush' 'shrub',
    description "The jungle looks green and lush from this distance.",
    found_in River,
    before [;
        Examine: ;
        default: "The jungle is out of reach.";
    ],
    has scenery;

! [ -------------------------------------------------------------- River Shore ]
OutdoorRoom Shore "River Shore"
with
    description [;
        if (player in canoe) {
            print "You are in the canoe on the shore, you can exit the canoe. ";
        }
        else {
            print "The shore is wet and muddy and extends east-to-west. ";
        }
    ],
    
    n_to jungle_path_way,
    cant_go "You walk that way and soon realize there are no paths leading
            into the jungle, you return to the site where the canoe landed,
            where you see the easiest path into the jungle. ",
    
    before [;
        Go:
            if (noun == s_obj || noun == sw_obj || noun == se_obj) {
                "The river is that way, and you don't need to get yourself 
                soaking wet, or worse, drowned. ";
            }
            if (noun == ne_obj || noun == nw_obj) {
                "You try enter the jungle that way, but the dense vegetation
                resists your attempts. ";
            }
        ! Senses
        Examine:
            if (noun == u_obj)
                <<Examine sky>>;
            if (noun == d_obj)
                print_ret "You see the ground beneath you.";
            if (noun == n_obj || noun == ne_obj || noun == nw_obj)
                print_ret "You see a jungle in that direction.";
            if (noun in compass)
                print_ret "You see the river.";
        Listen:
            print_ret "You hear the sound of water lapping the canoe.";
        Smell:
            if (fish_fire in location) {
                print "You smell the fish cooking over the fire. ";
            }
    ];

! [ ------------------------------------------------------------------- Temple ]
IndoorRoom Temple "Temple"
with
    description [;
        if (self hasnt visited) {
            print "The temple is cool inside and the stone floor is covered in a
            layer of dirt, openings near the top of the structure
            provide ample natural light for you to see. ";
        }
        if (temple_stone_box hasnt open) {
            print "A sun is engraved in the floor. ";
        }
        print "The stone walls are engraved with symbols. You hear water falling
        from the north entrance, and see jungle through the south exit.";
    ],
    n_to Waterfall,
    s_to JunglePath,
    before [;
        Exit:
            if (~~noun)
                print_ret "Try say if you want to ~exit north~ or ~exit south~.";
            ! Exit the temple
            if (noun == n_obj)
                <<Go n_obj>>;
            if (noun == s_obj)
                <<Go s_obj>>;
        Go:
            if (noun == out_obj)
                <<Go n_obj>>;
        Examine:
            if (noun == n_obj)
                print_ret "You see a waterfall through the exit that way.";
            if (noun == s_obj)
                print_ret "You see a jungle through the exit that way.";
            if (noun == d_obj)
                <<Examine temple_stone_box>>;
                
        Listen:
            "You hear the waterfall outside. ";
        Smell:
            "It smells earthy in here. ";
    ],

    has light;

ScenicEngravingObject temple_glyphs "glyphs" Temple
with
    name 'glyph' 'glyphs' 'symbol' 'symbols' 'wall' 'walls',
    description "The engravings cover all of the walls. Your attention
    is drawn to a circular pattern in the glyphs as they converge and surround
    one large glyph -- You recognize this glyph as ~air terjun~.",
    has pluralname;

ScenicRockObject "glyphs" Temple
with
    name 'air' 'terjun',
    description "You may have some information about ~air terjun~ in your
    journal.",
    before [;
        Take: "You can't take the glyphs as they are engraved into the stone.";
    ];

ScenicRockObject temple_stone_box "engraved sun" Temple
with
    name 'stone' 'slab' 'hole' 'engraved' 'sun',
    description "The image of the sun is engraved into a slab of stone, embedded
    into the floor. Holes in the slab make it possible to open it.",
    short_name "engraved sun",
    before [;
        Take:
            <<Open self>>;
    ],
    after [;
        Open:
            ! List this container in room descriptions when it is open
            give self ~scenery;
            ! Change it's short name
            self.short_name = "hole in the floor";
            ! List the of contents manually, otherwise the default 
            ! listing prints "you open the hole in the floor".
            print "You open the stone slab with the sun engraving, revealing ";
            WriteListFrom(child(self), ENGLISH_BIT);
            print_ret ".";
    ],
    has container openable static;

ScenicBase tomb_artifacts "artifacts"
with
    name 'artifact' 'artifacts' 'clay' 'pot' 'pots' 'idol' 'idols',
    description "You see clay pots and idols carved from wood. ",
    found_in Tomb,
    before [;
        Take, Search:
            "You don't see anything worth taking. ";
    ],
    has pluralname;

Object urn "urn"
with
    name 'urn',
    description "It is a clay vessel resembling an urn. ",
    when_open "The urn is open, an oil substance inside it. ",
    before [;
        Open:
            if (self in satchel) {
                print "Taking the urn from your satchel. ";
                move self to player;
            }
        LetGo:
            if (noun == urn_oil) move urn_oil to urn;
    ],
    after [;
        Receive:
            move noun to player;
            if (noun hasnt oily) {
                if (noun ofclass TorchBaseObject && noun hasnt is_torch) {
                    "Hmm, nothing happens. ";
                }
                give noun oily;
                if (noun has is_torch) {
                    Achieved(SCORE_CRAFT_TORCH);
                }
                print_ret "You put ", (the) noun, " in the urn, it is now
                covered in oil. ";
            }
    ],
    has container openable;

Object urn_oil "oil" urn 
with 
    name 'oil',
    article "some",
    description "You are not sure what this was used for, but it distinctly
    oily.",
    before [;
        Take, Drop:
            move self to urn;
            print_ret "You would rather keep it in the urn. ";
    ];

! [ -------------------------------------------------------------- Top Of Tree ]
OutdoorRoom TreeTop "Top of Tree"
with
    description [;
        if (self hasnt visited) {
            print "You climb up the tree, as high as safely possible, and spend
            a moment to take in the view. ";
        }
        "You can see in all directions from this high up. ";
    ],
    cant_go "The only way is down.",
    d_to Clearing,
    
    before [;
        Go:
            if (noun == d_obj && lodestar in player && ~~lodestar.has_dropped) {
                print "^As you descend you drop ", (a) lodestar, 
                    " to the ground below. CLINK!
                    ^^ --- more ---^";
                lodestar.has_dropped = true;
                move lodestar to monkey;
                PressAnyKey();
                return false;
            }
    
        Climb:
            ! climb down => go down
            if (noun == d_obj)
                <<Go d_obj>>;
        
        ! Look in directions
        Examine:
            if (noun in compass && lodestar notin player && lodestar in satchel) {
                <Take lodestar>;
            }
            if (noun == ne_obj) {
                Clearing.ne_to = valley_way;
                move valley_way to Clearing;
                Achieved(SCORE_FIND_THE_WAY);
                print_ret "There! Stone stairs up the hill, in the distance to ",
                    (a) noun, ".";
            }
            ! Any other direction gives a canned response.
            ! Note that we *must* test for CompassDirection here
            ! else the Examine intercept will catch examining nouns too.
            if (noun == s_obj || noun == se_obj || noun == sw_obj) {
                "You see the Maro river that way, in the distance. ";
            }
            if (noun ofclass CompassDirection) {
                "You see more jungle to ", (a) noun, ". ";
            }
    ],
    
    after [;
        Drop:
            move noun to Clearing;
            print_ret (The) noun, " falls down below.";
    ];

! [ --------------------------------------------------------------------- Tomb ]
IndoorRoom Tomb "Underground Tomb"
with
    description [;
        if (self hasnt visited) {
            print "The tomb is small yet crammed with all manner of artifacts,
            there are clay pots stacked in each corner, wood-carved idols
            stand guard between the pots. ";
        } else {
            print "The tomb is small yet crammed with all manner of artifacts. ";
        }
        "Engravings on the walls dance under the flicker of your torch. ";
    ],
    u_to tomb_stairs,
    before [;
        Examine:
            if (noun == u_obj) {
                "You see a wall of stone above you.";
            }
            else if (noun == d_obj) {
                print "You notice the hole in the floor. ";
                <<Examine sun_key_hole>>;
            }
    ];

ScenicEngravingObject "glyphs" Tomb
with
    name 'glyph' 'glyphs' 'engraving' 'engravings' 'wall' 'walls',
    description_lead "You lean in toward the engravings and raise your torch up
    to get a better look. ",
    description "The engravings cover all of the walls, you recognize some as
    mannaz, ehwaz, gebo, peorth.";

ScenicRockObject stone_column "stone column"
with
    name 'stone' 'column',
    initial [;
        print "A stone column stands in the center of the room";
        if (sun_key_hole has examined) {
            print ", a ", (name) sun_key_hole, " in the floor next to it";
        }
        ".";
    ],
    description [;
        print "The column is round and carved out of stone, ";
        if (self.height == 5) {
            print " it reaches from floor to ceiling. ";
        } else {
            print " it reaches up from the floor toward the ceiling. ";
        }
        if (~~sun_key_hole has examined) {
            print "Your keen eye notices a small and peculiar hole in the floor
            next to it. ";
        }
        "";
    ],
    found_in Tomb,
    ! The height of the column reduces until zero
    height 5,
    ! lower the column by one unit
    lower [;
        if (self.height == 0) {
            "Nothing happens.";
        }
        if (--self.height == 0) {
            remove self;
            move stone_altar to location;
            "A low thud echoes through the ground as the column comes to a rest.";
        }
        "The column lowers into the ground with the sound of grinding stone.";
    ],
    before [;
        Climb, Enter:
            "It is too smooth on all sides to get a grip.";
    ],
    has ~scenery;

ScenicRockObject sun_key_hole
with
    name 'hole' 'keyhole',
    short_name "strange hole",
    found_in Tomb,
    before [;
        Examine:
            if (~~self has examined) {
                give self examined;
                self.short_name = "sun-shaped hole";
            }
            "The shallow hole is no more than a fist deep and a hand wide, it 
            has been carved out of the stone floor, and is in the shape of a
            sun.";
        Search:
            if (~~sun_key in sun_key_hole) {
                "You peer into the hole and see a glyph engraved in the bottom,
                and recognize it as Sowilu.";
            }
        Insert:
            "That does not fit in the keyhole.";
    ],
    has scenery container open;

ScenicRockObject stone_altar "altar"
with
    name 'stone' 'altar' 'column',
    initial [;
        print "A stone altar is here in the room, ";
        if (golden_egg in self) {
            print_ret (the) golden_egg, " sits attractively on top of it!";
        }
        if (stone_egg in self) {
            print_ret (the) stone_egg, " on top of it.";
        }
    ],
    description "The stone altar extrudes up from the floor, its top surface
    reaches up to your chest, there is a wooden plate inset into the top.",
    each_turn [n is_weighted;
        is_weighted = false;
        objectloop (n in self) {
            if (n ofclass WeightedObject) is_weighted = true;
            if (n == golden_egg) is_weighted = true;
        }
        if (~~is_weighted) {
            deadflag = 1;
            "^The weight lifted from the altar triggers a pressure plate booby
            trap, tens of tiny poisoned darts shoot out from holes hidden in the
            runed walls. You slump to the floor paralyzed, never to wake up
            again.";
        } else {
            if (golden_egg in player) {
                Achieved(SCORE_TREASURE);
            }
        }
    ],
    has ~scenery supporter;

! [ -------------------------------------------------------------------- Tribe ]
JungleRoom Tribe "Tribe"
with 
    description [;
        if (self hasnt visited) {
            print "You walk along the path for a short while, winding your way
            through the jungle. You finally emerge at the other end and find
            yourself pleasantly surprised to see other people here. ";
        }
        print "The small tribal settlement of a dozen natives are going about
        their daily chores. ";
        if (self hasnt visited) {
            <Examine natives>;
            print "They don't seem to mind your presence, and they carry on with
            their chores. ";
        }
    ],
    before [;
        Smell: "You smell the burning fire, mixed with the earthy jungle tones. ";
        Listen: "You hear the locals chatter in their native tongue, sounds
        like they are having a relaxed conversation. ";
    ],
    w_to tribe_path
;

ScenicBase firepit "firepit"
with
    name 'fire' 'pit' 'firepit',
    description "It is a pit dug in the ground, a fire is burning within.",
    description_lead "Some of the people are tending to the fire. ",
    found_in Tribe;

ScenicBase statuettes "carvings"
with 
    name 'wood' 'wooden' 'statuettes' 'figurines' 'carving' 'carvings',
    description_lead "The wooden figurines are all lined up neatly. ",
    description "They depict several deities and animals. ",
    found_in Tribe,
    before [;
        Take:
        "You don't think it would be right to take them - besides,
        you  don't see any that you be useful to you. 
        You get the feeling he will be happy to make you a carving in exchange
        for some kind of payment. ";
    ],
    has pluralname;

! [ ------------------------------------------------------------------- Valley ]
JungleRoom Valley "Valley"
with
    description [;
        if (self hasnt visited) {
            print "Pushing through the jungle you arrive in a little valley,
            rich with flowering orchids all around you. ";
        } else {
            print "You are in a lush jungle valley full of vibrant orchids. ";
        }
    ],
    u_to stone_stairs,
    n_to stone_stairs,
    s_to clearing_way,
    e_to tribe_path,
    
    before [;
        Smell:
            print_ret "You smell the scents of all the many varieties of
            orchids, mixed together they create a floral potpourri. ";
    ];

ScenicPlantObject orchids "orchids" Valley
with 
    name 'flower' 'flowers' 'flowering' 'plant' 'plants' 'orchid' 'orchids',
    description "A myriad of beautiful orchids display a rich set of vibrant
    colors -- white, pink, magenta, purple, red, yellow, gold, blue.
    Their flowers come in all shapes --  oblong, slender, conical and cruciform
    are just some of the shapes you can identify. ",
    before [;
        Take:
            print_ret "As beautiful as they are, you did not come equipped for a
            horticulture expedition. ";
    ],
    has pluralname;

! [ ---------------------------------------------------------------- Waterfall ]
JungleRoom Waterfall "Waterfall"
with
    description [;
        print "Water cascades down into a clear pool of water. ";
        if (self hasnt visited) {
            print "A fine mist circulates above the pool,
            a vivid rainbow shines from the dancing spray. ";
        }
    ],
    before [;
        Listen:
            "You hear the splashing sound of the cascading water. ";
        Swim:
            <<Enter waterfall_pool>>;
    ],
    n_to alcove_door,
    w_to bridge_way,
    s_to temple_way;

Object "mist"
with 
    name 'mist' 'rainbow',
    description "The vibrant rainbow floats motionless above the pool. ",
    found_in Waterfall,
    before [;
        Examine: ;
        default: "It is intangible, just like your dreams. ";
    ],
    has scenery;

ScenicWaterObject waterfall_cascade "cascading water" Waterfall
with
    name 'waterfall',
    description "The source is from somewhere up above,
    the water splashes into the pool.",
    before [;
        Search:
            if (alcove_door notin Waterfall) {
                move alcove_door to Waterfall;
                Achieved(SCORE_FIND_ALCOVE);
                "You lean into the narrow space behind the cascading
                water and see an alcove behind the waterfall.";
            } else {
                "You see the alcove behind the cascading water.";
            }
    ];

ScenicWaterObject waterfall_pool "clear pool water" Waterfall
with
    name 'clear' 'pool' 'water',
    description "The pool is clear with a rainbow floating above it.",
    before [;
        Search:
            "You water is clear enough to see through to the bottom, there is
            nothing of interest in the pool.";
        Enter:
            "You would rather not, the water is probably cold anyway.";
        Touch:
            "The water is cold.";
    ];

Object wood_stool "stool"
with 
    name 'stool' 'chair' 'log',
    description [; 
        print_ret "It is a piece of log used as a makeshift stool, ", (A) boatman,
        " is sitting on a similar log, next to a fire. ";],
    before [;
        Enter:
            deadflag = 2;
            print "You sit down with ", (A) boatman, " to a delightful fish 
            and yam dinner, while you recount your adventure. ", (A) boatman, 
            " then tells you stories about his family and other legends of
            Papua New Guinea, while you take notes in your journal about 
            his tales. ";
            PrintWinWording();
    ],
    has supporter;

! [ ========================================================== Doors & Bridges ]
! [ For auxiliary objects the player can enter to travel between rooms ]

! Way to the jungle path
DoorWay jungle_path_way "jungle path"
with
    name 'jungle' 'path',
    description "It is a narrow path through the dense jungle.",
    found_in Clearing Shore,
    door_to JunglePath,
    door_dir [;
        ! east from the Clearing
        if (self in Clearing) return e_to;
        ! north from the Shore
        return n_to;
    ];

! Way to the river shore
DoorWay shore_way "river shore"
with
    name 'river' 'shore',
    description "You see the river shore that way.",
    article "the",
    found_in JunglePath,
    door_to Shore,
    door_dir s_to;

! Way to the Clearing
DoorWay clearing_way "clearing in the jungle"
with
    name 'clearing',
    description "It looks like the dense jungle opens up over there.",
    found_in Bungalow JunglePath Valley,
    door_to Clearing,
    door_dir [;
        ! Return the direction this way is in
        if (self in JunglePath) return w_to;
        if (self in Valley) return s_to;
        return n_to;
    ];

! Way to the Bungalow (from both the Clearing and the Garden)
DoorWay bungalow_way "hut"
with
    name 'structure' 'hut' 'building' 'bungalow',
    description "From this distance, the walls of the small structure seem to be
    made of clay and mud, there is no roof and the general appearance of the hut
    gives the impression that its abandoned.",
    obvious_way true,
    found_in Clearing Garden,
    door_to Bungalow,
    door_dir [;
        ! south from the clearing
        if (self in Clearing) return s_to;
        ! northeast from the garden
        return ne_to;
    ];

! Way to the Garden.
DoorWay garden_way "garden"
with
    name 'garden',
    description "You see a section of garden beyond the doorway.",
    door_to Garden,
    found_in Bungalow,
    door_dir sw_to;

! Way to the Valley
! Moved to Clearing when looking NE from TreeTop
DoorWay valley_way "valley"
with
    name 'valley',
    description "You can't see the valley from here, but the way leads there.",
    door_to Valley,
    door_dir ne_to;

! Connect the inside of the Tomb with the Waterfall
DoorWay tomb_stairs "stairs"
with
    name 'stair' 'stairs',
    description "Carved out of the stone, they lead up. ",
    found_in Tomb,
    door_dir u_to,
    door_to Waterfall
    has pluralname;

! Connect the Waterfall with the Tomb via an Alcove
RockDoor alcove_door "alcove"
with
    name 'alcove',
    initial "There is an alcove through the cascading water, to the North. ",
    
    description [ torch;
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "It appears to lead underground, but it is pitch black in
            there, you can't make out where it leads. ";
        if (torch hasnt light)
            print "It is pitch black in there. If only your torch was lit.^";
        if (torch has light)
            print "You see the passage beyond the alcove leading underground.^";
    ],

    door_to [ torch;
        if (self notin Waterfall)
            "That way is the waterfall -- You don't need a shower right now.";
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "You would rather not enter without a light.";
        if (torch hasnt light)
            "It is pitch black in there. If only your torch was lit.";
        print "You steady your torch and head down the dark passage.^";
        return Tomb;
    ],
    
    door_dir n_to,
    
    before [;
        Search:
            <<Examine self>>;
    ],

    after [;
        Whip:
            print_ret "*SNAP* echos *snap* your *snap* whip.";
    ],

    has ~scenery;

! Connect the Cliff and Waterfall with a Bridge.
DoorWay bridge_way "rope bridge"
with
    name 'rope' 'bridge',
    description "The bridge is made from plait ropes.",
    obvious_way true,
    found_in Cliff Waterfall,
    door_to [;
        if (player has burdened) {
            "Not while carrying that heavy thing.";
        }
        ! Random chance of falling down.
        ! We limit this deadly action to only occur once.
        ! To allows this to happen repeatedly uncomment the "Reset puzzle state"
        ! line in DeadlyDrop.
        if (DeadlyDrop.turn_count==0 && random(2)==1) return DeadlyDrop;
        if (self in Cliff) return Waterfall;
        return Cliff;
    ],
    door_dir [;
        if (self in Cliff) return e_to;
        return w_to;
    ];

! Connect the Valley and the Cliff with the Stone Steps.
DoorWay stone_stairs "stone stairs"
with
    name 'stone' 'stairs' 'steps' 'hill' 'staircase',
    description "The individual steps are carved from stone and laid out to form
    a staircase on the hill.",
    found_in Valley Cliff,
    door_to [;
        ! Return where this way leads
        if (self in Valley) return Cliff;
        if (self in Cliff) return Valley;
    ],
    door_dir [;
        ! Return the direction this way is in
        if (self in Valley) return u_to;
        if (self in Cliff) return d_to;
    ],
    before [;
        ! Allow climbing the steps to go their way
        Climb:
            <<Go (self.door_dir())>>;
    ],
    has pluralname;

! Ways to the Temple
DoorWay temple_way "temple"
with
    name 'temple' 'building',
    description [;
        if (location == Waterfall) {
            print "The temple is about three times your height, it is
            constructed of carved stone blocks and seems partially swallowed by
            vines and plant growth. An opening South in the front serves as a
            door.^";
        }
        if (location == JunglePath) {
            print "The temple is too far to see from here.^";
        }
    ],
    obvious_way true,
    found_in [;
        if (location == Waterfall) return Waterfall;
        ! Only in the JunglePath if the Temple has been visited
        if (location == JunglePath && Temple has visited) return JunglePath;
    ],
    door_to [;
        if (location == Waterfall) return Temple;
        if (location == JunglePath) return Temple;
    ],
    door_dir [; ! Only used for ENTER actions
        if (self in Waterfall) return s_to;
        if (self in JunglePath) return n_to;
    ];

! Way to the Tribe
DoorWay tribe_path "foot path"
with
    name 'foot' 'path' 'footpath',
    description "The path winds through the jungle and you can't see where it 
    leads, but it seems regularly used as the surrounding foliage is cut away 
    to make walking on the path easier.",
    found_in Valley Tribe,
    door_to [;
        if (location == Valley) {
            return Tribe;
        }
        return Valley;
    ],
    door_dir [;
        if (location == Valley) return e_to;
        return w_to;
    ];

! [ ================================================================ Debugging ]
#ifdef DEBUG;
! These portals provide a way to quickly jump to locations in our spec scripts.
ScenicRockObject warpto_clearing Clearing with name 'clearing' 'portal';
ScenicRockObject warpto_cliff Cliff with name 'cliff' 'portal';
ScenicRockObject warpto_garden Garden with name 'garden' 'portal';
ScenicRockObject warpto_bungalow Bungalow with name 'bungalow' 'portal';
ScenicRockObject warpto_valley Valley with name 'valley' 'portal';
ScenicRockObject warpto_waterfall Waterfall with name 'waterf' 'portal';
ScenicRockObject warpto_tomb Tomb with name 'tomb' 'portal';
ScenicRockObject warpto_tribe Tribe with name 'tribe' 'portal';
ScenicRockObject warpto_shore Shore with name 'shore' 'portal';
! Some useful items used in test specifications
Object debugger_wand "Wizard's Wand" with name 'wizard' 'wand' has light;
#endif;

! [ ================================================================== Grammar ]

Include "DrHelpRoutines";
Include "DrHints";
Include "Grammar";

! [ Extend Grammar ----------------------------------------------------------  ]

! Print help when trying to "go up the noun".
[ GoUpDownNounSub;
    print "To go up or down ", (the) noun, " type ~go up~ or ~go down~. 
        To climb ", (the) noun, " type ~climb ", (name) noun, "~^";
];

Extend 	'go'		* 'up'/'down' noun				 -> GoUpDownNoun;
Extend 	'climb'		* 'up'/'down' noun				 -> GoUpDownNoun;

! Print help when trying to "talk to noun"
[ TalkToNounHelpSub;
    "Conversations have two forms: asking someone something, and telling them 
    something. Try ASK ", (the) noun, " ABOUT THE JUNGLE, or SAY HI. 
    For more help on talking, type HELP TALKING. ";
];
Verb    'talk'      * 'to' noun                     -> TalkToNounHelp;

! Add a synonym for search, as "look behind the noun".
! The default rules does not have "look behind".
[ LookBehindSub;
    <<Search noun>>;
];
Extend    'look'      * 'behind' noun                 -> LookBehind;

! Add additional syntax to allow SEARCH IN the... (the default grammar does not
! recognize the "in" keyword)
Extend    'search'    * 'in' noun                     -> Search;

! Provides a help verb when trying to "use noun".
! Individual objects implement a Use action to describe their usage.
[ UseSub;
    ! Run any intercepted object actions
    if (AfterRoutines()) return;
    ! Default response
    "Begin your sentence with a Verb.^";
];
Verb    'use'       * noun                          -> Use;

! Provides a "Dip" synonym for inserting things.
! Note that dipping implies insert something into the *parent* of the thing.
[ DipSub;
    if (second has container)
        <<Insert noun second>>;
    else
        <<Insert noun parent(second)>>;
];
Verb    'dip'       * noun 'in'/'into' noun         -> Dip;

! Provides a Whip verb.
[ WhipSub;

    if (bullwhip notin player)
        "Not without your bullwhip.";

    if (noun in player)
        "You could hurt yourself.";

    if (noun == player)
        "You are not into that kind of thing.";

    if (noun ofclass NonPlayerCharacter)
        <<Attack noun>>;

    if (parent(noun) ofclass NonPlayerCharacter)
        <<Attack noun>>;

    ! if (children(player) > 1)
    !     "You need your hands free to use the whip effectively.";
    
    ! Whipping succeeded, frighten the monkey if it is nearby
    monkey_frighten();

    ! Test if any custom after routines are handled.
    if (AfterRoutines()) return;

    ! Default response
    "You crack the whip at ", (the) noun, " -- *SNAP*";

];
Verb 'whip' * noun -> Whip;

! Add a NOTES verb that consults the journal directly.
[ NotesSub;
    if (journal in satchel) {
        <Take journal>;
    }
    if (journal in player) {
        <<Consult journal>>;
    }
    else {
        "You don't have your journal on you.";
    }
];
Verb 'notes'     * 'on' topic   -> Notes
                 * 'about' topic-> Notes
                 * topic        -> Notes;
