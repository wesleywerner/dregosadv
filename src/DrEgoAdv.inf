! For those interested, the Maro River starts in the Arafura Sea, Indonesia,
! at coordinates 8°28'03.0"S 140°21'20.8"E

Release 1;
Serial "400410";

Constant Story "Dr Ego and the Egg of Man-Toomba";
Constant Headline
            "^An Interactive Fiction Story
             ^by Special Agent.^";

! [ ================================================================ Constants ]

! Enable beta test functions
Constant BETA_TEST;

! Mention to dead players that they can UNDO the last action.
Constant DEATH_MENTION_UNDO;

! The time which this story begins (60 * HH + mm)
Constant StoryStartTime 780; ! 13:00

! The number of turns to pass until the canoe ride ends
Constant TurnsInCanoe 12;

! When going to undefined direction while in a JungleRoom, the player gets lost.
! Reading the compass returns them back on track, but if the player lost
! the device or does not use it, these are the odds of finding their way back:
! 1 in OddsOfFindingWayWhenLost.
Constant OddsOfFindingWayWhenLost 6;

! Weather states
Constant WEATHER_DRY 1;
Constant WEATHER_RAIN 2;
! Turns in dry state before rain may start:
Constant RAIN_START_T 40;
! Turns in wet state before rain may stop:
Constant RAIN_STOP_T 20;
! Chance of thunder when it RAINS (1 in n):
Constant THUNDER_ROLL 10;
! Multiplier for chance of thunder in DRY state (1 in n*THUNDER_ROLL):
Constant THUNDER_MULTIPLIER 3;
! Chance of rain (1 in n):
Constant RAIN_START_ROLL 20;
! Chance of rain stop (1 in n):
Constant RAIN_STOP_ROLL 20;
! Chance of rain drops falling on player when wet (1 in n):
Constant RAIN_ON_PLAYER_ROLL 2;

! Show the option to list AMUSING things you can try (at the End of the story)
Constant AMUSING_PROVIDED;

! Define default responses for the five senses.
Constant LOOK_DOWN_REPLY = "The ground is below me. Thank heavens! ";

! Set the PC carryall
Constant MAX_CARRIED = 2;
Constant SACK_OBJECT = satchel;

! Turns the carver takes to carve the replica.
! The PC can WAIT in the location to speed this up.
Constant CarvingTurns = 20;

! [ ================================================================== Globals ]

! Remember the last known location of the player, before they get lost
! in the jungle, and return the player to this good location when they
! find their way back.
Global last_known_location = 0;

! [ ========================================================= Scoring & Status ]

! Show the time instead of the turn number
Statusline time;

! Use task-based scoring - as listed in doc.md
Constant TASKS_PROVIDED;
Constant NUMBER_TASKS = 9;
Constant MAX_SCORE = 9;

! List of points for each task completed via the `Achieved` keyword.
Array task_scores -> 1 1 1 1 1 1 1 1 1;

! List of score achievement indices
Constant SCORE_USE_COMPASS = 0;
Constant SCORE_FIND_THE_WAY = 1;
Constant SCORE_WHIP_THE_BANANA = 2;
Constant SCORE_RESCUE_COMPASS = 3;
Constant SCORE_CRAFT_TORCH = 4;
Constant SCORE_FIND_ALCOVE = 5;
Constant SCORE_TREASURE = 6;
Constant SCORE_FISHING = 7;
Constant SCORE_BRIBERY = 8;

! Prints the list of achieved scores and the items they relate to
[ PrintTaskName task_number;
    switch (task_number) {
        SCORE_USE_COMPASS: "Use my compass in the jungle";
        SCORE_FIND_THE_WAY: "Spot the way from atop a tree";
        SCORE_WHIP_THE_BANANA: "Whip a banana off the tree";
        SCORE_RESCUE_COMPASS: "Rescue my compass from the monkey";
        SCORE_CRAFT_TORCH: "Craft a torch";
        SCORE_FIND_ALCOVE: "Find the alcove behind the waterfall";
        SCORE_TREASURE: "Get the treasure";
        SCORE_FISHING: "Catch a fish with my whip";
        SCORE_BRIBERY: "Trade with the Carver";
    }
];

! Points for visiting a room or taking an item with the "scored" attribute.
Constant OBJECT_SCORE 1;
Constant ROOM_SCORE 1;

! Hide status line for debug builds.
! This streamlines the diffs used by unit tests.
#ifdef DEBUG;
[DrawStatusLine;];
#endif;

! [ ================================================================= Includes ]

Include "Parser";

! Beta test helper
#ifdef BETA_TEST;
Include "BetaTest";
#endif;

! Override default library messages. See DM4 $25 and $A4.
Object LibraryMessages
with before [;
    Swim:
        "I prefer to stay dry. ";
    Jump:
        "Now is not the time to fool around. ";
    Listen:
        "It sounds like a jungle. ";
    Take:
        ! lm_n holds the message number, 1 is "Taken".
        ! lm_o holds the object in question.
        ! EssentialObject provides takenFromBag which is set true
        ! if the item is in the satchel before taking.
        if (lm_n == 1 && lm_o provides takenFromBag && lm_o.takenFromBag) {
            lm_o.takenFromBag = false;
            "I take ", (a) lm_o, " from my satchel. ";
        }
        ! Override lm_n 13 "(putting x into SACK_OBJECT to make room)"
        ! for any WeightedObject, which is moved to the floor by its class.
        if (lm_n == 13 && lm_o ofclass WeightedObject) {
            "(putting ", (the) lm_o, " down to free up my hands)";
        }
        ! Override "It is fixed in place"
        if (lm_n == 11) {
            "Hrmpf. It won't budge. ";
        }
    Push:
        ! That is fixed in place
        if (lm_n == 2) {
            "Hrmpf. It won't budge. ";
        }
    Pull:
        ! That is fixed in place
        if (lm_n == 2) {
            "Hrmpf. It won't budge. ";
        }
    Miscellany:
        ! code 50 is the score message.
        ! lm_o contains the number of points scored.
        ! print "You scored ", (number) lm_o, " points";
        if (lm_n == 50) {
            if (score == 1) {
                print "I scored my first point!
                Type SCORE/FULL to list them";
            } else if (lm_o == 1) {
                print "I scored another point";
            } else {
                print "I scored ", (number) lm_o, " points";
            }
            rtrue;
        }
    ],
    after [;
    ];

Include "VerbLib";

! [ =============================================================== Attributes ]

! Applied to NPCs to indicate an active state of interest in the player.
Attribute curious;
Attribute is_torch;
Attribute wet;
Attribute oily;
Attribute examined;
Attribute burdened;
Attribute walls;

! [ ================================================================= Routines ]

[ Initialise;

    ! Set the clock and turn progression rate
    SetTime(StoryStartTime, 1);

    ! Set the timer on the canoe
    StartTimer(canoe, TurnsInCanoe);

    ! Set the starting location
    location = canoe;
    
    ! Move objects to their starting places
    move canoe to River;
    move boatman to canoe;
    move box_trap to canoe;
    move monkey to fig_tree;
    move banana to garden_trees;
    move yam to Garden;
    move cloth to bungalow_rubble;
    move torch_of_wood to jungle_scenery;
    move golden_egg to stone_altar;
    move stone_egg to temple_stone_box;
    move urn to temple_stone_box;
    move torch_of_bone to temple_stone_box;
    
    ! Start Daemons
    StartDaemon(monkey);
    StartDaemon(sky);
    StartDaemon(chicken);
    StartDaemon(burden_giver);

    ! enable debugging actions:
    #ifdef DEBUG;
      ! disable the weather - the rng consumed each turn affects tests
      sky.enabled = false;
    #endif;

    ! Give player inventory
    move lodestar to satchel;
    move bullwhip to player;
    move journal to satchel;
    move matchbook to satchel;
    move fedora_hat to player;
    move leather_jacket to player;
    move satchel to player;

    ! Change the narrative voice to first person
    player.narrative_voice = 1;

    ! Give the player a name and description
    player.short_name = "Dr Ego";
    player.description = "I am Dr Ego. Purveyor of artifacts,
                            seeker of treasure, and adventurous archeologist. ";

    ! Print the preface text (for non debug builds)
    #ifdef DEBUG;
    print "THIS GAME IS IN DEBUG MODE^";
    #ifnot;
    print   "^April 10th, 1940.
            ^^My journey started a few days ago. After
            docking at Port Moresby, it was two days of riding on
            the back of a truck to Kerema, followed by a flight in a small
            seaplane, landing near the mouth of the Maro River.
            ^^I met my guide and his canoe, who will take me up the river
            to a remote and relatively uncharted
            area in New Guinea -- where I hope to find the legendary ",
            (name) golden_egg, ".^";
    #endif;
    
    ! Print beta test banner
    #ifndef DEBUG;
    #ifdef BETA_TEST;
    style underline;
    print "^This story is in testing -- 
    type BETA to enable beta features (recommended)^";
    style roman;
    #endif;
    #endif;
    
    ! Auto enable beta mode
    !#ifdef BETA_TEST;
    !<<BetaTestOn>>;
    !#endif;
];

! Tests if an item is in the player or satchel
[ ItemInPlayer item;
    return (item in player) || (item in satchel && satchel in player);
];

! Tests if an item is in the player or satchel
[ ItemOfClassInPlayer cls n;
    objectloop (n in player && n ofclass cls)
        return n;
    if (satchel notin player) return false;
    objectloop (n in satchel && n ofclass cls)
        return n;
    return false;
];

! Print out amusing things to try (only available after game is won).
[ Amusing;
    print_ret "Have you tried,^
            ^* Whipping the water of the Maro?
            ^* Get lost in the jungle then read your compass?";
];

[ PressAnyKey k; @read_char 1 -> k; return k; ];

! Test if the player is carrying an item with is_torch.
! Get a torch object carried by the player.
[ GetPlayerTorchObject n;
    objectloop (n in player && n has is_torch)
        return n;
    objectloop (n in satchel && n has is_torch)
        return n;
    return false;
];

[ PrintWinWording;
    print "^^I spend the next few days cataloguing the artifact,
    and documenting my adventure leading up to discovery.
    In the end I donated ", (the) golden_egg, " to the museum of
    Natural History. ";
];

! Alternate ending: you have a fish dinner with Rom
[ SetupFishDinnerScene;
    move wood_stool to Shore;
    move fish_fire to Shore;
    give yam ~concealed;
    move yam to fish_fire;
    move fish to fish_fire;
    move boatman to Shore;
];

! [ ================================================================== Classes ]

Class Room
with
    !printed_ways,
    !before [;
    !    if (action == ##Look) {
    !        self.printed_ways = false;
    !    }
    !],
  after [item;
    ! in location prevents printing ways while in a container (like a canoe)
    if (action == ##Look && player in location) {
      !print "^";
      objectloop(item in location) {
        if (item ofclass DoorWay) {
          !print (A) item, " is to the ", (name) item.door_dir(), ". ";
          if (item.door_dir() == u_to) {
              print (A) item, " leads upward. ";
          } else if (item.door_dir() == d_to) {
              print (A) item, " leads downward. ";
          } else {
              ! If the way was visited, or if it obvious what lies that way, print the door's name
              if (item.obvious_way || item.door_to() has visited) {
                  print (A) item, " is due ", (name) item.door_dir(), ". ";
              ! If the way hasnt visited, print a nameless exit
              } else {
                  if (location ofclass IndoorRoom || location has walls) {
                      print "There is an exit to the ", (name) item.door_dir(), ". ";
                  } else {
                      print "An unexplored path is to the ", (name) item.door_dir(), ". ";
                  }
              }
          }
        }
      }
      print "^";
    }
  ];

Class IndoorRoom
class Room
with
    cant_go "There is a wall that way. ";

! The outdoor room always contains the sky object, looking up examines the sky.
Class OutdoorRoom
class Room
with
    before [;
        Examine:
            ! Examine the sky when looking up
            if (noun == u_obj)
                <<Examine sky>>;
            ! Examine the ground when looking down
            if (noun == d_obj)
                print_ret (string) LOOK_DOWN_REPLY;
            ! If looking in any other compass direction
            if (noun in compass) {
                ! if the direction in the location is a DoorWay
                if (location.(noun) ofclass DoorWay) {
                    ! Describe what is seen that way
                    "I see ", (a) location.(noun), " that way. ";
                } else {
                    if (location ofclass JungleRoom) {
                        "I see more jungle that way. ";
                    }
                    if (location ofclass OutdoorRoom) {
                        "I see a wall is that way. " ;
                    }
                }
            }
        Listen:
            if (sky.state == WEATHER_DRY) {
                "I hear the chirps and clicks of insects, 
                and occasionally, the movement of a
                small critter hidden within the dense vegetation. ";
            } else {
                if (random(3) == 1) {
                    "I hear rolling thunder in the distance. ";
                } else {
                    "I hear the pitter-patter of rain. ";
                }
            }
        Smell:
            "I smell fresh air with earthy jungle tones. ";
    ],
    has light;

! The jungle room allows the player to "get lost" for a little while, but
! they always find their way back to the last known location.
! The LostInJungle object handles returning the player back safely.
Class JungleRoom
class OutdoorRoom
with
    ! Get lost when going in undefined direction
    n_to LostInJungle,
    nw_to LostInJungle,
    ne_to LostInJungle,
    s_to LostInJungle,
    sw_to LostInJungle,
    se_to LostInJungle,
    e_to LostInJungle,
    w_to LostInJungle,
    ! Leave any WeightedObject behind before getting lost
    before [item crflag;
        Go:
            ! When going in a compass direction, and it leads to LostInJungle
            if (noun in compass && location ~= LostInJungle && self.(noun) == LostInJungle) {
                ! Leave all WeightedObject behind
                objectloop(item in player && item ofclass WeightedObject) {
                    print "I am leaving this heavy ", (name) item,
                    " behind, before I venture into the jungle. ";
                    move item to location;
                    crflag = true;
                }
                if (crflag) {
                    print "^";
                }
            }
    ],
    ! Record the last known good location
    after [;
        Go:
            if (location ~= LostInJungle)
                last_known_location = location;
    ];

Class NonPlayerCharacter
with
    life [;
        Attack:
            print_ret "I am not fond of hurting living things. ";
    ];

Class HumanNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "I think human trafficking is deplorable. ";
        ],
    has animate;

Class AnimalNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "I think animal trafficking is deplorable. ";
        ],
    has animate;

! A class that prevents the player from taking what isn't theirs.
Class NotYourPropertyObject
    with
        before [;
            Take:
                print_ret (The) noun, " is not mine to take. ";
        ];

! Tools the player would consider essential, cannot be dropped by default.
Class EssentialObject
    with
        article "my",
        takenFromBag,
        before [;
            Take:
                ! Remember that this item came from your satchel
                self.takenFromBag = self in satchel;
            Examine:
                if (self in satchel) {
                    <Take self>;
                }
            Insert:
                if (second ~= satchel) {
                    print_ret "I am not leaving ", (a) noun, " behind. ";
                }
            Drop, ThrowAt:
                print_ret "I am not leaving ", (a) noun, " behind.";
            Taste, Eat:
                print_ret (A) noun, " is not edible. ";
            Disrobe:
                "I would rather keep it on. ";
        ];

! Provides a feature to print additional text when a scenic item is examined
! the first time.
Class ScenicBase
with
    description_lead "",
    before [;
        Examine:
            if (~~self has examined) {
                give self examined;
                print (string) self.description_lead;
            }
    ],
    has scenery static;

! Provides the scenery attribute
Class ScenicRockObject
with
    before [;
        Take, Push, Pull:
            print_ret (The) self, " is too large and heavy to move. ";
    ],
has scenery static;

Class ScenicEngravingObject
class ScenicBase
with
    before [;
        Take:
            print_ret "I can't take something that is carved into the stone. ";
    ];

! A door that is listed in the room description.
Class DoorWay
with
    ! Some ways are visible and it is obvious what lies there, so always
    ! print the door name.
    obvious_way false,
    before [;
        Take:
            <<Go self>>;
    ],
has static door open scenery;

Class RockDoor
with
    before [;
        Take:
            print_ret (The) self, " is too large and heavy to move. ";
    ],
has scenery static door open;

! An object that reveals its children when searched.
! The search_lead property prints when the search is actioned
! and search_concludes prints after the items are listed.
! The auto_take flag will move the discovered items to the player, otherwise
! the items are moved to the location of parent.
! The object itself cannot be taken, but hints at it hiding something.
Class SearchableObject
with
    search_lead "I find ",
    search_concludes "",
    auto_take false,
    before [;
        Take:
            if (child(self))
                "I don't want ", (the) self, ", but perhaps it hides
                something that may be of use. ";
            else
                "I don't want ", (the) self, ". ";
        Search:
            ! we have no children to give
            if (child(self)==nothing) 
                print_ret "I find nothing in ", (the) self, ". ";
            ! list the things inside us
            print (string) self.search_lead;
            WriteListFrom(child(self), ENGLISH_BIT);
            print ". ", (string) self.search_concludes, "^";
            ! move them into scope
            while (child(self)) {
                give child(self) ~concealed;
                if (self.auto_take)
                    move child(self) to player;
                else
                    move child(self) to parent(self);
            }
            return true;
];

Class ScenicWaterObject
with
    before [;
        Take, Drink:
            "Ah, that ", (name) self, " is refreshing! ";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicTreeObject
with
    before [;
        Take:
            print_ret (The) self, " is firmly rooted in the earth. ";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicPlantObject
with
    before [;
        Take:
            print_ret "I have no need for ", (the) self, ". ";
    ],
has scenery static;

! Something edible
Class EdibleFruitObject has edible;

! Can be used to LIGHT a torch.
Class SparkThrowerObject;

! A long straight object that can be made into a torch.
! The material property describes what the torch is made of.
Class TorchBaseObject 
with

    ! The default material that makes this object.
    ! This value should be set on instances.
    material "nondescript",
    
    ! Turns of light remaining
    light_left,
    
    ! The torch can be made of multiple things, display the material which
    ! this torch is made of, in the display name.
    short_name [;
        if (self has is_torch) {
            print (string) self.material, " torch";
            return true;
        }
        else
            rfalse;
    ],
    
    set_aflame [;
        give self light;
        self.light_left = 40;
    ],
    
    before [;
        Insert:
            if (second == satchel && self has light) {
                "I can't put the lit torch in my satchel. ";
            }
        Burn:
            if (self has light)
                "", (The) self, " is already lit. ";
            if (self notin player)
                <Take self>;
            if (second == nothing)
                "(You need to say what you want to light ", (the) self, " with). ";
            if (~~second ofclass SparkThrowerObject)
                "I can't light ", (the) self, " with ", (the) second ,". ";
            if (second has wet)
                <<Burn second>>;
            if (self hasnt oily)
                "", (The) self, " is not burning, the wick needs some kind of fuel. ";
            self.set_aflame();
            print_ret "I strike ", (the) second, ", it sparks onto the wick,
            A small flame appears, I blow on the flame, carefully.
            The flame grows until the entire wick is lit. ";
    ],
    
    ! Describe the wick tied to this object, if any.
    after [;
        Examine:
            if (self has is_torch)
                print_ret "A crude wick is tied to the one end. ";
        Take:
            "Taking ", (the) self, ". ";
    ],
    
    each_turn [;
        if (self has light) {
            if (self.light_left < 4) {
                print "My torch flickers and dims.^";
            }
            if (self.light_left > 0 && --self.light_left == 0) {
                give self ~light;
                give self ~oily;
                "My torch has gone out. ";
            }
        }
    ];

! A material that acts as a wick
Class TorchWickObject
with
    before [;
        PutOn:
            if (second ofclass TorchBaseObject) {
                <<Tie self second>>;
            }
        Tie:
            if (self in satchel) {
                <Take self>;
            }
            if (second in satchel) {
                <Take second>;
            }
            ! Remove this wick when tying it on a TorchBase.
            ! Then change the torch's name and give it the torch attribute.
            if (second ofclass TorchBaseObject) {
                print "I wrap ", (the) self, " around ", (the) second, " to
                make a crude torch.^ ";
                remove self;
                give second is_torch;
                second.&name-->0 = 'torch';
                return true;
            }
        Burn:
            "It would work better if I tied ", (the) self, " to something
            long, to make a kind of torch. ";
    ];

Class WeightedObject
with
    each_turn [;
        if (self in SACK_OBJECT) {
            ! The message for this is handled in LibraryMessages().
            ! We allow the WeightedObject to be placed in the satchel,
            ! and override the default message (placing x in bag to make room)
            ! then silently move it in each_turn below.
            ! Reason: if preventing from inserting into satchel the parser
            ! ends up printing "you are carrying too many things already".
            ! This way the last action succeeds at the expense of the heavy
            ! item being left on the ground.
            move self to location;
        }
        if (action == ##Go && self in player) {
            "Hrmpf, this ", (name) self," sure is heavy. ";
        }
        if (self provides swings_shut) {
            self.swings_shut();
        }
    ],
    after [;
        Insert:
            if (second == SACK_OBJECT) {
                "", (The) self, " is too heavy for my satchel.
                I put it down instead. ";
            }
    ];

! [ ================================================================== Objects ]

! This daemon tests for multiple objects of WeightedObject in the player
! and drops all but one
Object burden_giver
with daemon [item;
    give player ~burdened;
    item = child(player);
    while (item) {
        if (item ofclass WeightedObject) {
            if (player has burdened) {
                move item to location;
                print "I can't carry two heavy things.
                I drop ", (the) item, ".^";
            } else {
                give player burdened;
            }
        }
        item = sibling(item);
    }
];

EdibleFruitObject banana "banana"
with
    name 'banana' 'bananas',
    whip_count 0,
    eaten false,
    description [;
        if (parent(self) == garden_trees)
            print "A bunch of wild bananas hang from the top of the tree. ";
        else
            print "It is a wild banana with a bright green and yellow skin. ";
    ],
    before [;
        Take:
            if (parent(self) == garden_trees)
                print_ret "The bananas are out of reach. ";
        Eat:
            if (self.eaten)
                print_ret "No, I had enough bananas. ";
        Whip:
            <<Whip garden_trees>>;
    ],
    after [;
        Eat:
            move banana to garden_trees;
            banana.eaten = true;
            print_ret "Mmm, not bad. The fruit is firm with a sweet, subtle
            flavor. I feel revitalized. ";
    ];

! Also see the custom 'WhipSub' action.
EssentialObject bullwhip "bullwhip"
with
    name 'bullwhip' 'whip',
    description "A leather whip made of braided strips, I can use it to
                WHIP something for grabbing things out of reach, or to
                pull myself over short distances. ",
    before [;
        Use:
            print_ret "If I want to whip something, I should WHIP IT, 
            like WHIP THE TREE. ";
        Insert:
            if (second == satchel) {
                if (self has worn) {
                    "No need to stash it in the bag,
                    I can just wear it on my belt. ";
                } else {
                    <<Wear self>>;
                }
            }
    ],
    after [;
        Wear:
            "I attach my whip on my belt. ";
    ],
    has clothing worn;

!
Object canoe "canoe"
with
    name 'boat' 'canoe' 'oar' 'craft',

    ! Room Description when outside the canoe
    initial [;
        if (boatman in self) {
            print (A) boatman, " sits in the canoe gazing out over the
            moving river, the salty water lapping up the sides of his
            craft -- Inside it is ";
            WriteListFrom(child(canoe), ENGLISH_BIT + WORKFLAG_BIT);
            print ".^";
        } else {
            print "The canoe is nearby, the river gently lapping at its sides.^";
        }
    ],

    description "The canoe is built from a hollowed-out log and wooden planks, 
    it has a single lateral support float fastened to the hull on one side, to
    help stabilize the craft. ",
    
    before [;
        ! Prevent the player from exiting the craft before it has shored.
        Go, Exit:
            if (parent(canoe) == River) {
                print "~We will reach your destination soon,~ ",
                        (the) boatman, " says with a wide grin.^";
                return 2;
            }
        Enter:
            if (fish_fire in location) {
                "There is no rush, besides, I am famished and that fish 
                cooking over the fire smells inviting. ";
            }
            ! Win condition
            if (golden_egg in player) {
                deadflag = 2;
                print "I get in the canoe, ", (a) boatman ,"'s eyes light up
                when I show him ", (the) golden_egg, ". 
                I spend the evening telling him of my adventure. ";
                PrintWinWording();
                return true;
            }
    ],

    ! Print flavor text during the trip in the canoe
    each_turn [;
        if (self.time_left == 2 && location == River)
            print_ret "^~We are almost there, ", (a) player, "~, ",
                        (a) boatman, " says. ";
    ],

    ! Initialise TurnsInCanoe timer to 0
    time_left,

    ! called when TurnsInCanoe timer expires
    time_out [;
        if (location == River) {
            ! The "1" parameter moves player silently
            ! so that we can reposition the canoe then call look.
            ! DM4 pg 21
            PlayerTo(Shore, 1);
            move canoe to Shore;
            move player to canoe;
            print "^~Here we are,~ ", (a) boatman,
                    " says as the canoe lands on the shore.^";
            <<Look>>;
        }
    ],
    has   enterable static container open;

TorchWickObject cloth "strip of canvas"
with 
    name 'strip' 'cloth' 'canvas',
    description "A strip of dirty canvas cloth the length of my arm. ";

EssentialObject fedora_hat "fedora"
with
    name 'fedora' 'hat',
    description "This is my brown felt hat. ",
    has clothing worn;

EssentialObject leather_jacket "leather jacket"
with
    name 'jacket',
    description "This is my brown jacket. ",
    has clothing worn;

!
ScenicTreeObject fig_tree "fig tree"
with
    name 'fig' 'tree' 'ficus',
    description [;
        print "The fig tree, also known as Ficus Obliqua, is taller than 
            most of the surrounding jungle. ";
        if (location == Clearing)
            print " The view from up there must be great. ";
        print "^";
    ],
    found_in Clearing TreeTop,
        
    ! climb fig_tree => go up
    before [;
        Climb:
            if (location == Clearing)
                <<Go u_obj>>;
            if (location == TreeTop)
                <<Go d_obj>>;
    ],
    has container open light;

! A black bass that you catch with your whip
Object fish "fish"
with
    name 'fish',
    initial "A fish flops around inside the canoe. ",
    description "It looks like a black bass. ",

    ! Tracks if the fish was caught
    caught false,

    ! try catch the fish with the whip
    try_catch [;
        if (self notin canoe && self.caught == false) {
            Achieved(SCORE_FISHING);
            move self to canoe;
            self.caught = true;
            print_ret "*SNAP* -- I crack the whip into the water
                    and snag a fish.
                    ~Mogillo!~ ", (a) boatman, " shouts excitedly.
                    ~What are the chances!~ ";
        }
    ],

    before [;
        Take:
            if (parent(self) == fish_fire) {
                "I would rather take a seat first. ";
            } else {
                "No, I will leave the fish for ", (a) boatman, ". ";
            }
    ],

    after [;
        Insert:
            if (second == river_water) {
                print_ret "Ok, I released it back into ", (the)
                river_water, ". ~Ai, there goes supper,~ ", (a) boatman, 
                " says. ";
            }
    ],

    each_turn [;
        if (self in canoe && random(3) == 1) {
            print "^A fish flops around inside the canoe.^";
        }
    ];

Object fish_fire "fire"
with
    name 'fire',
    description "The fire is burning hot, a fish is impaled on a stick 
    and suspended over the fire. ",
    before [;
        Take, Touch: 
            "It is too hot to handle safely. ";
        Receive:
            "Let us not, but say we did. ";
    ],
    has supporter;

!
NotYourPropertyObject fishing_spear "fishing spear" canoe
with
    name 'fishing' 'rod' 'spear' 'kalawai',
    description "A traditional fishing spear made from wood, it has three
    metal prongs at the business end. ";

NotYourPropertyObject fishing_net "fishing net" canoe
with
    name 'fishing' 'net',
    description "The brown net seems to be hand woven from natural fibers. ";

!
SparkThrowerObject flint_stone "flint"
with
    name 'flint' 'stone' 'metallic' 'blue' 'glint',
    initial "A metallic blue glint catches my eye. ",
    description [;
        if (self has moved)
            print "A piece of flint stone, it can be used to spark a flame.^ ";
        else
            print "The glint is coming from a stone on the ground.^ ";
        ],
    found_in [;
        ! Only visible when the player has crafted the torch
        return (location == Waterfall && GetPlayerTorchObject());
    ],
    before [item;
        Use:
            print_ret "To use the flint, I should LIGHT TORCH WITH FLINT. ";
        Attack:
            item = ItemOfClassInPlayer(TorchBaseObject);
            if (item) {
                <<Burn item self>>;
            } else {
                "I don't have a torch to light. ";
            }
    ],
    after [;
        Take:
            if (self hasnt moved)
                print_ret "How about that, it is a piece of flint stone. 
                This will come in handy. ";
    ];

!
ScenicPlantObject garden_trees "fruit trees"
with
    name 'fruit' 'fruits' 'cherry' 'tree' 'trees',

    description "I see a cherry tree, but it is not bearing any fruit.
    The tree next to it, however, has a bunch of bananas. ",
    
    found_in Garden,

    before [;
        Climb:
            "I can't seem to climb up the banana tree, the trunk is too smooth
            and I slide back down. ";
        Whip:
            if (parent(banana) ~= garden_trees)
                print_ret "I don't need another banana right now. ";
        Attack:
            "I give the tree a good shake. That did not work. ";
    ],
    after [;
        Whip:
            Achieved(SCORE_WHIP_THE_BANANA);
            move banana to Garden;
            banana.whip_count = banana.whip_count + 1;
            switch (banana.whip_count) {
                1: print_ret "I take aim at the bunch of bananas,
                swing my arm in a smooth arch, and *SNAP*
                -- a banana drops to the ground. ";
                2: print_ret "*SNAP* -- Another banana drops to the ground.
                Years of using my whip is finally paying off. ";
                default: print_ret "*SNAP* -- Another banana drops to the ground. ";
            }
    ],
    has container open;

! The prized treasure you are looking for.
EssentialObject golden_egg "Golden Egg of Man-Toomba"
with
    article "the",
    name 'gold' 'golden' 'egg',
    description "It shimmers with golden light. ",
    before [;
        Push, Pull:
            if (self in stone_altar) {
                give self ~concealed;
                move self to location;
                "Hrmpf. ", (The) self, " falls to the ground. ";
            }
    ],
    after [;
        Take:
            if (~~self has moved) {
                "I have it! It is magnificent. ";
            }
    ],
    has concealed;

!
EssentialObject journal "journal"
    with
        name 'my' 'diary' 'journal' 'book' 'notes',
        
        description [;
            print "My journal is filled with my research notes.
            To consult my journal type NOTES ON <topic>.
            This can be abbreviated as J <topic> (J as in journal). ";
            if (self hasnt examined) {
                print "To read about the Maro River, type J MARO. ";
                give self examined;
            }
            "";
        ],
        
    before [w1 w2 context;
        Consult:
            ! forward the word marker to the first word in the consult topic.
            wn = consult_from;
            ! Grab the first word in the topic
            w1 = NextWord();
            ! If the word is 'the', 'a' or 'an', grab the next word
            if (w1=='the') w1 = NextWord();
            if (w1=='a') w1 = NextWord();
            if (w1=='an') w1 = NextWord();
            w2 = NextWord();
            
            if (w1=='Papua' || w2=='Guinea' || w1=='land' || w2=='land')
                context = 'New Guinea';
                
            if (w1=='people' || w1=='native' || w1=='natives' || w1=='tribe' || w1=='settlement')
                context = 'People';
            
            if (w1=='jungle' || w1=='forest' || w1=='rainforest')
                context = 'Jungle';
                
            if (w1=='yam' || w1=='yams' || w1=='karuka' || w1=='egg' || w1=='eggs')
                context = 'Edibles';
    
            if (w1=='maro' || w1=='river' || w2=='river')
                context = 'Maro River';
            
            if ((w1=='air' && w2 =='terjun') || (w1=='terjun'))
                context = 'air terjun';
            
            if (w1=='Mogillo' || w1=='fish' || w1=='bass' || w2=='bass')
                context = 'Mogillo';
            
            if (w1=='Kalawai' || w1=='spear' || w1=='fishing' || w2=='fishing')
                context = 'Fishing';
            
            if (w1=='treasure' || w1=='treasures' || w2=='treasure')
                context = 'Treasure';
            
            if ((w1=='gold' || w1=='golden') && (w2=='egg'))
                context = 'Golden Egg';
            
            if (w1=='mannaz' || w1=='ehwaz' || w1=='gebo' || w1=='peorth')
                context = 'Glyphs';
            
            if (w1=='sun' || w1=='weather' || w1=='climate' || w1=='rain' || w1=='sky')
                context = 'Climate';
                
            if ((w1=='Sowilu' || w2=='Sowilu') || (w1=='sun' && w2=='key'))
                context = 'Sowilu';
                    
            if ((parent(boatman)==parent(player)) && 
                (w1=='canoe' || w1=='boat' || w1=='craft'))
                context = 'Ask Rom';
            
            switch (context) {
                
                'Climate':
                "The climate here is hot and humid. Much of the land 
                is covered by rainforests and there is no dry season.
                Temperatures are relatively consistent throughout the year
                at around 86 degrees Fahrenheit, or 30 degrees Celsius. ";
                
                'New Guinea':
                "It is a country in Oceania that occupies the eastern
                half of the island. Its capital, located along its southeastern
                coast, is Port Moresby. It is the world's 3rd largest island
                country. It is known to have numerous groups of uncontacted
                peoples, and researchers believe there are many undiscovered
                species of plants and animals in the interior.";
                
                'Jungle':
                "Papua New Guinea is populated by dense rain forest and large
                wetland areas. This terrain has made it difficult for the
                country to develop transportation infrastructure. Some areas are
                accessible only on foot or by plane.";
                
                'People':
                "Papua New Guinea has more than a thousand cultural groups, the
                majority being from the group known as Papuans, whose ancestors
                arrived in the New Guinea region tens of thousands of years ago.
                Most of these cultural groups have their own language.
                ^^People typically live in villages that rely on subsistence
                farming. In some areas people hunt and collect wild plants (such
                as yam roots and karuka) to supplement their diets. Those who
                become skilled at hunting, farming and fishing earn a great deal
                of respect.";
                
                'Edibles':
                "Chicken eggs, guinea fowl eggs, yam roots and
                karuka are popular foods in Papua New Guinea.
                ^^A yam is a starchy edible tuber, it has a rough skin that is
                difficult to peel but readily softened by heating. The skins
                vary in color from dark brown to light pink.
                ^^Karuka is a nut tree that is a cultivated crop, the
                fruit are more nutritious than coconuts and has been used as a
                major food source for over 30 millennia.";
                
                'Maro River':
                "The Maro river flows from north-east to south-west into the
                Arafura Sea. It runs over 124 miles, or 200 kilometers, in length.
                The river is up to two-thirds of a mile, or one kilometer, wide.
                It is a complex system of swamps and oxbow lakes, hosting a
                large number of birds and reptiles.";
                
                'Glyphs':
                "Mannaz means mankind, intelligence and forethought.
                Ehwaz means horse, Movement and change for the better.
                Gebo means gifts or treasure.
                Peorth means something concealed or a secret.";
                
                'air terjun':
                "Here is an underlined passage about air terjun -- 
                That symbol indicates a hidden thing, more specifically, 
                it means ~behind the falling water~.";
                
                'Mogillo':
                "Lutjanus goldiei, the Papuan black bass known locally as
                mogillo, is a large snapper species native to the Pacific Ocean
                from New Guinea all the way to Malaysia and known to inhabit
                thick, jungle rivers and brackish river mouths.
                See ~Fishing~.";
                
                'Fishing':
                "Spear fishing is a traditional method of hunting food in New
                Guinea. A fishing spear made from a wooden pole with metal
                prongs fixed to the one end. Divers in shallow water use it to
                harpoon small fish.
                See ~Mogillo~.";
                
                'Treasure':
                "New Guinea is rumored to have many hidden treasures because of
                its unexplored and rich land, most treasures are historical
                relics, however some of these items are crafted from precious
                metals or stones and are sought after by many a treasure hunter
                looking for profit.
                See ~Golden Egg~.";
                
                'Golden Egg':
                "", (The) golden_egg, " is mysterious and rumored to be
                cursed. It is said to bring misfortune to whomever tries to
                covet the shimmering artifact. The Egg is said to be crafted
                from gold and is the size of a fist.
                See ~Treasure~.";
                
                'Sowilu':
                print "Sowilu is the rune for the sun, and because of its symbolic
                power, it is rumored that the treasure can only be unlocked with
                a key of the sun. ";
                if (~~sun_drawing has moved) {
                    move sun_drawing to player;
                    sun_key_hole.short_name = "keyhole";
                    "Here on the opposite page is a pencil drawing of the key.
                    ^^I tear the page out.
                    ^^I compare the drawing to the hole,
                    it is a perfect fit. It appears that is a keyhole. ";
                }
                print_ret "";
                
                'Ask Rom':
                print "I can't find anything in my journal about that topic,
                I will ask ", (a) boatman, ".^";
                <<Ask boatman w1>>;
                
                default: "I can't find anything in my journal about that topic. ";
            }
            
        Use:
            <<Examine self>>;
    ];

! The jungle is visible in all JungleRooms
SearchableObject jungle_scenery "jungle"
    with
        name 'vegetation' 'jungle' 'foliage' 'plant' 'plants' 
            'bush' 'brush' 'shrub' 'vine' 'vines' 'shrubs',
        description "The jungle is dense and lush, and comprises various
        plants, shrubs and vines, with foliage of all shapes and sizes. ",
        auto_take true,
        search_lead "I search the surrounding jungle and find ",
        search_concludes "I take it.",
        found_in [;
            return (location ofclass JungleRoom);
        ],
        before [;
            Attack:
                print_ret "I shake my fist angrily at ", (the) self, ". ";
        ],
    has scenery transparent supporter;

! The word "compass" is a reserved keyword in Inform, as such we use "lodestar"
! to identify the object as it lives in the player's inventory.
! The literal, albeit archaic, meaning of "lodestar" is "a star that leads or
! guides; especially : the North Star." (The first half of the word derives from
! the Middle English word "lode," meaning "course.") Both the literal and the
! figurative sense ("an inspiration or guide") date back to the 14th century, the
! time of Geoffrey Chaucer. The literal sense fell out of use in the 17th century,
! and so, for a while, did the figurative sense - but it appeared again 170 years
! later, when Sir Walter Scott used it in his 1813 poem The Bridal of Triermain.
EssentialObject lodestar "compass"
with
    name 'compass',

    ! display a random description
    rnd_no 0,

    ! Track if the compass has been dropped before
    has_dropped false,

    description [;

        ! Test for posession
        if (self notin player) print_ret "I don't have ", (a) self, ". ";

        ! Return the player to the last known good location
        if (location == LostInJungle) {
            Achieved(SCORE_USE_COMPASS);
            print (A) self, " guides me back to ", (the) last_known_location, ".^";
            ! Parameter "1" does not perform a "look" on PlayerTo,
            ! which seems to action ##Look twice, and causes the DoorWay
            ! listing code in the Room class to run twice.
            ! Manually calling <Look> resolves this duplicate case.
            ! See DM4 $21 for more on PlayerTo.
            PlayerTo(last_known_location, 1);
            <Look>;
            return true;
        }

        ! Print first time examine usage
        if (self hasnt examined) {
            give self examined;
            print (A) self, " tells me which way north is.
            This helps me to navigate in the jungle, especially when lost.
            All I need to do is READ it.^";
        } else {
            print (string)random("I am exactly where I need to be.^",
                        "The needle points north.^",
                        "I am not lost, yet.^");
        }

        ! In the presence of the boatman
        boatman.notice_lodestar();
        
        ! The monkey notices your action
        if (monkey_in_view()) {
            print (The) monkey, " seems very interested in the device.^";
        }
        
    ],
    
    before [;
        Use:
            <<Examine self>>;
        Take, Remove:
            if (self in monkey) {
                if (parent(monkey) == location) {
                    print "The monkey moves deftly out of my reach. ";
                    monkey_frighten();
                    monkey_speak(random(10));
                    print_ret " it retorts. ";
                } else {
                    print_ret "It is out of my reach. ";
                }
            }
    ];

SparkThrowerObject matchbook "matchbook"
with 
    name 'match' 'matches' 'matchbook' 'book',
    description "It is a booklet of matches with red phosphorous heads,
    ~Red Herring Lucifers~ is printed on the back. ",
    stock 4,
    full_text true,
    before [;
        Attack:
            <<Burn self>>;
        Burn:
            if (--self.stock == 0) {
                remove self;
                "The last match crumbles without so much as a spark. 
                I discard the booklet.
                I will have to find another way to make fire. ";
            } else {
                if (self.full_text) {
                    self.full_text = false;
                    "I strike a match. The red phosphor crumbles into dust.
                    They must be wet. ";
                } else {
                    "I strike another match. ", 
                    (string)random("It crumbles, too. ", "No luck that time. ", "It fails to light. ");
                }
            }
    ],
    has wet;

!
Object yam "yam"
with
    name 'yam' 'tuber',
    description [;
        if (self has moved) {
            "The yam has a rough light yellow skin. ";
        } else {
            "The tuber is partially exposed above ground. ";
        }],
    before [;
        Take:
            if (parent(self) == fish_fire) {
                "Best I take a seat first. ";
            }
        Eat:
            print_ret "It would be better served cooked. ";
    ],
    after [;
        Take:
        if (self hasnt moved) {
            give self ~concealed;
            print_ret "I reach down and pull on the leafy parts of the plant.
            A yam emerges from of the ground.
            I discard the leaves and keep the yam. ";
        }
    ],
    has concealed edible;

!
Object river_water "Maro River"
with
    name 'maro' 'river' 'water',
    article "the",
    description "The cold water laps up against the sides of the craft. I
    remember writing facts about the river in my journal, I can read my
    NOTES ON THE RIVER to see them. ",
    found_in  River Shore,
    after [;
        Whip:
            return fish.try_catch();
    ],
    has container open scenery;

! The PC's bag
EssentialObject satchel "satchel"
with
    name 'bag' 'satchel',
    description "This is my brown shoulder bag. ",
    has container open clothing worn;

! The sky is visible in all outdoor areas.
Object sky "sky"
    with
        name 'sky' 'clouds' 'weather' 'sun',
        
        ! Describe the changing sky
        description [;
            if (self.state == WEATHER_DRY) {
                "Rolling clouds move overhead. ";
            } else if (self.state == WEATHER_RAIN) {
                ! Random flavour text
                if (random(2) == 1) {
                    print "I see clouds above, and feel the rain on my face. ";
                }
                "I see dark rain-bearing clouds moving overhead. ";
            }
        ],
        
        ! The sky is found in any outside location
        found_in [;
            return (location ofclass OutdoorRoom);
        ],
        
        ! Weather state - WEATHER_DRY, WEATHER_RAIN
        state WEATHER_DRY,
        ! Turns passed in the current state
        counter,
        ! Turns until thunder is heard after lightning
        thunder_in,
        ! Switch to turn the weather off
        enabled true,
        
    ! allow turning weather on in debug (is off by default)
    #ifdef DEBUG;
    before [;
        SwitchOn:
            self.enabled = true;
            "You flip the weather switch on. ";
    ],
    #endif;
    
    daemon [;
        
        ! The weather is not enabled
        if (~~self.enabled) return;
        
        ! Add the counter
        self.counter = self.counter + 1;
        
        ! Do nothing if the sky is not in the location
        if (~~self in location) {
            return;
        }

        ! Expect rolling thunder on the way
        if (self.thunder_in > 0) {
            self.thunder_in = self.thunder_in - 1;
            if (self.thunder_in == 0) {
                print "^", (string) random("The sound of thunder rumbles overhead",
                "The air trembles with the rolling thunder",
                "My ears ring from the sudden clap of a lightning strike"),
                ".^";
            }
            ! No more processing while thunder is on the way
            return;
        }
                
        if (self.state == WEATHER_DRY) {
            ! Lighting
            if (random(THUNDER_ROLL * THUNDER_MULTIPLIER) == 1) {
                ! Let the player hear the thunder in n turns
                self.thunder_in = random(3);
                print "^", (string) random("Lightning arcs across the sky",
                "Lightning flashes in the distance",
                "Lightning dances menacingly within the clouds above"), ".^";
            }
            ! Chance of rain
            if (self.counter > RAIN_START_T && random(RAIN_START_ROLL) == 1) {
                self.counter = 0;
                self.state = WEATHER_RAIN;
                print "^It starts to rain.^";
            }
        } else if (self.state == WEATHER_RAIN) {
            ! Rain messages
            if (random(RAIN_ON_PLAYER_ROLL) == 1) {
                print "^I feel ",
                (string) random("cold drops of rain", "raindrops", "the rain"), 
                " ",
                (string) random("fall", "land", "spatter"),
                " on my ",
                (string) random("head", "arms", "neck", "face", "cheek", "back"),
                ".^";
            }
            ! Lightning
            if (self.thunder_in == 0 && random(THUNDER_ROLL) == 1) {
                ! Let the player hear the thunder in n turns
                self.thunder_in = random(3);
                print "^", (string) random("Lightning arcs across the sky",
                "Lightning flashes in the distance",
                "Clouds flicker menacingly with lightning"), ".^";
            }
            ! Clears up
            if (self.counter > RAIN_STOP_T && self.thunder_in == 0 && random(RAIN_STOP_ROLL) == 1) {
                self.counter = 0;
                self.state = WEATHER_DRY;
                print "^The rain ", 
                (string) random("subsides", "peters out", "eases off"),
                ".^";
            }
        }
    ],
    has scenery;

WeightedObject stone_egg "stone egg"
with 
    name 'stone' 'egg',
    description "The stone is carved in the shape of an egg,
    it is the size of a man's head. ";

Object sun_key "sun key"
with
    name 'sun' 'key',
    description "It is a wooden replica of the sun key that I had drawn
    in my journal. The quality of workmanship is superb. ",
    before [;
        Turn:
            if (self in sun_key_hole) {
                if (stone_altar in location) {
                    "It does not want to turn any more. ";
                }
                stone_column.lower();
                return true;
            } else {
                "I turn the key around in my hand, a fine piece of
                work indeed. ";
            }
    ];

Object sun_drawing "drawing of the sun key"
with
    name 'drawing' 'page',
    description "It is a drawing of a key, which resembles a large flat amulet
    in the shape of a sun, the beams are fashioned to serve as the 
    teeth of the key. ";

! A bone that can be made into a torch.
TorchBaseObject torch_of_bone "bone"
with
    name 'bone' 'bone' 'femur',
    material "bone",
    description "It is a part of a human leg, a femur bone. ";

! A wooden stick that can be made into a torch.
TorchBaseObject torch_of_wood "stick"
with
    name 'wood' 'wood' 'stick',
    material "wooden",
    description "A wooden stick about the length of my arm. ",
    before [;
        Take:
            if (parent(self) == jungle_scenery) {
                <<Search jungle_scenery>>;
            }
    ],
    has concealed;

Object seed_pouch "seed pouch"
with
    name 'seed' 'pouch' 'seeds//p',
    description "A small pouch with a drawstring, it is filled with edible seed. ",
    before [;
        Eat:
            "Mmm not bad, but it would probably taste better to a chicken. ";
        Insert:
            if (second == box_trap) {
                if (box_trap in player) 
                    "It would be easier if I put the trap down first. ";
                if (some_seed in box_trap) {
                    "There is some seed in there already. ";
                }
                else {
                    if (box_trap hasnt open) <Open box_trap>;
                    move some_seed to box_trap;
                    "I scatter some seeds inside the trap. ";
                }
            }
    ],
    has edible;

Object some_seed "seed"
with article "some";

WeightedObject box_trap "trap"
with
    name 'trap',
    description "The trap is a crude box consisting of a wooden frame and
    some kind of netting covering the sides. One of the sides is openable and
    acts as a door. ",
    is_set false,
    
    before [;
        Take:
            if (self has moved) {
                ! remove the seed (if inside the trap)
                remove some_seed;
                ! remove the string (if trap was set)
                remove trap_string;
                ! unset the trap
                self.is_set = false;
            }
            else if (ItemInPlayer(sun_drawing)) {
                "I should ask ", (A) boatman, " for it.
                It is only polite. ";
            } else {
                "", (The) self, " is not mine to take. ";
            }
        Drop:
            if (last_known_location == Tribe) 
                print "This looks like a good place to set the trap. ";
        Open:
            ! Cannot open it before it is given to you
            if (~~self has moved) "I would rather leave it alone. ";
            if (chicken in self) <<Take chicken>>;
        Set:
            if (chicken in self)
                "But I already have ", (the) chicken, ". ";
            if (player in canoe)
                "This is not an ideal location to set the trap. ";
            if (self in player)
                "It would be easier if I put the trap down first. ";
            self.is_set = true;
            give self open;
            move trap_string to player;
            "I prop the trap door open with the stick and take hold
            of the string that is tied to it. 
            I take a few paces back from the trap. ";
    ],
    
    swings_shut [;
        if (self has open && self.is_set == false) {
            give self ~open;
            print "The trap door swings shut by itself.^";
        }
    ],
    
    has container openable transparent;

Object trap_string "trigger string (held)"
with 
    name 'string',
    description "The string is attached to the trap. When I pull it the
    trap door will close. ",
    before [;
        Pull:
            remove self;
            box_trap.is_set = false;
            "I give the string a quick yank, the propped stick flies out from
            under the trap door. ";
    ];

! [ ==================================================== Non Player Characters ]

! [ ------------------------------------------------------------------ Chicken ]
AnimalNPC chicken "hen"
with
    name 'chicken' 'bird' 'hen',
    description [;
        if (self in box_trap)
            "The hen sits quietly in the trap. ";
        else if (self in player)
            "The hen seems content being held. ";
        else
            "The hen is pecking at the dirt for grubs and bugs. ";
    ],
    venture_clock 5,
    before [;
        Take:
            if (parent(self) == box_trap) {
                move self to player;
                "I take the hen out of the trap. ";
            } else {
                remove self;
                self.venture_clock = 5;
                print_ret (The) self, " moves quickly out of reach and
                disappears into the jungle. ";
            }
        Drop:
            ! release the hen, reset capture progress
            ! (note: this code does not get called anymore, since we
            !  prevent taking the chicken out of the trap - above)
            StartDaemon(chicken);
            print "I put the hen down on the ground. ";
            ! Try take the hen which makes it scatter away
            <<Take self>>;
        Insert:
            if (second == SACK_OBJECT) {
                "I would rather not. ";
            }
    ],
    
    life [;
        Show:
            if (noun == seed_pouch)
                "The hen is determined to keep a safe distance from me. ";
            else
                "She shows no interest in ", (the) noun, ". ";
    ],
    
    daemon [;
        ! Stop this daemon if the carver is already working
        if (carver.carving_state > 0) {
            StopDaemon(chicken);
            remove chicken;
            return;
        }
        ! when inside the trap
        if (self in box_trap) {
            if (box_trap has open) {
                ! exit the trap
                if (random(5)==1) {
                    move self to parent(box_trap);
                    remove some_seed;
                    "The chicken exits the trap. ";
                }
            }
            ! the trap is closed and our chicken no longer can wander
            else {
                remove some_seed;
                StopDaemon(chicken);
                if (box_trap notin player) "The chicken is oblivious and
                carries on pecking seed. ";
            }
            ! stop processing
            return;
        }
        ! when not in the player's location
        ! and player is in the Tribe, or adjacent to the Tribe (LostInJungle)
        if (parent(self) ~= location && last_known_location == Tribe) {
            ! only when venture clock has run down
            if (--self.venture_clock > 0) return;
            ! reset venture clock
            self.venture_clock=5;
            ! move hen to the location
            move self to location;
            if (location == LostInJungle)
                "A hen appears from out the foliage. ";
            else
                "A hen appears from out the jungle. ";
            ! stop processing
            return;
        }
        ! enter the trap
        if (box_trap.is_set && some_seed in box_trap && random(5)==1) {
            move self to box_trap;
            "The hen enters the trap posthaste and begins her pecking frenzy. ";
        }
    ],
    
    has female;

! [ ------------------------------------------------------------------- Monkey ]
AnimalNPC monkey "monkey"
with
    name 'monkey',
    
    ! Hiding away counter
    fright_turns 0,
    
    ! First fright state
    first_fright true,
    
    ! When in the presence of a banana, take a few turns before taking it.
    reach_for_food_counter 0,
    
    initial [;
        print "There is a monkey here. ";
        if (lodestar in self)
            print "It has ", (a) lodestar, ". ";
        print_ret "";
    ],
    
    description [;
        if (lodestar in self) {
            print "The small creature is fascinated by ", (a) lodestar, ".^ ";
        }
        else {
            print "It is a small grey monkey with big brown eyes.
            It stares back at me.^ ";
        }
    ],
    
    life [;
        Ask, Answer, Tell:
            monkey_speak(random(10));
            print_ret " it replies. ";
        Give:
            if (noun ofclass EdibleFruitObject) {
                "The creature smacks its lips at the sight of ", (the) noun, 
                ", but hesitates to come near me. ";
            }
            if (noun ofclass EssentialObject) {
                "I am not giving ", (a) noun, " to ", (the) self, ". ";
            }
            "I offer ", (the) noun, " to ", (the) self,".
            It is not interested. ";
        Show:
            if (noun ofclass EdibleFruitObject)
                print_ret "The small monkey head swivels side-to-side as I
                wave ", (the) noun, ", showing it off. ", (The) self, "
                likes what it sees but looks hesitant to go near me. ";
            if (noun ofclass EssentialObject)
                print_ret "It seems curious about ", (the) noun, ". ";
        ThrowAt:
            if (noun ofclass EdibleFruitObject)
                print_ret "Maybe it would be better to just drop ", (the) noun,
                ". ";
            else
                <<Attack self>>;
    ],
    
    orders [;
        Give:
            if (noun == lodestar) {
                monkey_speak(random(10));
                print_ret " it replies, gripping the device tightly. ";
            }
        Take:
            if (noun == banana) {
                <<Show banana self>>;
            }
    ],
    
    ! Monkey Movements
    daemon [look_item fruit;
    
        ! Move to the clearing if the player is in the tree
        if (self in fig_tree && location == TreeTop) {
            print (The) self,", unimpressed, climbs down from the tree.^";
            give self curious;
            move self to Clearing;
            return;
        }
        
        ! No action if not curious
        if (monkey hasnt curious) return;
        
        ! Flee when frightened
        if (self.fright_turns > 0 && monkey_near_player(true)) {
            move self to fig_tree;
            ! Print flavor text when monkey is frightened the first time
            ! from a whip action.
            if (self.first_fright && action == ##Whip) {
                self.first_fright = false;
                print "^The piercing sound startles ", (the) self, 
                ", it launches up into the air and";
            } else {
                print "^", (The) self;
            }
            if (location == Clearing) {
                print_ret " scrambles up ", (the) fig_tree, ". ";
            } else {
                print_ret " scrambles out of sight. ";
            }
        }
        
        ! Rebuild confidence
        if (self.fright_turns > 0) {
            self.fright_turns = self.fright_turns - 1;
            return;
        }

        ! Climb down the tree
        if (self in fig_tree) {
            move self to Clearing;
            if (location == Clearing) {
                print_ret "^", (The) self, " climbs down from ",
                (the) fig_tree, ". ";
            }
        }
    
        ! No action if the player is not nearby.
        if (~~monkey_near_player(false)) return;
        
        ! Scan for any edibles in the room
        fruit = nothing;
        objectloop(look_item in parent(self)) {
            if (look_item ofclass EdibleFruitObject)
                fruit = look_item;
        }
        
        ! If there is a fruit in reach
        if (fruit && parent(self) == parent(fruit)) {
            self.reach_for_food_counter = self.reach_for_food_counter + 1;
            print "^";
            switch (self.reach_for_food_counter) {
                1:  
                    print_ret (The) self, " stares at ", (the) fruit,
                    ", then glares at me, looks back at the banana,
                    it smacks its lips. ";
                2:  
                    print_ret (The) self, " edges closer to ", (the) fruit,
                    " while keeping one eye on me. ";
                3:  
                    print (The) self, " grabs ", (the) fruit, 
                    ", stuffing its face with the delicious fruit. ";
                    if (lodestar in self) {
                        ! remove the fruit and return the player's possession
                        move fruit to garden_trees;
                        move lodestar to location;
                        ! climb back into the tree and reset counters
                        monkey_forget_about_food();
                        Achieved(SCORE_RESCUE_COMPASS);
                        print_ret " It seems distracted and left ", 
                        (the) lodestar, " lying on the ground. ";
                    }
                    print_ret "";
            }
        }
        
        ! Let the monkey do something when in the presence of the player
        if (parent(self) == parent(player)) {
            monkey_action();
        } else {
            ! When not with the player, follow the player.
            if (random(4) == 1) {
                ! Move to the player's location
                print (The) self, " appears nearby.^";
                move self to parent(player);
            }
        }    
    ],
    has transparent;

[monkey_forget_about_food;
    monkey.reach_for_food_counter = 0;
];

[ monkey_frighten;
    if (monkey_near_player(true)) {
        monkey.fright_turns = 4;
        ! Reset turn to reach for the banana
        monkey_forget_about_food();
    }
];

! Test if the monkey is near the player
[ monkey_near_player same_room;
    if (same_room) {
        return parent(monkey) == parent(player);
    }
    else {
        ! Test the Player's location
        return location == Clearing || location == Bungalow 
            || location == Garden || location == JunglePath
            || location == Tribe;
    }
];

! Test if the monkey is in view of the player
[ monkey_in_view;
    if (monkey_near_player(true)) {
        return true;
    } else {
        if (location == Clearing && monkey in fig_tree) {
            return true;
        }
    }
    return false;
];

[ monkey_action n;

    ! only some times
    n = random(10);
    if (n > 6) return;
    
    ! begin a new line
    print "^";
    
    ! The monkey has the compass and half the time
    if (lodestar in self && n > 15) {
        switch (n % 5) {
            0: print_ret (The) self, " stares at the moving needle on ", 
                (a) lodestar, ". ";
            1: print_ret (The) self, " fidgets with ", (a) lodestar, ". ";
            2: print_ret (The) self, " taps ", (a) lodestar, " on the ground. ";
            3: print_ret (The) self, " bites on ", (a) lodestar, ". ";
            4: print_ret (The) self, " sniffs ", (a) lodestar, ". ";
        }
    } 
    else { ! The monkey does not have the compass, or the other half the time
        switch (n % 4) {
            0: print_ret (The) self, " scratches itself. ";
            1: print_ret (The) self, " picks something off the ground
                and eats it. ";
            2: print_ret (The) self, " makes grunting noises. ";
            3: print_ret "~Ook ook~ says ", (the) self, ". ";
        }
    }
];

! hoot, scream, howl, coo, rumble, bark, pant, grunt, whoop, screech, gibber.
[ monkey_speak n;
    switch (n % 8) {
        1: print "~Oo oo~";
        2: print "~Whoop whoop!~";
        3: print "~Hoo hoo hoo~";
        4: print "~Hoo eek!~";
        5: print "~Screek!~";
        6: print "~Eek eek ook~";
        default: print "~Ook ook~";
    }
];

! [ ------------------------------------------------------------------ Boatman ]
HumanNPC boatman
    with
        name 'guide' 'rom' 'man',
        article "my",
        short_name "guide",

        ! he noticed you examining your compass
        noticed_compass false,
        
        ! he told you to bring him a yam in exchange for the trap
        expects_yam false,

        ! Hide the room listing (in the boat you see your guide)
        initial [;
            if (self in canoe) {
                return true;
            } else if (fish_fire in location) {
                "", (A) self, " is sitting here next to a fire. 
                He beckons at me to take a seat. ";
            }
        ],

        each_turn [;
            ! Only while on the River
            if (parent(canoe) == River && self in canoe)
                boatman_each_turn_action(random(10));
        ],

        description [;
            print "A native to Papua New Guinea, he seems to navigate
            this river like he has done it for all his years.^";
            if (self hasnt proper) {
                print "Perhaps I should SAY HI.^";
            }
        ],
        
        notice_lodestar [;
            if (TestScope(self, player)) {
                if (boatman.noticed_compass == false) {
                    boatman.noticed_compass = true;
                    print "^", (A) self, " notices ", (a) lodestar, " -- ";
                }
                print "~My father had one just like that.~^";
            }
        ],
        
        life [pname pause pause_n;
            ! Refers to the player by name, if introduced
            if (self has proper) {
                pname = player.short_name;
            } else {
                pname = "mister";
            }
            ! Takes a pause between sentences
            pause_n = random(14);
            switch (pause_n) {
                1: pause = ",~ he says, taking a moment to listen to the sound
                of the river, and continues, ~";
                5: pause = ",~ he turns his gaze up to judge the weather, then
                back at me, ~";
                9: if (parent(canoe) == River) {
                        ! On the river specifically
                        pause = ",~ he pauses to steer the craft around 
                        a floating tree trunk, ~";
                    } else {
                        pause = ",~ he ruminates, ~";
                    }
                13: if (parent(canoe) == River) {
                        ! On the river specifically
                        pause = ",~ he muses while paddling with the oar, ~";
                    } else {
                        pause = ",~ he pauses to listen to the sound of a monkey
                        barking in the jungle, ~";
                    }
                default:
                    pause = ". ";
            }
            Answer:
                return boatman_answers(noun);
            Ask:
                return boatman_ask(second, pause);
            Tell:
                return boatman_ask(second, pause);
            Show:
                if (noun == lodestar) {
                    self.notice_lodestar();
                    return;
                }
                if (noun == yam && self.expects_yam) {
                    "~Yep, that is a yam alright, it will make a good meal.~ ";
                }
                if (noun == banana) {
                    "~Those are good for eating, the wild monkeys that live
                    in the jungle here, they like them bananas too.~ ";
                }
                if (noun == box_trap) {
                    boatman_ask('trap');
                }
                if (noun == bullwhip) {
                    "~I have seen whips before, ", (string)pname, ", but we
                    don't have much use for them"
                    , (string) pause,
                    "We farm the waters mostly, and some pigs too.~ ";
                }
                if (noun == leather_jacket) {
                    "~I like your jacket, ", (string)pname, ".~ ";
                }
                if (noun == fedora_hat) {
                    "~That is one fine hat, ", (string)pname, ", but I never
                    cared for having one myself.~ ";
                }
                if (noun == golden_egg) {
                    "", (A) self, "'s are sparkle with delight - 
                    ~The legends were true!~ ";
                }
                if (noun == matchbook) {
                    "~Those are useful, but hard to get those around here"
                    , (string) pause,
                    "I make fire with flint stones. Those are plentiful
                    near running water"
                    , (string) pause,
                    "The stone has a blue shine.~ ";
                }
                if (noun == satchel) {
                    "~Nice bag you got there, ", (string)pname, ".~ ";
                }
                if (noun == seed_pouch) {
                    "~You put those in the trap to lure the chicken inside.~ ";
                }
                print_ret (A) self, " looks amusingly at ", (the) noun, ". ";
            Give:
                if (noun ofclass EdibleFruitObject) {
                    remove noun;
                    print_ret (The) self, " takes ", (the) noun, " and eats it.
                    ~Thanks!~";
                }
                if (self.expects_yam && noun == yam) {
                    move yam to self;
                    move box_trap to player;
                    move seed_pouch to player;
                    print "~This will do fine!~ he says laughing. He hands
                    me a pouch filled with seeds, along with the trap. 
                    ~Remember to SET the trap, then PULL the string
                    when the chicken is inside. Good luck!~^";
                    return true;
                }
                if (noun == box_trap || noun == seed_pouch) {
                    if (carver.carving_state == 0) {
                        "No, I still need to catch that sneaky hen. ";
                    }
                    move box_trap to canoe;
                    move seed_pouch to canoe;
                    give player ~burdened;
                    "~Thanks friend, I hope you caught that chicken.~ ";
                }
                "~No thanks,~ ", (a) self, " politely declines. ";
            Order:
                if (ItemInPlayer(sun_drawing) && (second == box_trap || noun == box_trap)) {
                    if (yam in self) {
                        "~I hope you caught that chicken you were after!~ ";
                    } else if (self.expects_yam) {
                        "~Of course you are free to use my trap, just find me a
                        yam,~ ", (a) self, " says, smiling. ";
                    } else {
                        self.expects_yam = true;
                        "~You know, I will lend you my chicken trap, if you find
                        me a yam. I think yam and fish will make a good meal.~ ";
                    }
                } else
                "I do not need that right now. ";
        ],
;

[ boatman_ask second pause;
    switch (second) {
        'self', 'rom', 'himself', 'papua', 'new', 'guinea', 'land':
            "~Lived here all my life, just like my family has for generations.~";
        'family', 'wife':
            "~My wife and I live in a village nearby, she makes fishing nets
            and beaded jewelry"
            , (string) pause,
            "I catch fish and give boat rides.~ ";
        'jungle', 'forest', 'trees', 'tree':
            "~The jungle is our home, our past and our present, 
            and our livelihood.~ ";
        'path':
            if (location == Shore) {
                "~That path to the north will take you into the jungle.~ ";
            }
        'canoe', 'boat', 'oar':
            "~I have the canoe for many years now, built it myself,~ ",
            (a) self, " says proudly"
            , (string) pause;
        'river', 'maro', 'water':
            "~The ancient waters of the Maro will swallow you whole if you try
            to swim,~ he says mournfully"
            , (string) pause,
            "It may not look it, but the current is strong and the water is
            cold.~ ";
        'father':
            "~He taught me how to build boats and fish, taught me
            everything to live and survive out here.~ ";
        'spear':
            "~We call that a Kalawai~, nodding at the spear in the
            boat"
            , (string) pause,
            "Good for catching dinner.~ ";
        'net':
            "~That is a cast net"
            , (string) pause,
            "I throw it out into the water, haul it back in.~ ";
        'fish':
            if (fish in fish_fire) {
                "~It smells good, and almost done.~";
            } else if (fish in canoe) {
                "~We will have some good dinner tonight!~";
            } else {
                "~If you catch us a fish, we will cook it,~ he says in jest. ";
            }
        'fishing', 'fisherman':
            <Ask self 'spear'>;
            <<Ask self 'net'>>;
        'time', 'longer':
            "~We will reach the shore soon.~ ";
        'trap':
            "~That, my friend, is a chicken trap"
            , (string) pause,
            "You set the trap - prop the door open with this wooden rod - 
            and pull on the string to swing the door shut.~ ";
        'pig', 'pigs':
            "~Had a pig once, had it as a pet, but then I lost pig,~ 
            he chuckles as if thinking about something funny. ";
        'lost', 'pig':
            "~It ran away, into a place under ground - never did find that
            pig.~ ";
        'chicken':
            if (carver.carving_state == 0) {
                "~You will no doubt see some chickens roaming these parts.~ ";
            } else {
                "~Glad to hear you caught it!~ ";
            }
        'egg', 'eggs':
            "~Some people here farm hens and fowls for their eggs.
            I am a fisherman myself.~";
        'compass':
            "~I don't need one, I know these waters and jungles quite well.~";
        'fire', 'torch':
            "~I make fire with flint stones.
            Those are plentiful near running water"
            , (string) pause,
            "The stone has a blue shine.~ ";
        'gold', 'golden', 'treasure':
            "~I have heard the stories of ancient treasures,
            I do not know how true they are.
            For me, the real treasure is our land.~";
        'air':
            "~The air smells fresh, doesn't it.~";
    }
    print_ret (The) self, " grins at me and nods. ";
];

[ boatman_answers noun;
    switch (noun) {
        'hello', 'hi', 'greetings':
            if (self has proper)
                print_ret (A) self, " looks baffled at my repeated greeting,
                            but he obliges me with a big grin. ";
            else {
                print "I introduce myself to ", (a) self, ". ^~Nice to meet
                        you, ", (a) player, "~, he says with a grin, ~I am
                        Rompinjimp-Nanganbia Tiki. ";
                boatman_rename();
                print "Please call me ", (a) self, ".~^ ";
                return true;
            }
        'bye', 'goodbye', 'cheers':
            if (location == River)
                "No need to say goodbye to ", (a) self, " before I get to
                the shore. ";
            if (location == Shore)
                "~Safe travels ", (a) player, ", I hope you find what you are
                looking for,~ ", (a) self, " replies. ";
        'yes':
            "~Glad to hear it!~ ";
        default:
            print_ret (A) self, " does not seem to understand what I mean. ";
    }
];

[ boatman_rename;
    boatman.short_name = "Rom";
    give boatman proper;
];

[ boatman_each_turn_action n;
    switch (n) {
        1, 3:
            print "^", (A) boatman, " paddles with the oar.^";
        5:
            if (fish in canoe)
                print "~We will have fish for dinner tonight~, ",
                    (a) boatman, " says hungrily.^";
        7:
            print "^", (A) boatman, " looks across the salty water,
                into the distance.^";
        9:
            if (random(2) == 1)
                if (boatman.noticed_compass == true)
                    print "^~I still have my father's compass...~, ",
                        (a) boatman, " reflects nostalgically.^";
    }
];

! [ ------------------------------------------------------------- Native Tribe ]
HumanNPC natives "natives"
with
    name 'people' 'men' 'women' 'native' 'natives',
    description "Women and men are weaving plant fibers into
    fishing nets and ropes, some are tending to a firepit while others
    prepare pumpkins, tubers and fish. ",
    found_in Tribe,
    Life [;
        Ask, Tell, Give:
            ! test second
            "They seem content with doing their chores, I would rather not
            disturb them. ";
        Answer:
            ! test noun
            switch (noun) {
            'hi', 'hello':
                "The people wave back at me with smiles. ";
            }
    ],
    has pluralname scenery;

! [ ------------------------------------------------------------------- Carver ]
HumanNPC carver "carver"
with 
    name 'man' 'carver',
    initial [;
        if (self.carving_state == 1) {
            "The carver gestures at me for the drawing. ";
        }
        "A man sits nearby, carving a piece of wood. ";
    ],
    description [;
        if (self.carving_state == 0 || self.carving_state == 50)
            "He is busy carving a rough piece of dry wood using a knife and
            other assorted hand tools. There are half a dozen carved wooden
            statuettes and figurines in various stages of completion on the
            ground beside him. His handiwork tells me he is very skilled in his
            trade. ";
        else if (self.carving_state == 1)
            "The carver is waiting for the drawing of the sun key. ";
        else if (self.carving_state > 1)
            "The carver is busy working on my sun key replica. ";
    ],
        
    found_in Tribe,
    
    ! 0: initial
    ! 1: waits for drawing
    ! 2-n: busy with the carving
    ! 50: done with the carving
    carving_state 0,
    
    life [;
        Ask,Answer,Tell:
            "The man says something unintelligible while gesturing to his works. ";
        Give:
            if (noun ofclass EdibleFruitObject) {
                remove noun;
                print_ret (The) self, " takes ", (the) noun, " and eats it. ";
            }
            if (noun ofclass EssentialObject) {
                "He refuses to take ", (a) noun, ". ";
            }
            else if (noun == sun_drawing && self.carving_state == 0) {
                <<Show noun self>>;
            }
            else if (noun == sun_drawing && self.carving_state == 1) {
                remove sun_drawing;
                self.carving_state = 2;
                Achieved(SCORE_BRIBERY);
                StartDaemon(self);
                "I give him the drawing, he looks at it for a moment
                then picks a piece of wood from his pile and begins carving. ";
            }
            else if (noun == box_trap && chicken in box_trap) {
                remove chicken;
                move box_trap to location;
                self.carving_state = 1;
                "The carver has a big grin on his face. He removes the hen
                from the trap and takes her over to the firepit, handing it
                to somebody there.
                He returns and gestures to me for the drawing. ";
            }
            else if (noun == chicken) {
                remove chicken;
                self.carving_state = 1;
                "The carver has a big grin on his face. He takes the hen
                over to the firepit, handing it to somebody there.
                He returns and gestures to me for the drawing. ";
            }
            else
                "He takes ", (the) noun, " and examines it, turns it around a
                few times, and finally hands it back to me. ";
        Show:
            if (noun ofclass EssentialObject)
                "He seems more interested in his carvings than ", (the) noun, ". ";
            if (noun == sun_drawing && self.carving_state == 0)
                "The man takes a look at the drawing, and he seems to understand
                that I want a carving. He gestures to his mouth as if 
                eating, and tucking his hands under his shoulders, flaps his
                elbows like a bird. ";
            if (noun == sun_drawing && self.carving_state == 1)
                <<Give noun self>>;
            if (noun == box_trap && chicken in box_trap) {
                "He seems impressed! ";
            }
    ],
    
    daemon [;
        if (self.carving_state > 1 && self.carving_state < 50) {
            if (++self.carving_state == CarvingTurns) {
                self.finish_carving();
            }
        }
    ],
    
    finish_carving [;
        self.carving_state = 50;
        move sun_key to Tribe;
        StopDaemon(self);
        if (player in Tribe) {
            "The carver gestures to me that he is done.
            He puts the replica sun key on the ground. ";
        }
    ];

! [ ==================================================================== Rooms ]

! [ ----------------------------------------------------------------- Bungalow ]
OutdoorRoom Bungalow "Bungalow"
with
    description [;
        if (self hasnt visited) {
            print "I enter the decrepit hovel and immediately notice the
            missing roof, it has long since collapsed onto the floor, providing
            little protection from the elements. ";
        } else {
            print "I am inside a dilapidated bungalow. ";
        }
    ],
    before [;
        Examine:
            if (noun == d_obj)
                print_ret "The ground is strewn with rubble. ";
            if (noun == u_obj) {
                print "Since the roof is no longer there, I can see the sky. ";
                <<Examine sky>>;
            }
    ],
    cant_go "The only exits are north to the clearing, and southwest to the garden. ",
    n_to clearing_way,
    sw_to garden_way,
    has walls;

SearchableObject bungalow_rubble "rubble"
with 
    name 'rubble' 'detritus' 'junk' 'debris' 'roof' 'floor' 'bungalow' 'hut' 'pile',
    found_in Bungalow,
    description [;
        print "It is a pile of debris that used to be the roof.
        It now litters the floor. ";
        if (child(self)) {
            print "I wonder if there is anything useful in there. ";
        }
        print "^";
    ],
    search_lead "I scrounge amid the rubble and disturb a giant centipede.
    The critter scurries out of sight. I continue my search and find ",
    search_concludes "I take it. ",
    auto_take true,
    article "some",
    before [;
        ! Alias Dig as searching
        Dig, LookUnder:
            <<Search self>>;
        ! Hide the rubble from the room description when searched
        Search:
            give self scenery;
    ];

! [ ----------------------------------------------------------------- Clearing ]
JungleRoom Clearing "Clearing"
with
    description [;
        if (self hasnt visited) {
            print "The jungle recedes here to create a natural clearing, the
            ground is firm and the area is surrounded by jungle vegetation. 
            I have a clear view of the sky above. ";
        } else {
            print "I am in a natural clearing, surrounded by jungle. ";
        }
        if (monkey in fig_tree) {
            print "A large fig tree stands here, a monkey is sitting in it. ";
        } else {
            print "A large fig tree stands here. ";
        }
    ],
    e_to jungle_path_way,
    s_to bungalow_way,
    u_to TreeTop,

    before [;
    
        ! climb up => go up
        Climb:
            if (noun == u_obj)
                <<Go noun>>;
        
        ! Describe climbing up the tree
        Go:
            if (noun == u_obj) {
                if (player has burdened) {
                    "I can't climb while carrying this heavy thing. ";
                }
                print "I climb up the strong branches of the fig tree.^";
            }
    ];

! [ -------------------------------------------------------------------- Cliff ]
JungleRoom Cliff "Gorge"
with
    description [;
        if (self hasnt visited) {
            print "After a good climb I reach the top of the hill.
            Jungle surrounds me on all sides, except for a deep gorge to the 
            east, a rope bridge spans across it. ";
        } else {
            print "I am overlooking a deep gorge. ";
        }
    ],
    d_to stone_stairs,
    s_to stone_stairs,
    e_to bridge_way;

ScenicBase "gorge"
with 
    name 'gorge',
    description "The gorge is a long way down. ",
    found_in Cliff,
    before [;
        Enter: "Not possible, the only way across is over that rope bridge. ";
        Search: "I don't see any identifying landmarks at the bottom. ";
    ];

! [ -------------------------------------------------------------- Deadly Drop ]
OutdoorRoom DeadlyDrop "Deadly Drop"
with
    description "",
    turn_count 0,
    before [;
        Examine:
            "Now is not the time! ";
        Whip:
            ! Whip the bridge to save yourself
            if (noun == rope_bridge) {
                ! Reset puzzle state
                ! self.turn_count = 0;
                print "I swing my whip and *SNAP* -- it hooks on the 
                rope bridge. I dangle precariously, then pull myself back up
                to safety. That was close!^ ";
                playerTo(Waterfall);
                return true;
            }
        Take:
            if (noun == rope_bridge) {
                print_ret "I am off balance, and the rope is just out of
                reach. ";
            }
        Jump, JumpOver:
            print_ret "A rope bridge is a terrible place to decide to 
            start jumping. ";
    ],
    each_turn [;
        if (self.turn_count == 0) {
            print "As I cross the bridge, I step on a rotten plank and it cracks
            under my weight, I lose my balance!^";
        }
        if (self.turn_count == 1) {
            if (fedora_hat in player) {
                print "Teetering the other way, my fedora tumbles into the
                gorge below -- I am going to fall!^";
                remove fedora_hat;
            } else {
                print "I teeter the other way -- I am about to fall!^";
            }
        }
        if (self.turn_count == 2) {
            deadflag = 1;
            print "^I plummet into the gorge, cracking my head
            on a rocky outcropping, far down below.
            Weeks pass before the search party discover my body.
            ^^If only I had tried my WHIP. ";
        }
        self.turn_count = self.turn_count + 1;
    ],
    cant_go "I can't! ",
    has light;

Object rope_bridge "rope bridge" DeadlyDrop
with
    name 'rope' 'bridge',
    description "The bridge is made from plait ropes and narrow planks, 
    it seems weathered and old. ",
    has scenery;

! [ ------------------------------------------------------------------- Garden ]
JungleRoom Garden "Garden"
with
    description [;
        if (self hasnt visited) {
            print "I enter a small garden, which looks like it has not been
            maintained for a very long time. The plants have grown wild. ";
        }
        "The small garden has grown wild, I see some vegetable plants
        and fruit trees. ";
    ],
    ne_to bungalow_way;

ScenicPlantObject "garden"
with 
    name 'garden',
    found_in Garden,
    before [;
        Examine: <<Look>>;
        Search:
            if (yam has concealed) {
                <<Take yam>>;
            }
    ];

ScenicPlantObject "vegetables" Garden
with
    name 'veg' 'veggie' 'veggies' 'vegetable' 'vegetables',
    description [;
        print "The vegetable plants in the garden have grown wild without
        anybody around to harvest them. ";
        if (yam has concealed) {
            print "I notice some kind of tuber growing on the ground. ";
        }
        "";
    ],
    before [;
        Search:
            <<Examine self>>;
    ];

! [ -------------------------------------------------------------- Jungle Path ]
JungleRoom JunglePath "Jungle Path"
with
    description [;
        if (self hasnt visited) {
            print "I walk along the jungle path, it looks frequently used and
            is surrounded by dense vegetation. ";
        } else {
            print "The path is surrounded by vegetation. ";
        }
    ],
    before [;
        Examine:
            if (noun == s_obj)
                print_ret "I see a river that way. ";
            if (noun == w_obj)
                print_ret "I see a clearing in the jungle that way. ";
        Go:
            if (fish in canoe && (golden_egg in player || golden_egg in satchel)) {
                SetupFishDinnerScene();
            }
    ],
    n_to [;
        if (temple_way in location) return temple_way;
        return LostInJungle;
    ],
    w_to clearing_way,
    s_to shore_way;

! [ -------------------------------------------------------------- Lost Jungle ]
JungleRoom LostInJungle "Lost in the Jungle"
with
    description [;
        if (self hasnt visited) {
            print "There is no path this way, I struggle walking through
            the dense vegetation. I am surrounded by jungle and every
            direction looks the same -- I am lost. ";
        } else {
            print "I don't know where I am. ";
        }
    ],
    before [;
        Go:
            if (random(OddsOfFindingWayWhenLost) == 1) {
                print "^I find my way back by chance. ";
                if (lodestar in player || lodestar in satchel) {
                    print "Next time I should read my compass. ";
                }
                print "^";
                ! parameter "2" honors brief room descriptions - DM4 pg 21
                PlayerTo(last_known_location, 2);
                return true;
            }
            else
                print_ret "I walk slowly through the thick jungle. ";
    ];

! [ --------------------------------------------------------------- Maro River ]
OutdoorRoom River "The Maro River"
with
    #ifdef DEBUG;
    description "",
    #ifnot;
    description [;
        if (self hasnt visited) {
            print (The) canoe, " rocks gently on the water as I ride
            down the river. ", (A) boatman, " sits at the other end of the craft
            rowing with an oar. I wonder how much longer this will take, I
            have been in this ", (a) canoe, " for a while now. I am anxious
            to start searching for the treasure. ";
        } else {
            print "I am in ", (a) canoe, " on the Maro river. ", (A)
            boatman, " is with me, rowing his craft. ";
        }
    ],
    #endif;
    
    before [;
        ! Senses
        Examine:
            if (noun == u_obj)
                <<Examine sky>>;
            if (noun == d_obj)
                <<Examine canoe>>;
            if (noun in compass)
                print_ret "I see the jungle across the water. ";
        Listen:
            print_ret "I hear the sound of water splashing as ", (a) boatman,
            " paddles with his oar. ";
        Smell:
            print_ret "I smell fresh air. ";
        Jump:
            "I don't want to rock the boat. ";
        Swim:
            "These waters look dangerous. I would not dare swim. ";
        Wait:
            SetTime(the_time + canoe.time_left);
            canoe.time_left = 0;
            "I sit back and enjoy the boat ride until... ";
    ];

Object "jungle"
with 
    name 'jungle' 'foliage' 'plant' 'plants' 'bush' 'brush' 'shrub',
    description "The jungle looks green and lush from this distance. ",
    found_in River,
    before [;
        Examine: ;
        default: "The jungle is out of reach. ";
    ],
    has scenery;

! [ -------------------------------------------------------------- River Shore ]
OutdoorRoom Shore "River Shore"
with
    description [;
        if (player in canoe) {
            print "I can now exit the canoe. ";
        }
        else {
            print "The shore is wet and muddy, it runs from east to west. ";
        }
    ],
    
    n_to jungle_path_way,
    cant_go "I walk that way and soon realize there are no paths leading
            into the jungle, so I return to the site where the canoe landed,
            where I can see the path into the jungle. ",
    
    before [;
        Go:
            if (noun == s_obj || noun == sw_obj || noun == se_obj) {
                "The river is that way, and I don't need to get myself 
                soaking wet, or worse, drowned. ";
            }
            if (noun == ne_obj || noun == nw_obj) {
                "I try enter the jungle that way, but the dense vegetation
                resists my attempts. ";
            }
        ! Senses
        Examine:
            if (noun == u_obj)
                <<Examine sky>>;
            if (noun == d_obj)
                print_ret "I see the ground beneath me. ";
            if (noun == n_obj || noun == ne_obj || noun == nw_obj)
                print_ret "I see a jungle in that direction. ";
            if (noun in compass)
                print_ret "I see the river. ";
        Listen:
            print_ret "I hear the sound of water lapping the canoe. ";
        Smell:
            if (fish_fire in location) {
                print "I smell the fish cooking over the fire. ";
            }
    ];

! [ ------------------------------------------------------------------- Temple ]
IndoorRoom Temple "Temple"
with
    description [;
        if (self hasnt visited) {
            print "The temple is cool inside and the stone floor is covered in a
            layer of dirt, openings near the top of the structure
            provide ample natural light to see. ";
        }
        if (temple_stone_box hasnt open) {
            print "A sun is engraved in the floor. ";
        }
        print "The stone walls are engraved with symbols. I hear water falling
        from the north entrance, and I see jungle through the south exit. ";
    ],
    n_to Waterfall,
    s_to JunglePath,
    cant_go "The only exits are north to the waterfall, and south to the jungle. ",
    before [;
        Exit:
            if (~~noun)
                "I can exit north to the waterfall, or exit south to the jungle. ";
            ! Exit the temple
            if (noun == n_obj)
                <<Go n_obj>>;
            if (noun == s_obj)
                <<Go s_obj>>;
        Go:
            if (noun == out_obj)
                <<Go n_obj>>;
        Examine:
            if (noun == n_obj)
                print_ret "I see a waterfall through the exit that way. ";
            if (noun == s_obj)
                print_ret "I see a jungle through the exit that way. ";
            if (noun == d_obj)
                <<Examine temple_stone_box>>;
                
        Listen:
            "I hear the waterfall outside. ";
        Smell:
            "It smells earthy in here. ";
        Open:
            if (noun == d_obj) <<Open temple_stone_box>>;
    ],

    has light;

ScenicEngravingObject temple_glyphs "glyphs" Temple
with
    name 'glyph' 'glyphs' 'symbol' 'symbols' 'wall' 'walls',
    article "some",
    description "The engravings cover all of the walls. My attention
    is drawn to a circular pattern in the glyphs as they converge and surround
    one large glyph -- I recognize this glyph as ~air terjun~. ";

ScenicEngravingObject "glyphs" Temple
with
    name 'air' 'terjun',
    description "I may have some information about ~air terjun~ in my journal. ",
    before [;
        Take: "I can't take the glyphs, they are engraved into the stone. ";
    ];

ScenicEngravingObject temple_stone_box "engraved sun" Temple
with
    name 'slab' 'hole' 'holes' 'engraved' 'sun',
    description "The sun is engraved into a slab of stone, embedded
    in the floor. There are holes in the slab. It may be possible to open. ",
    short_name "engraved sun",
    before [;
        Take, Pull:
            <<Open self>>;
    ],
    after [;
        Open:
            ! List this container in room descriptions when it is open
            give self ~scenery;
            ! Change it's short name
            self.short_name = "hole in the floor";
            ! List the of contents manually, otherwise the default 
            ! listing prints "you open the hole in the floor".
            print "I open the stone slab with the sun engraving, revealing ";
            WriteListFrom(child(self), ENGLISH_BIT);
            print_ret ".";
    ],
    has container openable static;

ScenicBase "dirt"
with
    name 'dirt',
    description "Dust and dead leaves litter the floor. ",
    found_in Temple,
    before [;
        Take:
            "I don't want it. ";
    ];

ScenicBase tomb_artifacts "artifacts"
with
    name 'artifact' 'artifacts' 'clay' 'pot' 'pots' 'idol' 'idols',
    article "some",
    description "The artifacts consist of old clay pots,
    idols carved out of wood depicting oxen, pigs and dogs. ",
    found_in Tomb,
    before [;
        Take, Search:
            "I don't see anything worth taking. ";
    ];

WeightedObject urn "urn"
with
    name 'urn',
    description "It is a large clay vessel. ",
    when_open "The urn is open, an oily substance is inside it. ",
    after [;
        Receive:
            move noun to player;
            if (noun hasnt oily) {
                if (noun ofclass TorchBaseObject && noun hasnt is_torch) {
                    "I dip it in the oil, nothing happens. ";
                }
                give noun oily;
                if (noun has is_torch) {
                    Achieved(SCORE_CRAFT_TORCH);
                }
                print_ret "I put ", (the) noun, " in the urn. It is now
                covered in a film of oil. ";
            }
    ],
    has container openable;

Object urn_oil "oil" urn 
with 
    name 'oil',
    article "some",
    description "I am not sure what this was used for, but it's distinctly oily. ",
    before [;
        PutOn:
            move self to urn;
            if (second == torch_of_wood || second == torch_of_bone) {
                <<Dip second urn>>;
            }
            print_ret "That will only make a mess. ";
        Take, Drop, Remove:
            move self to urn;
            print_ret "I would rather keep it in the urn. ";
        Smell:
            "It smells a bit rancid, but my nose tells me that it is oil,
            without a doubt. ";
        Receive:
            <<Dip noun urn>>;
    ],
    has container open;

! [ -------------------------------------------------------------- Top Of Tree ]
OutdoorRoom TreeTop "Top of Tree"
with
    description [;
        if (self hasnt visited) {
            print "I climb up the tree, as high as safely possible, and spend
            a moment to take in the view. ";
        }
        "I can see in all directions from this vantage point. ";
    ],
    cant_go "The only way is down. ",
    d_to Clearing,
    
    before [;
        Go:
            if (noun == d_obj && lodestar in player && ~~lodestar.has_dropped) {
                print "^As I descend ", (a) lodestar, 
                    " accidentally falls to the ground below. *CLINK*
                    ^^ --- more ---^";
                lodestar.has_dropped = true;
                move lodestar to monkey;
                PressAnyKey();
                return false;
            }
    
        Climb:
            ! climb down => go down
            if (noun == d_obj)
                <<Go d_obj>>;
        
        ! Look in directions
        Examine:
            if (lodestar notin player && lodestar notin satchel) {
                "I can't look in a direction without my compass. ";
            }
            if (noun in compass && lodestar notin player && lodestar in satchel) {
                <Take lodestar>;
            }
            if (noun == ne_obj) {
                Clearing.ne_to = valley_way;
                move valley_way to Clearing;
                Achieved(SCORE_FIND_THE_WAY);
                print_ret "There! I see stone stairs leading up that hill, to ",
                    (a) noun, ". ";
            }
            ! Any other direction gives a canned response.
            ! Note that we *must* test for CompassDirection here
            ! else the Examine intercept will catch examining nouns too.
            if (noun == s_obj || noun == se_obj || noun == sw_obj) {
                "I see the Maro river that way, in the distance. ";
            }
            if (noun ofclass CompassDirection) {
                "I see more jungle to ", (a) noun, ". ";
            }
    ],
    
    after [;
        Drop:
            move noun to Clearing;
            print_ret (The) noun, " falls down below. ";
    ];

! [ --------------------------------------------------------------------- Tomb ]
IndoorRoom Tomb "Underground Tomb"
with
    description [;
        if (self hasnt visited) {
            print "The tomb is small yet crammed with all manner of artifacts,
            there are clay pots stacked in each corner, wood-carved idols
            stand guard between the pots. ";
        } else {
            print "The tomb is small yet crammed with all manner of artifacts. ";
        }
        "Engravings on the walls dance under the flicker of my torch. ";
    ],
    u_to tomb_stairs,
    cant_go "The only way out is up the stairs. ",
    before [;
        Go:
            if (noun == u_obj) {
                if (torch_of_wood in location) {
                    move torch_of_wood to player;
                    print "I take my torch with me. ";
                }
                if (torch_of_bone in location) {
                    move torch_of_bone to player;
                    print "I take my torch with me. ";
                }
            }
        Examine:
            if (noun == u_obj) {
                "I see a stone ceiling. ";
            }
            else if (noun == d_obj) {
                print "I notice a hole in the floor. ";
                <<Examine sun_key_hole>>;
            }
        Exit:
            <<Go u_obj>>;
    ];

ScenicEngravingObject "glyphs" Tomb
with
    name 'glyph' 'glyphs' 'engraving' 'engravings' 'wall' 'walls',
    description "I lean in toward the engravings and raise my torch up
    to get a better look. The engravings cover all of the walls, but I
    don't recognize any of them. ";

ScenicRockObject stone_column "stone column"
with
    name 'stone' 'column',
    initial [;
        print "A stone column stands in the center of the room";
        if (sun_key_hole has examined) {
            print ", a ", (name) sun_key_hole, " in the floor next to it";
        }
        ".";
    ],
    description [;
        print "The column is round and carved out of stone, ";
        if (self.height == 5) {
            print " it reaches from floor to ceiling. ";
        } else {
            print " it reaches up from the floor toward the ceiling. ";
        }
        if (~~sun_key_hole has examined) {
            print "My keen eye notices a small and peculiar hole in the floor
            next to it. ";
        }
        "";
    ],
    found_in Tomb,
    ! The height of the column reduces until zero
    height 5,
    ! lower the column by one unit
    lower [;
        if (self.height == 0) {
            "Nothing happens. ";
        }
        if (--self.height == 0) {
            remove self;
            move stone_altar to location;
            move altar_plate to location;
            "A low thud echoes through the ground as the column comes to a rest. ";
        }
        "The column lowers into the ground with the sound of grinding stone. ";
    ],
    before [;
        Climb, Enter:
            "It is too smooth on all sides to get a grip. ";
    ],
    has ~scenery;

ScenicEngravingObject sun_key_hole
with
    name 'hole' 'keyhole',
    short_name "strange hole",
    found_in Tomb,
    before [;
        Examine:
            if (~~self has examined) {
                give self examined;
                self.short_name = "sun-shaped hole";
            }
            "The shallow hole is no more than a fist deep and a hand wide, it 
            has been carved out of the stone floor, and is in the shape of a
            sun. ";
        Search:
            if (~~sun_key in sun_key_hole) {
                "Peering into the hole I see a glyph engraved in the bottom,
                I recognize it as Sowilu. ";
            }
        Insert:
            "That does not fit in the keyhole. ";
    ],
    has scenery container open;

ScenicBase altar_plate "altar plate"
with
    name 'plate',
    description [;
            print "The plate is wooden and set into the top surface of the altar. ";
            if (golden_egg in stone_altar) { 
                print "The Golden Egg is resting on this plate, 
                I should be careful removing it, as it may be booby trapped.
                If I can find something heavy to replace the egg... ";
            }
            print "^";
    ],
    before [;
        Take: "I can't take that. It is part of the altar. ";
        Receive:
            <<PutOn noun stone_altar>>;
    ],
    has supporter;

ScenicRockObject stone_altar "altar"
with
    name 'stone' 'altar' 'column',
    initial [;
        print "A stone altar is here in the room, ";
        if (golden_egg in self) {
            print_ret (the) golden_egg, " sits attractively on top of it! ";
        }
        if (stone_egg in self) {
            print_ret (the) stone_egg, " on top of it. ";
        }
    ],
    description "The stone altar extrudes up from the floor, its top surface
    reaches up to my chest, there is a plate inset on top. ",
    each_turn [n is_weighted;
        is_weighted = false;
        objectloop (n in self) {
            if (n ofclass WeightedObject) is_weighted = true;
            if (n == golden_egg) is_weighted = true;
        }
        if (~~is_weighted) {
            deadflag = 1;
            "^The weight lifted from the altar triggers a pressure plate booby
            trap. Tens of tiny poisoned darts shoot out from holes hidden in the
            runed walls. I slump to the floor paralyzed, never to wake up
            again. ";
        } else {
            if (golden_egg in player) {
                Achieved(SCORE_TREASURE);
            }
        }
    ],
    has ~scenery supporter;

! [ -------------------------------------------------------------------- Tribe ]
JungleRoom Tribe "Tribe"
with 
    description [;
        if (self hasnt visited) {
            print "I walk along the path for a short while, winding my way
            through the jungle. I finally emerge at the other end and find
            myself pleasantly surprised to see other people here. ";
        }
        print "The small tribal settlement of a dozen natives are going about
        their daily chores. ";
        if (self hasnt visited) {
            <Examine natives>;
            print "They don't seem to mind my presence, and they carry on with
            their chores. ";
        }
    ],
    before [;
        Smell: "I smell the burning fire, mixed with the earthy jungle tones. ";
        Listen: "I hear the locals chatter in their native tongue, sounds
        like they are having a relaxed conversation. ";
        Wait:
            if (carver.carving_state > 1 && carver.carving_state < 50) {
                SetTime(the_time + (CarvingTurns-carver.carving_state));
                print "I wait patiently while the carver works. ";
                carver.finish_carving();
                return true;
            }
    ],
    w_to tribe_path
;

ScenicBase firepit "firepit"
with
    name 'fire' 'pit' 'firepit',
    description "It is a pit dug in the ground, a fire is burning within. ",
    description_lead "Some of the people are tending to the fire. ",
    found_in Tribe,
    before [;
        Receive:
            if (noun has is_torch) {
                if (noun has oily) {
                    noun.set_aflame();
                    "I light the business end of ", (the) noun, " in the firepit.
                    My torch is now lit. ";
                } else {
                    "I need some kind of fuel on the wick first. ";
                }
            }
            "I don't want to burn ", (the)noun, ". ";
    ],
    has container open;

ScenicBase statuettes "carvings"
with 
    name 'wood' 'wooden' 'statuettes' 'figurines' 'carving' 'carvings',
    article "some",
    description_lead "The wooden figurines are all lined up neatly. ",
    description "They depict several deities and animals. ",
    found_in Tribe,
    before [;
        Take:
        "I don't want any of those carvings. ";
    ];

! [ ------------------------------------------------------------------- Valley ]
JungleRoom Valley "Valley"
with
    description [;
        if (self hasnt visited) {
            print "Pushing through the jungle I arrive in a small valley,
            rich with flowering orchids that surround me. ";
        } else {
            print "I am in a lush jungle valley full of vibrant orchids. ";
        }
    ],
    u_to stone_stairs,
    n_to stone_stairs,
    s_to clearing_way,
    e_to tribe_path,
    
    before [;
        Smell:
            print_ret "I smell the scents of all the many varieties of
            orchids, mixed together they create a floral potpourri. ";
    ];

ScenicPlantObject orchids "orchids" Valley
with 
    name 'flower' 'flowers' 'flowering' 'plant' 'plants' 'orchid' 'orchids',
    article "some",
    description "A myriad of beautiful orchids display a rich set of vibrant
    colors -- white, pink, magenta, purple, red, yellow, gold, blue.
    Their flowers come in all shapes --  oblong, slender, conical and cruciform
    are just some of the shapes I can identify. ",
    before [;
        Take:
            print_ret "As beautiful as they are, I did not come equipped for a
            horticulture expedition. ";
    ];

! [ ---------------------------------------------------------------- Waterfall ]
JungleRoom Waterfall "Waterfall"
with
    description [;
        if (self hasnt visited) {
            print "I cross the rope bridge safely and arrive at a serene sight: ";
        }
        "Water cascades down into a clear pool, where a fine mist is circulating.
        A vivid rainbow shines through the dancing spray. ";
    ],
    before [;
        Listen:
            "I hear the splashing sound of the cascading water. ";
        Swim:
            <<Enter waterfall_pool>>;
    ],
    n_to alcove_door,
    w_to bridge_way,
    s_to temple_way;

Object "mist"
with 
    name 'mist' 'rainbow',
    description "The vibrant rainbow floats motionless above the pool. ",
    found_in Waterfall,
    before [;
        Examine: ;
        default: "It is intangible, just like my dreams. ";
    ],
    has scenery;

ScenicWaterObject waterfall_cascade "cascading water" Waterfall
with
    name 'waterfall',
    description "The source is from somewhere up above,
    the water splashes into the pool. ",
    before [;
        Search:
            if (alcove_door notin Waterfall) {
                move alcove_door to Waterfall;
                Achieved(SCORE_FIND_ALCOVE);
                "I lean into the narrow space behind the cascading
                water and see an alcove behind the waterfall. ";
            } else {
                "I see the alcove behind the cascading water. ";
            }
    ];

ScenicWaterObject waterfall_pool "clear pool water" Waterfall
with
    name 'clear' 'pool' 'water',
    description "The pool is clear with a rainbow floating above it. ",
    before [;
        Search:
            "The water is clear, there is nothing of interest in the pool. ";
        Enter:
            "I would rather not, the water is probably cold anyway. ";
        Touch:
            "The water is cold. ";
    ];

Object wood_stool "stool"
with 
    name 'stool' 'chair' 'log',
    description [; 
        print_ret "It is a piece of log used as a makeshift stool, ", (A) boatman,
        " is sitting on a similar log, next to a fire. ";],
    before [;
        Enter:
            deadflag = 2;
            print "I sit down with ", (A) boatman, " to a delightful fish 
            and yam dinner, while I recount my adventure. ", (A) boatman, 
            " then tells me stories about his family and other legends of
            Papua New Guinea, while I take notes in my journal about 
            his tales. ";
            PrintWinWording();
    ],
    has supporter;

! [ ========================================================== Doors & Bridges ]
! [ For auxiliary objects the player can enter to travel between rooms ]

! Way to the jungle path
DoorWay jungle_path_way "jungle path"
with
    name 'jungle' 'path',
    description "It is a narrow path through the dense jungle. ",
    found_in Clearing Shore,
    door_to JunglePath,
    door_dir [;
        ! east from the Clearing
        if (self in Clearing) return e_to;
        ! north from the Shore
        return n_to;
    ];

! Way to the river shore
DoorWay shore_way "river shore"
with
    name 'river' 'shore',
    description "I see the river shore that way. ",
    article "the",
    found_in JunglePath,
    door_to Shore,
    door_dir s_to;

! Way to the Clearing
DoorWay clearing_way "clearing in the jungle"
with
    name 'clearing',
    description "It looks like the dense jungle opens up over there. ",
    found_in Bungalow JunglePath Valley,
    door_to Clearing,
    door_dir [;
        ! Return the direction this way is in
        if (self in JunglePath) return w_to;
        if (self in Valley) return s_to;
        return n_to;
    ];

! Way to the Bungalow (from both the Clearing and the Garden)
DoorWay bungalow_way "hut"
with
    name 'structure' 'hut' 'building' 'bungalow',
    description "From this distance, the walls of the small structure seem to be
    made of clay and mud, there is no roof and the general appearance of the hut
    gives me the impression it's abandoned. ",
    obvious_way true,
    found_in Clearing Garden,
    door_to Bungalow,
    door_dir [;
        ! south from the clearing
        if (self in Clearing) return s_to;
        ! northeast from the garden
        return ne_to;
    ];

! Way to the Garden.
DoorWay garden_way "garden"
with
    name 'garden',
    description "I see a section of garden beyond the doorway. ",
    door_to Garden,
    found_in Bungalow,
    door_dir sw_to;

! Way to the Valley
! Moved to Clearing when looking NE from TreeTop
DoorWay valley_way "valley"
with
    name 'valley',
    description "I can't see the valley from here, but the way leads there. ",
    door_to Valley,
    door_dir ne_to;

! Connect the inside of the Tomb with the Waterfall
DoorWay tomb_stairs "stairs"
with
    name 'stair' 'stairs',
    article "some",
    description "Carved out of the stone, they lead up. ",
    found_in Tomb,
    door_dir u_to,
    door_to Waterfall;

! Connect the Waterfall with the Tomb via an Alcove
RockDoor alcove_door "alcove"
with
    name 'alcove',
    initial "There is an alcove through the cascading water, to the North. ",
    
    description [ torch;
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "It appears to lead underground, but it is pitch black in
            there, I can't make out where it leads. ";
        if (torch hasnt light)
            print "It is pitch black in there. If only my torch was lit.^";
        if (torch has light)
            print "I see a passage beyond the alcove, it leads under ground.^";
    ],

    door_to [ torch;
        if (self notin Waterfall)
            "That way is the waterfall -- I don't need a shower right now. ";
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "I would rather not enter without a light. ";
        if (torch hasnt light)
            "It is pitch black in there. If only my torch was lit. ";
        print "I steady my torch and head down the dark passage.^";
        return Tomb;
    ],
    
    door_dir n_to,
    
    before [;
        Search:
            <<Examine self>>;
    ],

    after [;
        Whip:
            print_ret "*SNAP* *snap* *snap* ";
    ],

    has ~scenery;

! Connect the Cliff and Waterfall with a Bridge.
DoorWay bridge_way "rope bridge"
with
    name 'rope' 'bridge',
    description "The bridge is made from plait ropes. ",
    obvious_way true,
    found_in Cliff Waterfall,
    door_to [;
        if (player has burdened) {
            "I can't go that way while carrying this heavy thing. ";
        }
        ! Random chance of falling down.
        ! We limit this deadly action to only occur once.
        ! To allows this to happen repeatedly uncomment the "Reset puzzle state"
        ! line in DeadlyDrop.
        if (DeadlyDrop.turn_count==0 && random(2)==1) return DeadlyDrop;
        if (self in Cliff) return Waterfall;
        return Cliff;
    ],
    door_dir [;
        if (self in Cliff) return e_to;
        return w_to;
    ];

! Connect the Valley and the Cliff with the Stone Steps.
DoorWay stone_stairs "stone stairs"
with
    name 'stone' 'stairs' 'steps' 'hill' 'staircase',
    article "some",
    description "The individual steps are carved from stone and laid out to form
    a staircase on the hill. ",
    found_in Valley Cliff,
    door_to [;
        ! Return where this way leads
        if (self in Valley) return Cliff;
        if (self in Cliff) return Valley;
    ],
    door_dir [;
        ! Return the direction this way is in
        if (self in Valley) return u_to;
        if (self in Cliff) return d_to;
    ],
    before [;
        ! Allow climbing the steps to go their way
        Climb:
            <<Go (self.door_dir())>>;
    ];

! Ways to the Temple
DoorWay temple_way "temple"
with
    name 'temple' 'building',
    description [;
        if (location == Waterfall) {
            "The temple is about three times the height of a man, it is
            built from stone blocks, and seems partially swallowed by
            vines and plant growth. An opening in the stone serves as a door. ";
        }
        if (location == JunglePath) {
            "The temple is too far to see from here. ";
        }
    ],
    obvious_way true,
    found_in [;
        if (location == Waterfall) return Waterfall;
        ! Only in the JunglePath if the Temple has been visited
        if (location == JunglePath && Temple has visited) return JunglePath;
    ],
    door_to [;
        if (location == Waterfall) return Temple;
        if (location == JunglePath) return Temple;
    ],
    door_dir [; ! Only used for ENTER actions
        if (self in Waterfall) return s_to;
        if (self in JunglePath) return n_to;
    ];

! Way to the Tribe
DoorWay tribe_path "foot path"
with
    name 'foot' 'path' 'footpath',
    description "The path winds through the jungle and I can't see where it 
    leads, but it seems regularly used as the surrounding foliage is cut away 
    to make walking on the path easier. ",
    found_in Valley Tribe,
    door_to [;
        if (location == Valley) {
            return Tribe;
        }
        return Valley;
    ],
    door_dir [;
        if (location == Valley) return e_to;
        return w_to;
    ];

! [ ================================================================ Debugging ]
#ifdef DEBUG;
! These portals provide a way to quickly jump to locations in our spec scripts.
ScenicRockObject warpto_clearing Clearing with name 'clearing' 'portal';
ScenicRockObject warpto_cliff Cliff with name 'cliff' 'portal';
ScenicRockObject warpto_garden Garden with name 'garden' 'portal';
ScenicRockObject warpto_bungalow Bungalow with name 'bungalow' 'portal';
ScenicRockObject warpto_valley Valley with name 'valley' 'portal';
ScenicRockObject warpto_waterfall Waterfall with name 'waterf' 'portal';
ScenicRockObject warpto_tomb Tomb with name 'tomb' 'portal';
ScenicRockObject warpto_tribe Tribe with name 'tribe' 'portal';
ScenicRockObject warpto_shore Shore with name 'shore' 'portal';
! Some useful items used in test specifications
Object debugger_wand "Wizard's Wand" with name 'wizard' 'wand' has light;
#endif;

! [ ================================================================== Grammar ]

Include "DrHelpRoutines";
Include "DrHints";
Include "Grammar";

! [ Extend Grammar ----------------------------------------------------------  ]

! Print help when trying to "go up the noun".
[ GoUpDownNounSub;
    print "To go up or down ", (the) noun, " type ~go up~ or ~go down~. 
        To climb ", (the) noun, " type ~climb ", (name) noun, "~^";
];

Extend 	'go'		* 'up'/'down' noun				 -> GoUpDownNoun;
Extend 	'climb'		* 'up'/'down' noun				 -> GoUpDownNoun;

! Print help when trying to "talk to noun"
[ TalkToNounHelpSub;
    "Conversations have two forms: asking someone something, and telling them 
    something. Try ASK ", (the) noun, " ABOUT THE JUNGLE, or SAY HI. 
    For more help on talking, type HELP TALKING. ";
];
Verb    'talk'      * 'to' noun                     -> TalkToNounHelp;

! Shake, Strike is a synonym for attack
Verb    'shake' = 'attack';
Verb    'strike' = 'attack';

! Alternate forms to TIE thing ON/AROUND 
Extend 'tie' * held 'on' held -> Tie;
Extend 'tie' * held 'around' held -> Tie;

! Add a synonym for search, as "look behind the noun".
! The default rules does not have "look behind".
[ LookBehindSub;
    <<Search noun>>;
];
Extend    'look'      * 'behind' noun                 -> LookBehind;

! Add additional syntax to allow SEARCH IN the... (the default grammar does not
! recognize the "in" keyword)
Extend    'search'    * 'in' noun                     -> Search;

! Provides a help verb when trying to "use noun".
! Individual objects implement a Use action to describe their usage.
[ UseSub;
    ! Run any intercepted object actions
    if (AfterRoutines()) return;
    ! Default response
    "Begin the sentence with a Verb.^";
];
Verb    'use'       * noun                          -> Use;

! Provides a "Dip" synonym for inserting things.
! Note that dipping implies insert something into the *parent* of the thing.
[ DipSub;
    if (second has container)
        <<Insert noun second>>;
    else
        <<Insert noun parent(second)>>;
];
Verb    'dip'       * noun 'in'/'into' noun         -> Dip;

! Provides a Whip verb.
[ WhipSub;

    if (bullwhip notin player)
        "Not without my bullwhip. ";

    if (noun in player)
        "I could hurt myself. ";

    if (noun == player)
        "I am not into that kind of thing. ";

    if (noun ofclass NonPlayerCharacter)
        <<Attack noun>>;

    if (parent(noun) ofclass NonPlayerCharacter)
        <<Attack noun>>;

    ! if (children(player) > 1)
    !     "You need your hands free to use the whip effectively.";
    
    ! Whipping succeeded, frighten the monkey if it is nearby
    monkey_frighten();

    ! Test if any custom after routines are handled.
    if (AfterRoutines()) return;

    ! Default response
    "I crack the whip at ", (the) noun, " -- *SNAP* ";

];
Verb 'whip' * noun -> Whip;

! Add a NOTES verb that consults the journal directly.
[ NotesSub;
    if (journal in satchel) {
        <Take journal>;
    }
    if (journal in player) {
        <<Consult journal>>;
    }
    else {
        "I don't have my journal on me. ";
    }
];
Verb 'notes'     * 'on' topic   -> Notes
                 * 'about' topic-> Notes
                 * topic        -> Notes;
Verb 'note' = 'notes';
Verb 'j' = 'notes';