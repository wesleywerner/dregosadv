!% -SDX

! For those interested, the Maro River starts in the Arafura Sea, Indonesia,
! at coordinates 8°28'03.0"S 140°21'20.8"E

Release 1;
Serial "200410";

Constant Story "Dr Ego and the Egg of Man-Toomba";
Constant Headline
            "^An Interactive Fiction Story
             ^by Special Agent.^";

! Show the time instead of the turn number
Statusline time;

! Mention to dead players that they can UNDO the last action.
Constant DEATH_MENTION_UNDO;

! Maximum score possible
Constant MAX_SCORE = 10;

! Points for visiting a room or taking an item with the "scored" attribute.
Constant OBJECT_SCORE 1;
Constant ROOM_SCORE 1;

! The time which this story begins (60 * HH + mm)
Constant StoryStartTime 900; ! 15:00

! The number of turns to pass until the canoe ride ends
Constant TurnsInCanoe 12;

! When going to undefined direction while in a JungleRoom, the player gets lost.
! Reading the compass returns them back on track, but if the player lost
! the device or does not use it, these are the odds of finding their way back:
! 1 in OddsOfFindingWayWhenLost.
Constant OddsOfFindingWayWhenLost 16;

! Show the option to list AMUSING things you can try (at the End of the story)
Constant AMUSING_PROVIDED;

! Custom Attributes
Attribute is_torch;
Attribute wet;
Attribute oily;

! Hide status line for debug builds.
! This streamlines the diffs used by unit tests.
#ifdef DEBUG;
[DrawStatusLine;];
#endif;

Include "Parser";
Include "VerbLib";

! [ ================================================================ Atributes ]

! Applied to NPCs to indicate an active state of interest in the player.
Attribute curious;

! [ =========================================================== Custom Actions ]

! A new verb to use the bullwip.
[ WhipSub;

    if (bullwhip notin player)
        "Not without your bullwhip.";

    if (noun in player)
        "You could hurt yourself.";

    if (noun == player)
        "You are not into that kind of thing.";

    if (noun ofclass NonPlayerCharacter)
        <<Attack noun>>;

    if (parent(noun) ofclass NonPlayerCharacter)
        <<Attack noun>>;

    ! if (children(player) > 1)
    !     "You need your hands free to use the whip effectively.";
    
    ! Whipping succeeded, frighten the monkey if it is nearby
    monkey_frighten();

    ! Test if any custom after routines are handled.
    if (AfterRoutines()) return;

    ! Default response
    "You crack the whip at ", (the) noun, " -- *SNAP*^";

];
Verb 'whip' * noun -> Whip;

! Provides a help verb when trying to "use noun".
! Individual objects implement a Use action to describe their usage.
[ UseSub;
    ! Run any intercepted object actions
    if (AfterRoutines()) return;
    ! Default response
    "Begin your sentence with a Verb.^";
];
Verb    'use'       * noun                          -> Use;

! [ ================================================================= Routines ]

[ Initialise;

    ! Set the clock and turn progression rate
    SetTime(StoryStartTime, 1);

    ! Set the timer on the canoe
    StartTimer(canoe, TurnsInCanoe);

    ! Set the starting location
    location = canoe;

    ! Move objects to their starting places
    move canoe to River;
    move boatman to canoe;
    move monkey to fig_tree;
    move banana to garden_trees;
    move pumpkin to Garden;
    move crowbar to bungalow_rubble;
    move cloth to bungalow_rubble;
    move torch_of_wood to jungle_scenery;
    move torch_of_bone to Temple;
    
    ! Start Daemons
    StartDaemon(monkey);

    ! enable debugging actions:
    #ifdef DEBUG;
      ! allow skipping the long boat ride with GO FASTER
      move canoe_hasten to River;
    #endif;

    ! Give player inventory
    move lodestar to player;
    move bullwhip to player;
    move journal to player;
    move matchbook to player;

    ! Give the player a name and description
    player.short_name = "Dr Ego";
    player.description = "You are Dr Ego, Purveyor of Curiousities,
                            Explorer of Treasures, Adventurous Archeologist.";

    ! Print the preface text (for non debug builds)
    #ifndef DEBUG;
    print_ret "^April 10th, 1940.
            ^^Your journey started a few days ago after
            docking at Port Moresby, from there it was two day's ride on
            the back of a truck to Kerema, followed by a small aircraft
            flight and landing near the mouth of the Maro River.
            ^^You met your guide and his canoe, who will take you up-river
            to your final destination -- a remote and relatively uncharted
            area in New Guinea -- to find the legendary ", (name) golden_egg;
    #endif;
];

! Remember the last known location of the player, before they get lost
! in the jungle, and return the player to this good location when they
! find their way back.
Global last_known_location = 0;

! Print out amusing things to try (only available after game is won).
[ Amusing;
    print_ret "Here are some strange and fun things that you can try
            (if you haven't already):^
            ^1) Whip the water while in the canoe.
            ^2) Get lost in the jungle, then look at your compass.";
];

[ PressAnyKey k; @read_char 1 -> k; return k; ];

! Test if the player is carrying an item with is_torch.
! Get a torch object carried by the player.
[ GetPlayerTorchObject n;
    objectloop (n in player && n has is_torch)
        return n;
    return false;
];

! [ ================================================================== Classes ]

Class IndoorRoom
with
    cant_go "You bump into the stone wall. Ouch!";

Class OutdoorRoom
    has light;

! The jungle room allows the player to "get lost" for a little while, but
! they always find their way back to the last known location.
! The LostInJungle object handles returning the player back safely.
Class JungleRoom
    class OutdoorRoom
    with
        ! Get lost when going in undefined direction
        n_to LostInJungle,
        nw_to LostInJungle,
        ne_to LostInJungle,
        s_to LostInJungle,
        sw_to LostInJungle,
        se_to LostInJungle,
        e_to LostInJungle,
        w_to LostInJungle,
        ! Record the last known good location
        after [;
            Go:
                if (location ~= LostInJungle)
                    last_known_location = location;
        ];

Class NonPlayerCharacter
with
    life [;
        Attack:
            print_ret "You are not fond of hurting other living things.";
    ];

Class HumanNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "You think human trafficing is deplorable.";
        ],
    has animate;

Class AnimalNPC
    class NonPlayerCharacter
    with
        before [;
            Take:
                print_ret "You think animal trafficing is deplorable.";
        ],
    has animate;

! A class that prevents the player from taking what isn't theirs.
Class NotYourPropertyObject
    with
        before [;
            Take:
                print_ret (The) noun, " is not yours to take.";
        ];

! Tools the player would consider essential, cannot be dropped by default.
Class EssentialObject
    with
        article "your",
        before [;
            Drop, ThrowAt:
                print_ret "You would not dream of leaving ",
                            (a) noun, " behind.";
            Taste, Eat:
                print_ret (A) noun, " is not food.";
        ];

! Provides the scenery attribute
Class ScenicRockObject
with
    before [;
        Take:
            if (noun has pluralname)
                print_ret (The) self, " are way too large and heavy to move.";
            else
                print_ret (The) self, " is way too large and heavy to move.";
    ],
has scenery static;

Class RockDoor
with
    before [;
        Take:
            if (noun has pluralname)
                print_ret (The) self, " are way too large and heavy to move.";
            else
                print_ret (The) self, " is way too large and heavy to move.";
    ],
has scenery static door open;

! An object that reveals its children when searched.
! The search_lead property prints when the search is actioned
! and search_concludes prints after the items are listed.
! The auto_take flag will move the discovered items to the player, otherwise
! the items are moved to the location of parent.
! The object itself cannot be taken, but hints at it hiding something.
Class SearchableObject
with
    search_lead "You find ",
    search_concludes "",
    auto_take false,
    before [;
        Take:
            if (child(self))
                "You don't want ", (the) self, ", but perhaps it hides
                some other things that may be of use.";
            else
                "You don't want ", (the) self, ".";
        Search:
            ! we have no children to give
            if (child(self)==nothing) 
                print_ret "You find nothing in ", (the) self, ".";
            ! list the things inside us
            print (string) self.search_lead;
            WriteListFrom(child(self), ENGLISH_BIT);
            print ". ", (string) self.search_concludes, "^";
            ! move them into scope
            while (child(self)) {
                if (self.auto_take)
                    move child(self) to player;
                else
                    move child(self) to parent(self);
            }
            return true;
];

Class ScenicWaterObject
with
    before [;
        Take, Drink:
            "You cup your hand and take some of ", (the) self, 
            ". You feel refreshed.";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicTreeObject
with
    before [;
        Take:
            print_ret (The) self, " is too firmly rooted in the earth.";
    ],
has scenery static;

! Provides the scenery attribute
Class ScenicPlantObject
with
    before [;
        Take:
            print_ret "You have no need for ", (the) self, ".";
    ],
has scenery static;

! Something edible
Class EdibleFruitObject has edible;

! Can be STRIKED to make sparks.
Class SparkThrowerObject;

! A metal object is required to strike sparks on a SparkThrowerObject
Class MetalObject;

! A long straight object that can be made into a torch.
! The material property describes what the torch is made of.
Class TorchBaseObject 
with

    ! The default material that makes this object.
    ! This value should be set on instances.
    material "nondescript",
    
    ! The torch can be made of multiple things, display the material which
    ! this torch is made of, in the display name.
    short_name [;
        if (self has is_torch) {
            print (string) self.material, " torch";
            return true;
        }
        else
            rfalse;
    ],
    
    before [;
        Burn:
            if (self has light)
                "", (The) self, " is already lit.";
            if (self notin player)
                <Take self>;
            if (second == nothing)
                "(You need to say what you want to light ", (the) self, " with).";
            if (~~second ofclass SparkThrowerObject)
                "You can't light ", (the) self, " with that.";
            if (second has wet)
                "", (The) second, " is wet, you fail to light ", (the) self, ".";
            if (self hasnt oily)
                "", (The) self, " fails to burn -- The wick needs some kind of fuel.";
            give self light;
            print_ret "You strike ", (the) second, " and sparks fly onto the wick,
            they catch and a small flame appears -- gradually the flame grows
            until it covers the wick.";
    ],
    
    ! Describe the wick tied to this object, if any.
    after [;
        Examine:
            if (self has is_torch)
                print_ret "A crude wick is tied to the one end.";
        Take:
            "You take ", (the) self, ".";
    ],
    
    has;

! A material that acts as a wick
Class TorchWickObject
with
    before [;
        PutOn:
            if (second ofclass TorchBaseObject) {
                print_ret "Perhaps you meant to TIE ", (the) self, " around ", (the) second, ".";
            }
        Tie:
            ! Remove this wick when tying it on a TorchBase.
            ! Then change the torch's name and give it the torch attribute.
            if (second ofclass TorchBaseObject) {
                print "You wrap ", (the) self, " around ", (the) second, " to
                make a crude torch.^";
                remove self;
                give second is_torch;
                second.&name-->0 = 'torch';
                return true;
            }
    ];

! A substance that acts as fuel for a torch.
Class TorchFuelObject
with
    before [;
        Take:
            "You'd rather keep ", (the) self, " in it's container.";
    ],
    each_turn [n ;
        ! cover other objects in oil if they are in the same parent as us
        objectloop(n in parent(self)) {
            if (n ~= self && n hasnt oily) {
                give n oily;
                print (The) n, " is now covered in a film of oil.";
                if (n ofclass TorchBaseObject) score = score + 1;
                if (~~n ofclass TorchBaseObject) print " This is a fine mess.";
            }
        }
    ];

! Items that can be taken and are used to solve some of the puzzles.
Class UsefulObject;

! [ ================================================================== Objects ]

!
EdibleFruitObject banana "banana"
with
    name 'banana' 'bananas',
    whip_count 0,
    eaten false,
    description [;
        if (parent(self) == garden_trees)
            print_ret "A bunch of wild bananas hang from the top of the tree.";
        else
            print_ret "It is a wild banana with a bright green and yellow skin.";
    ],
    before [;
        Take:
            if (parent(self) == garden_trees)
                print_ret "The bananas are way up in the tree, out of reach.";
        Eat:
            if (self.eaten)
                print_ret "You have had your fill of bananas.";
        Whip:
            <<Whip garden_trees>>;
    ],
    after [;
        Eat:
            move banana to garden_trees;
            banana.eaten = true;
            print_ret "You peel the banana and take a bite, the fruit is
            firm and sweet with a subtle flavor. You finish eating the rest
            of the delicious fruit - You feel revitalised.";
    ];

! Also see the custom 'WhipSub' action.
EssentialObject bullwhip "bullwhip"
    with
        name 'bullwhip' 'whip',
        description "A leather whip made of braided strips, you can use it to
                    WHIP SOMETHING to grab items out of reach, or to grip a
                    fixture to swing and pull yourself over short distances.",
    before [;
        Use:
            print_ret "Start your sentence with WHIP, like WHIP THE TREE.";
    ];

!
Object canoe "canoe"
with
    name 'boat' 'canoe' 'oar',

    ! Room Description when outside the canoe
    initial [;
        print_ret (A) boatman, " sits in the canoe gazing out over the
        moving river, the salty water gently lapping the sides of his
        craft.";
    ],

    description "It is a small wooden canoe, it looks hand built.
    A fishing spear lies inside the boat.",
    
    before [;

        ! Prevent the player from exiting the craft before it has shored.
        Go, Exit:
            if (parent(canoe) == River) {
                print "~We will reach your destination soon enough~ ",
                        (the) boatman, " says with a wide grin.^";
                return 2;
            }

        ! Prevent the player from re-entering the craft.
        Enter:
            if (player in canoe)
                print_ret "Did you forget, you are already in the canoe.";
            else
                print_ret "You just got out, and you are eager to start
                            looking for ", (the) golden_egg, ".";
    ],

    ! Print flavor text during the trip in the canoe
    each_turn [;
        if (self.time_left == 2 && location == River)
            print_ret "^~We are almost there, ", (a) player, "~, ",
                        (a) boatman, " says.";
    ],

    ! Initialise TurnsInCanoe timer to 0
    time_left,

    ! called when TurnsInCanoe timer expires
    time_out [;
        if (location == River) {
            ! The "1" parameter moves player silently
            ! so that we can reposition the canoe then call look.
            ! DM4 pg 21
            PlayerTo(Shore, 1);
            move canoe to Shore;
            move player to canoe;
            print "^~Here we are~, ", (a) boatman,
                    " says -- the canoe comes to a stop on the shore.^";
            <<Look>>;
        }
    ],
    has   enterable static container open;

! A debug-only object that provides the GO FASTER command to skip the ride.
#ifdef DEBUG;
Object canoe_hasten
    with
        name 'faster',
        before [;
            Enter:
                canoe.time_left = 0;
                print_ret "You hasten your journey.";
        ],
    has scenery enterable;
#endif;

TorchWickObject cloth "strip of canvas"
with 
    name 'cloth' 'canvas',
    description "A strip of canvas cloth the length of your arm, it seems pretty
    old since it is a pale dirty white.";

MetalObject crowbar "crowbar"
with
    name 'crowbar' 'bar',
    description "A multi-purpose short metal rod, a little rusted but it
    works all the same.";

!
ScenicTreeObject fig_tree "fig tree"
with
    name 'fig' 'tree' 'ficus',
    description [;
        print "The fig tree, also known as Ficus Obliqua, is taller than 
            most of the surrounding jungle.";
        if (location == Clearing)
            print " The view from up there must be great.";
        print "^";
    ],
    found_in Clearing TreeTop,
        
    ! climb fig_tree => go up
    before [;
        Climb:
            if (location == Clearing)
                <<Go u_obj>>;
            if (location == TreeTop)
                <<Go d_obj>>;
    ],
    has container open light;

!
Object fish "fish"
with
    name 'fish',
    initial "A fish flops around inside the canoe.",
    description "It looks like a black bass.",

    ! Tracks if the fish was caught
    caught false,

    ! try catch the fish with the whip
    try_catch [;
        if (self notin canoe && self.caught == false) {
            move self to canoe;
            self.caught = true;
            print_ret "*SNAP* -- As you crack the whip into the water
                    you snag a fish!
                    ~Mogillo!~ ", (a) boatman, " shouts excitedly.
                    ~What are the chances!~";
        }
    ],

    before [;
        Take: print_ret "You decide to leave the fish for ",
                (a) boatman, ".";
    ],

    after [;
        Insert:
            if (second == river_water) {
                print_ret "You put the fish back into ", (the) river_water,
                            ". ~Ai, there goes supper~ ",
                            (a) boatman, " says.";
            }
    ],

    each_turn [;
        if (self in canoe && random(3) == 1) {
            print "^A fish flops around inside the canoe.^";
        }
    ];

!
NotYourPropertyObject fishing_spear "fishing spear"
with
    name 'fishing' 'rod' 'spear' 'kalawai',
    description "A traditional fishing spear made from wood, it has three
    metal prongs at the business end.",
    found_in canoe,
    has scenery;

!
SparkThrowerObject flint_stone "flint"
with
    name 'flint' 'stone' 'metallic' 'blue' 'glint',
    initial "A metllic blue glint catches your eye.",
    description [;
        if (self has moved)
            "A piece of flint stone, it can be sued to make sparks and create a
            flame.";
        else
            "The glint is coming from a stone on the ground.";
        ],
    found_in [;
        if (GetPlayerTorchObject())
            return Waterfall;
    ],
    before [;
        Use:
            print_ret "It's a stone, not a zippo. Try LIGHT TORCH.";
    ],
    after [;
        Take:
            if (self hasnt moved)
                print_ret "You pick up the stone, it is a piece of flint.";
    ];

!
ScenicPlantObject garden_trees "fruit trees"
with
    name 'fruit' 'cherry' 'tree' 'trees',

    description "You see a cherry tree but it is not bearing any fruit, the
    banana tree next to it however has a bunch of fruit.",
    
    found_in Garden,

    before [;
        Whip:
            if (parent(banana) ~= garden_trees)
                print_ret "You don't need another banana right now.";
    ],
    after [;
        Whip:
            move banana to Garden;
            banana.whip_count = banana.whip_count + 1;
            switch (banana.whip_count) {
                1: print_ret "You take careful aim at the bunch of bananas
                up in the tree, swing your arm in a smooth arch and *SNAP*
                -- a single banana drops to the ground.";
                2: print_ret "*SNAP* -- Another banana drops to the ground.
                Years of using your whip is finally paying off.";
                default: print_ret "*SNAP* -- You deftly whip a banana off
                the tree.";
            }
    ],
    has supporter;

! The prized treasure you are looking for.
Object golden_egg "Golden Egg of Man-Toomba"
    with
        name 'gold' 'golden' 'egg',
        description "It shimmers with golden light.";

!
EssentialObject journal "journal"
    with
        name 'diary' 'journal' 'book',
        description "It is your journal filled with your research notes.
        You can ~look up <any topic> in journal~ or ~read about <any topic> in
        journal~, or ~consult journal about <any topic>~.",
    before [w1 w2;
        Consult:
            ! forward the word marker to the first word in the consult topic.
            wn = consult_from;
            w1 = NextWord();
            w2 = NextWord();
            if ((w1=='air' && w2 =='terjun') || (w1=='terjun'))
                "You find the entry in your journal about air terjun, and learn
                that it mean ~behind the waterfall~.";
        Use:
            <<Examine self>>;
    ];

! Scenic jungle when on the River
Object jungle_distant_scenery "jungle"
with
    name 'jungle' 'foliage' 'plant' 'plants' 'bush' 'brush' 'shrub',
    description "The jungle foliage is dense and lush.",
    found_in River,
    has scenery;

! The jungle is visible in all JungleRooms
SearchableObject jungle_scenery "jungle"
    with
        name 'jungle' 'foliage' 'plant' 'plants' 'bush' 'brush' 'shrub',
        description "The jungle foliage is dense and lush.",
        auto_take true,
        found_in [;
            return (location ofclass JungleRoom);
        ],
        before [;
            Attack:
                print_ret "You shout and wave your fist at ", (the) self;
        ],
    has scenery;

! The word "compass" is a reserved keyword in Inform, as such we use "lodestar"
! to identify the object as it lives in the player's inventory.
! The literal, albeit archaic, meaning of "lodestar" is "a star that leads or
! guides; especially : the North Star." (The first half of the word derives from
! the Middle English word "lode," meaning "course.") Both the literal and the
! figurative sense ("an inspiration or guide") date back to the 14th century, the
! time of Geoffrey Chaucer. The literal sense fell out of use in the 17th century,
! and so, for a while, did the figurative sense - but it appeared again 170 years
! later, when Sir Walter Scott used it in his 1813 poem The Bridal of Triermain.
EssentialObject lodestar "compass"
with
    name 'compass',

    ! display a random description
    rnd_no 0,

    ! one-time bonus point when using the lodestar to navigate while lost.
    used_scored false,
    
    ! Track if the compass has been dropped before
    has_dropped false,

    description [;
    
        ! Test for posession
        if (self notin player) print_ret "You do not have ", (a) self, ".";

        ! Return the player to the last known good location
        if (location == LostInJungle) {
            if (~~self.used_scored) {
                self.used_scored = true;
                score = score + 1;
            }
            print "^", (A) self, " guides you back to safety.^";
            ! parameter "2" honors brief room descriptions - DM4 pg 21
            PlayerTo(last_known_location, 2);
            return true;
        }

        ! Display a random text when examining this.
        self.rnd_no = random(5); ! 1..n
        switch (self.rnd_no) {
            1: print "You are exactly where you need to be.^";
            2: print "The needle points towards north.^";
            default:
                print (A) self, " helps you navigate while in the jungle.^";
        }

        ! The boatman notices your action.
        if (player in canoe && boatman.noticed_compass == false) {
            boatman.noticed_compass = true;
            print "^", (A) boatman, " notices ", (a) self, " -- ~My father
                        had one just like that~ he says.^";
        }
        
        ! The monkey notices your action
        if (~~ObjectIsUntouchable(monkey, true)) {
            print (The) monkey, " seems very interested in the device.^";
        }
        
    ],
    
    before [;
        Take, Remove:
            if (self in monkey) {
                if (parent(monkey) == location) {
                    print "When you approach the small critter it deftly 
                    moves out of your reach. ";
                    ! monkey_forget_about_food();
                    monkey_frighten();
                    monkey_speak(random(10));
                    print_ret "";
                } else {
                    print_ret "It is out of your reach.";
                }
            }
    ];

SparkThrowerObject matchbook "matchbook"
with 
    name 'match' 'matches' 'matchbook',
    description "A booklet of lucifer matches.",
    has wet;

!
Object pumpkin "pumpkin"
with
    name 'pumpkin' 'pumpkins',
    description "It is a small round and green pumpkin.",
    before [;
        Eat:
            print_ret "It looks delicious and fresh, but would be better served
            cooked.";
    ],
    after [;
        Take:
        if (self hasnt moved) {
            give self ~concealed;
            print_ret "You carefully break the stem and take the small round
            pumpkin.";
        }
    ],
    has concealed edible;

!
Object river_water "Maro River"
with
    name 'maro' 'river' 'water',
    article "the",
    ! TODO move this detailed description to an entry in the journal.
    description "The Maro river flows from north-east to south-west, into
                the Arafura Sea, it runs for over 200 km and is between 50 and
                900 m wide. The river is strongly tidal for most of its length
                and its lower reaches are affected by salt water. It is a
                complex system of swamps and oxbow lakes which hosts a large
                number of birds and reptiles.",
    found_in  River Shore,
    after [;
        Whip:
            return fish.try_catch();
    ],
    has container open scenery;

! The sky is visible in all outdoor areas.
Object sky "sky"
    with
        name 'sky' 'clouds' 'weather' 'sun',
        description "Rolling clouds move overhead.",
        found_in [;
            return (location ofclass OutdoorRoom);
        ],
    has scenery;

! A bone that can be made into a torch.
TorchBaseObject torch_of_bone "bone"
with
    name 'bone' 'bone' 'femur',
    material "bone",
    description "It is a part of a human leg, a femur bone.";

! A wooden stick that can be made into a torch.
TorchBaseObject torch_of_wood "stick"
with
    name 'wood' 'wood' 'stick',
    material "wooden",
    description "A wooden stick about the length of your arm.";
    
! [ ==================================================== Non Player Characters ]

! [ ------------------------------------------------------------------- Monkey ]
AnimalNPC monkey "monkey"
with
    name 'monkey',
    
    ! Hiding away counter
    fright_turns 0,
    
    ! First fright state
    first_fright true,
    
    ! When in the presence of a banana, take a few turns before taking it.
    reach_for_food_counter 0,
    
    initial [;
        print "There is a monkey here. ";
        if (lodestar in self)
            print "It has ", (a) lodestar, ".";
        print_ret "";
    ],
    
    description [;
        if (lodestar in self)
            print_ret "The small creature is fascinated by ", (a) lodestar, ".";
        else
            print_ret "It is a small grey monkey with big brown eyes. 
                It stares back at you.";
    ],
    
    life [;
        Ask, Answer, Tell:
            monkey_speak(random(10));
            print_ret "";
        Give:
            if (noun ofclass EssentialObject)
                print_ret "There is no way are you giving ", (a) noun, 
                " to ", (the) self, "!";
            else
                print_ret "You offer ", (the) noun, " to the small critter, 
                it pretends to ignore your good gesture.";
        Show:
            if (noun ofclass EdibleFruitObject)
                print_ret "The small monkey head swivels side-to-side as you
                wave ", (the) noun, ", showing it off. ", (The) self, "
                likes what it sees but looks hesitant to go near you.";
            if (noun ofclass EssentialObject)
                print_ret "It seems curious about ", (the) noun, ".";
        ThrowAt:
            if (noun ofclass EdibleFruitObject)
                print_ret "Maybe it would be better to just drop ", (the) noun,
                ".";
            else
                <<Attack self>>;
    ],
    
    orders [;
        Give:
            if (noun == lodestar) {
                monkey_speak(random(10));
                print_ret " it replies, gripping the device tightly.";
            }
    ],
    
    ! Monkey Movements
    ! TODO routinize monkey daemon
    daemon [look_item fruit;
    
        ! Move to the clearing if the player is in the tree
        if (self in fig_tree && location == TreeTop) {
            print "^The monkey is not impressed, it climbs down the tree.^";
            give self curious;
            move self to Clearing;
            return;
        }
        
        ! No action if not curious
        if (monkey hasnt curious) return;
        
        ! Flee when frightened
        if (self.fright_turns > 0 && monkey_near_player(true)) {
            move self to fig_tree;
            ! Print flavor text when monkey is frightened the first time
            ! from a whip action.
            if (self.first_fright && action == ##Whip) {
                self.first_fright = false;
                print "^The piercing sound startles ", (the) self, 
                ", it launches up into the air and ";
            } else {
                print "^", (The) self;
            }
            if (location == Clearing) {
                print_ret " scrambles up ", (the) fig_tree, ".";
            } else {
                print_ret " scrambles out of sight.";
            }
        }
        
        ! Rebuild confidence
        if (self.fright_turns > 0) {
            self.fright_turns = self.fright_turns - 1;
            return;
        }

        ! Climb down the tree
        if (self in fig_tree) {
            move self to Clearing;
            if (location == Clearing) {
                print_ret "^", (The) self, " climbs down from ", (the) fig_tree, ".";
            }
        }
    
        ! No action if the player is not nearby.
        if (~~monkey_near_player(false)) return;
        
        ! Scan for any edibles in the room
        fruit = nothing;
        objectloop(look_item in parent(self)) {
            if (look_item ofclass EdibleFruitObject)
                fruit = look_item;
        }
        
        ! If there is a fruit in reach
        if (fruit && parent(self) == parent(fruit)) {
            self.reach_for_food_counter = self.reach_for_food_counter + 1;
            print "^";
            switch (self.reach_for_food_counter) {
                1:  
                    print_ret (The) self, " stares at ", (the) fruit,
                    ", then glares at you, looks at the banana again,
                    smacking it's lips.";
                2:  
                    print_ret (The) self, " edges closer to ", (the) fruit,
                    " while keeping one eye on you.";
                3:  
                    print (The) self, " grabs ", (the) fruit, 
                    ", stuffing its face with the delicious fruit.";
                    if (lodestar in self) {
                        ! remove the fruit and return the player's posession
                        move fruit to garden_trees;
                        move lodestar to location;
                        ! climb back into the tree and reset counters
                        monkey_forget_about_food();
                        ! move self to fig_tree;
                        ! give self ~curious;
                        print_ret " It seems distracted and left ", 
                        (the) lodestar, " lying on the ground.";
                    }
                    print_ret "";
            }
        }
        
        ! Let the monkey do something when in the presence of the player
        if (parent(self) == parent(player)) {
            monkey_action();
        } else {
            ! When not with the player, follow the player.
            if (random(4) == 1) {
                ! Move to the player's location
                print (The) self, " appears nearby.^";
                move self to parent(player);
            }
        }    
    ],
    has transparent;

[monkey_forget_about_food;
    monkey.reach_for_food_counter = 0;
];

[ monkey_frighten;
    if (monkey_near_player(true)) {
        monkey.fright_turns = 4;
        ! Reset turn to reach for the banana
        monkey_forget_about_food();
    }
];

[ monkey_near_player same_room;
    if (same_room) {
        return parent(monkey) == parent(player);
    }
    else {
        ! Test the Player's location
        return location == Clearing || location == Bungalow 
            || location == Garden || location == JunglePath;
    }
];

[ monkey_action n;

    ! only some times
    n = random(100);
    if (n > 30) return;
    
    ! begin a new line
    print "^";
    
    ! The monkey has the compass and half the time
    if (lodestar in self && n > 15) {
        switch (n % 5) {
            0: print_ret (The) self, " stares at the moving needle on ", 
                (a) lodestar, ".";
            1: print_ret (The) self, " fidgets with ", (a) lodestar, ".";
            2: print_ret (The) self, " taps ", (a) lodestar, " on the ground.";
            3: print_ret (The) self, " bites on ", (a) lodestar, ".";
            4: print_ret (The) self, " sniffs ", (a) lodestar, ".";
        }
    } 
    else { ! The monkey does not have the compass, or the other half the time
        switch (n % 4) {
            0: print_ret (The) self, " scratches itself.";
            1: print_ret (The) self, " picks something off the ground, 
                and eats it.";
            2: print_ret (The) self, " makes grunting noises.";
            3: print_ret "~Ook ook~ says ", (the) self, ".";
        }
    }
];

! hoot, scream, howl, coo, rumble, bark, pant, grunt, whoop, screech, gibber.
[ monkey_speak n;
    switch (n % 8) {
        1: print "~*Coo*coo*~";
        2: print "~*Whoop*whoop*~";
        3: print "~*Howls*~";
        4: print "~*Pants*Grunt*~";
        4: print "~*Gibbers*~";
        6: print "~*Screech*~";
        7: print "~*Rumble*~";
        default: print "~*Grunts*~";
    }
];

! [ ------------------------------------------------------------------- Boatman ]
HumanNPC boatman
    with
        name 'guide' 'rom' 'man',
        article "your",
        short_name "guide",

        ! NPC noticed you examining your compass
        noticed_compass false,

        ! Hide the room description (in the boat you see your guide)
        ! TODO move desccriptions from rooms into here.
        initial [;
            return true;
        ],

        each_turn [;
            ! Only while on the River
            if (parent(canoe) == River && self in canoe)
                boatman_each_turn_action(random(10));
        ],

        description [;
            print "A native to Papua New Guinea, he seems to navigate
                    this river like he has done it for all his years.^";
            if (self hasnt proper) {
                print "^Perhaps you should SAY HI.^";
            }
        ],

        life [;
            Answer:
                return boatman_answers(noun);
            Ask:
                return boatman_ask(second);
        ],
;

[ boatman_ask second;
    switch (second) {
        'canoe', 'boat':
            print_ret "~I have the canoe for many years now, built it myself~, ",
                        (a) self, " says proudly.";
        'river', 'maro', 'water':
            print_ret "~The ancient waters of the Maro will swallow you whole if
                        you try to swim~, he says mournfully.";
        'father':
            print_ret "~He taught me how to build boats and how to fish...
                        taught me everything to live and survive out here~";
        'fishing', 'spear':
            print_ret "~We call that a Kalawai, good for catching dinner!~";
    }
    print_ret (The) self, " grins at you and nods.";
];

[ boatman_answers noun;
    switch (noun) {
        'hello', 'hi':
            if (self has proper)
                print_ret (A) self, " looks baffled at your repeated greeting,
                            but he obliges you with a big grin anyway.";
            else {
                print "You introduce yourself to ", (a) self, ". ^^~Nice to meet
                        you, ", (a) player, "~, he says with a grin, ~I am
                        Rompinjimp-Nanganbia Tiki~.^";
                boatman_rename();
                print "^~You can call me ", (a) self, "~, he adds.^";
                return true;
            }
        'bye', 'goodbye', 'cheers':
            if (location == River)
                print_ret "No need to say goodbye to ", (a) self, " before
                            you reach your destination.";
            if (location == Shore)
                print_ret "~Safe travels ", (a) player, ", I hope you find what
                            you are looking for!~, ", (a) self, " waves.";
    }
];

[ boatman_rename;
    boatman.short_name = "Rom";
    give boatman proper;
];

[ boatman_each_turn_action n;
    switch (n) {
        1, 3:
            print "^", (A) boatman, " paddles with the oar.^";
        5:
            if (fish in canoe)
                print "~We will have fish for dinner tonight~, ",
                    (a) boatman, " says hungrily.^";
        7:
            print "^", (A) boatman, " looks across the salty water,
                into the distance.^";
        9:
            if (random(2) == 1)
                if (boatman.noticed_compass == true)
                    print "^~I still have my father's compass...~, ",
                        (a) boatman, " reflects nostalgically.^";
    }
];

! [ ==================================================================== Rooms ]

! [ ----------------------------------------------------------------- Bungalow ]
OutdoorRoom Bungalow "Bungalow"
with
    description "You are inside a delapidated bungalow. The roof long since
    collapsed, it provides little protection from the elements.
    You see a clearing to the North
    and an exit to the Southwest.",
    cant_go "The only exits are North and Southwest.",
    n_to Clearing,
    sw_to Garden;

SearchableObject bungalow_rubble "rubble"
with 
    name 'rubble' 'detritus' 'junk' 'debris' 'roof' 'floor' 'bungalow' 'hut' 'room',
    found_in Bungalow,
    description "A pile of debris litters the floor, made up of chunks of roof thatching and
    broken remnants of furniture.",
    search_lead "You scrounge amid the rubble and disturb a giant centipede -
    The critter scurries out of sight. You continue your search and find ",
    search_concludes "You take them.",
    auto_take true,
    has pluralname;

! [ ----------------------------------------------------------------- Clearing ]
JungleRoom Clearing "In a Clearing"
with
    description [;
        if (self hasnt visited)
            print "You are in a natural clearing, the ground a part of a large
                bedrock providing some relief from the dense jungle. ";
        print "A large fig tree stands here proudly. ";
        if (monkey in fig_tree)
            print "A monkey sits in ", (the) fig_tree, ".";
        print "^^A jungle path is due East.
            A small structure is visible to the South. ";
        if (self.ne_to ofclass JungleRoom)
            print "Stone stairs are due Northeast.";
        print_ret "";
    ],
    e_to JunglePath,
    s_to Bungalow,
    u_to TreeTop,

    before [;
    
        ! climb up => go up
        Climb:
            if (noun == u_obj)
                <<Go noun>>;
        
        ! Describe climbing up the tree
        Go:
            if (noun == u_obj) {
                print "You climb up the strong branches of the fig tree.^";
            }
    ];

! [ -------------------------------------------------------------------- Cliff ]
JungleRoom Cliff "Cliff"
with
    description "You are on top of a cliff, a rope bridge crosses a deep gorge
    to the East. Stone steps lead down the hill.",
    d_to Valley,
    e_to rope_bridge;

! [ -------------------------------------------------------------- Deadly Drop ]
OutdoorRoom DeadlyDrop "Deadly Drop"
with
    description "",
    turn_count 0,
    before [;
        Whip:
            ! Whip the bridge to save yourself
            if (noun == rope_bridge) {
                ! Reset puzzle state
                ! self.turn_count = 0;
                print "You swing your whip and -- *SNAP* snag it on the 
                rope bridge. You dangle precariously, pulling yourself up
                to safety. That was a close call!^";
                playerTo(Waterfall);
                return true;
            }
        Take:
            if (noun == rope_bridge) {
                print_ret "You try grabbing at the bridge but you are too slow.";
            }
        Jump, JumpOver:
            print_ret "A rope bridge is a terrible place to decide to start jumping.";
    ],
    each_turn [;
        if (self.turn_count == 0) {
            print "You step on a rotten plank and it cracks under your weight,
            you lose your balance!^";
        }
        if (self.turn_count == 1) {
            print "You teeter the other way -- You are about to fall!^";
        }
        if (self.turn_count == 2) {
            deadflag = 1;
            print "^You plummet into the gorge below, cracking your head
            on a rocky outcropping, far down below. Weeks pass before the small
            search party discover your broken body. Luckily you did not suffer.
            ^^(If only you tried your WHIP)";
        }
        self.turn_count = self.turn_count + 1;
    ],
has light;

! [ ------------------------------------------------------------------- Garden ]
JungleRoom Garden "Garden"
with
    description "You stand in an unkempt garden, whoever kept this garden hasn't
    been here for a very long time. You see some vegetable plants and fruit
    trees. A hut is to the Northeast.",
    ne_to Bungalow;

ScenicPlantObject "vegetable plants" Garden
with
    name 'veg' 'vegetable' 'vegetables' 'plant' 'plants',
    description [;
        print "The vegetable plants in the garden have grown wild without
        anybody around to harvest them. ";
        if (pumpkin has concealed) {
            print "You notice a pumpkin on the ground, hiding under some large
            green leaves.";
        }
        print_ret "";
    ];

! [ -------------------------------------------------------------- Jungle Path ]
JungleRoom JunglePath "Jungle Path"
with
    description "Trees of all sizes and leaves of all shapes fill every
                available space of the jungle, this roughly cut path will
                be indistinguishable from the rest in a few months.
                ^^The river shore is back South, you notice a clearing
                in the jungle to the West.",
    w_to Clearing,
    s_to Shore;

! [ -------------------------------------------------------------- Lost Jungle ]
JungleRoom LostInJungle "Lost in the Jungle"
with
    description "You don't know where you are.",
    before [;
        Go:
            if (random(OddsOfFindingWayWhenLost) == 1) {
                print "^You happen to find your way back.^";
                ! parameter "2" honors brief room descriptions - DM4 pg 21
                PlayerTo(last_known_location, 2);
                return true;
            }
            else
                print_ret "You fumble through the jungle.";
    ];

! [ --------------------------------------------------------------- Maro River ]
OutdoorRoom River "The Maro River"
with
    description [;
        print_ret "You are in ", (a) canoe, " on the Maro river. ",
                    (A) boatman, " is with you, rowing the craft.";
    ];

! [ -------------------------------------------------------------- River Shore ]
OutdoorRoom Shore "River Shore"
with
    description [;
                if (player in canoe)
                    print_ret "The canoe has stopped ashore, you can get out now.";
                else
                    print_ret "You are on the river shore. A roughly cut path
                                leads North into the jungle.";
                ],
    n_to JunglePath;

! [ ------------------------------------------------------------------- Temple ]
IndoorRoom Temple "Temple"
with
    description "You are inside the stone temple, large openings in the ceiling
    provide ample natural light for you to see. The walls are covered in
    engraved glyphs.
    You hear water falling from the exit to the North.",
    n_to Waterfall,

    before [;
        Exit:
            ! Exit the temple
            <<Go n_obj>>;
        Go:
            if (noun == out_obj)
                <<Go n_obj>>;
    ],

    has light;

ScenicRockObject "glyphs" Temple
with
    name 'glyph' 'glyphs' 'symbol' 'symbols' 'wall' 'walls',
    description "The engravings cover all of the wall surfaces, your attention
    is drawn to a circular pattern in the glyphs as they converge and surround
    one large glyph -- You recognize this glyph as ~air terjun~.",
    before [;
        Take: "You can't take the glyphs as they are engraved into the stone.";
    ],
    has pluralname;

ScenicRockObject "glyphs" Temple
with
    name 'air' 'terjun',
    description "You may have some information about ~air terjun~ in your
    journal.",
    before [;
        Take: "You can't take the glyphs as they are engraved into the stone.";
    ];

Object urn "urn" Temple
with
    name 'urn',
    description "A clay vessel.",
    has container openable;

TorchFuelObject "oil" urn 
with 
    name 'oil',
    article "some",
    description "You are not sure what this was used for, but it distinctly oily.";

! [ -------------------------------------------------------------- Top Of Tree ]
OutdoorRoom TreeTop "Top of Tree"
with
    description [;
        if (self hasnt visited)
            print "The view from up here is breathtaking! ";
        print_ret "The vantage point allows you to see in all directions.";
    ],
    cant_go "The only way is down.",
    d_to Clearing,
    
    before [;
    
        Go:
            if (noun == d_obj && lodestar in player && ~~lodestar.has_dropped) {
                print "^As you descend you drop ", (a) lodestar, 
                    " to the ground below. CLINK!
                    ^^ --- more ---^";
                lodestar.has_dropped = true;
                move lodestar to monkey;
                PressAnyKey();
                return false;
            }
    
        Climb:
            ! climb down => go down
            if (noun == d_obj)
                <<Go d_obj>>;
        
        ! Look in directions
        Examine:
            if (noun == ne_obj) {
                Clearing.ne_to = Valley;
                score = score + 1;
                print_ret "There! Stone stairs up the hill, in the distance to ",
                    (a) noun, ".";
            }
            ! Any other direction gives a canned response.
            ! Note that we *must* test for CompassDirection here
            ! else the Examine intercept will catch examining nouns too.
            if (noun ofclass CompassDirection)
                print_ret "Only more jungle to ", (a) noun ;
    ];

! [ --------------------------------------------------------------------- Tomb ]
IndoorRoom Tomb "Underground Tomb"
with
    description "You are inside an ancient tomb, the light of your torch
        make engraved runes in the walls seem to dance all around you.
        A narrow stone staircase leads up.",
    has light;

! [ ------------------------------------------------------------------- Valley ]
JungleRoom Valley "Valley"
with
    description "You in a lush jungle valley, stairs carved out of stone
                lead up to the top. A path leads back South.",
    u_to Cliff,
    s_to Clearing,
    cant_go "The only ways out are South or Up (the stairs).";

! [ ---------------------------------------------------------------- Waterfall ]
JungleRoom Waterfall "Waterfall"
with
    description [;
        print "There is a beautiful waterfall here, the water cascades down
        from somewhere up above into the clear pool. ";
        if (self hasnt visited) print "A fine mist of water-spray fills the 
            space above the pool with a vivid rainbow. ";
        print_ret "A rope bridge is to the West.";
    ],
    n_to alcove_door,
    w_to rope_bridge,
    s_to temple_door;

ScenicWaterObject waterfall_cascade "cascading water" Waterfall
with
    name 'water' 'waterfall',
    description "TOFIX.",
    before [;
        Search:
            if (alcove_door notin Waterfall) {
                move alcove_door to Waterfall;
                score = score + 1;
                "You lean into the narrow space behind the cascading
                water and see an alcove behind the waterfall.";
            } else {
                "You see the alcove behind the cascading water.";
            }
    ];

ScenicWaterObject waterfall_pool "clear pool water" Waterfall
with
    name 'clear' 'pool' 'water',
    description "The water is clear and cool",
    before [;
        Search:
            "You water is clear enough to see through to the bottom.";
    ];

! [ ========================================================== Doors & Bridges ]
! [ For auxiliary objects the player can enter to travel between rooms ]

! TODO add a hut_entry_obj found_in clearing and garden.
!       use the initial property to display "a structure is to the south/north"
!       depending which location is described.
!       include this in movement.spec

! Connect the Waterfall with the Tomb via an Alcove
RockDoor alcove_door "alcove"
with
    name 'alcove',
    initial "There is an alcove through the cascading water, to the North.",
    
    description [ torch;
        print "This secret little alcove is not so secret anymore. ";
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "It appears to lead underground, but it is pitch black in
            there, you can't make out where it leads.";
        if (torch hasnt light)
            print "It is pitch black in there. If only your torch was lit.^";
        if (torch has light)
            print "You see the passage beyond the alcove leading underground.^";
    ],

    door_to [ torch;
        if (self notin Waterfall)
            "That way is the waterfall -- You don't need a shower right now.";
        torch = GetPlayerTorchObject();
        if (~~torch)
            print_ret "You would rather not enter without a light.";
        if (torch hasnt light)
            "It is pitch black in there. If only your torch was lit.";
        print "You steady your torch and head down the dark passage.^";
        return Tomb;
    ],
    
    door_dir n_to,
    
    before [;
        Search:
            <<Examine self>>;
    ],

    after [;
        Whip:
            print_ret "*SNAP* echos *snap* your *snap* whip.";
    ],

    has ~scenery;

! Connect the Cliff and Waterfall with a Bridge.
RockDoor rope_bridge "rope bridge"
with
    name 'rope' 'bridge',
    description "The bridge is made from plait ropes and extends to the East.",
    found_in Cliff Waterfall DeadlyDrop,
    door_to [;
        ! Random chance of falling down.
        ! We limit this deadly action to only occur once.
        ! To allows this to happen repeatedly uncomment the "Reset puzzle state"
        ! line in DeadlyDrop.
        if (DeadlyDrop.turn_count==0 && random(2)==1) return DeadlyDrop;
        if (self in Cliff) return Waterfall;
        return Cliff;
    ],
    door_dir [;
        if (self in Cliff) return e_to;
        return w_to;
    ];

! Connect the Valley and the Cliff with the Stone Steps.
RockDoor stone_steps "stone steps"
with
    name 'stone' 'stairs' 'steps' 'hill',
    description "The individual steps are carved from stone and laid out to form
    a staircase on the hill.",
    found_in Valley Cliff,
    door_to [;
        if (self in Valley) return Cliff;
        return Valley;
    ],
    door_dir [;
        if (self in Valley) return u_to;
        return d_to;
    ],
    before [;
        ! Allow climbing the steps to go their way
        Climb:
            <<Go (self.door_dir())>>;
    ],
    has pluralname;

! Connect the Waterfall with the Temple via a door called the "temple"
RockDoor temple_door "temple"
with
    name 'temple' 'building',
    initial "There is a temple here, to the South.",
    description "The temple is about three times your height, it is
    constructed of carved stone blocks and seems partially swallowed by vines
    and plant growth. An opening South in the front serves as a door.",
    found_in Waterfall,
    door_to Temple,
    door_dir s_to,
    has ~scenery;

! [ ================================================================ Debugging ]
! These portals provide a way to quickly jump to locations in our spec scripts.
#ifdef DEBUG;
ScenicRockObject warpto_clearing Clearing with name 'clearing' 'portal';
ScenicRockObject warpto_cliff Cliff with name 'cliff' 'portal';
ScenicRockObject warpto_garden Garden with name 'garden' 'portal';
ScenicRockObject warpto_bungalow Bungalow with name 'bungalow' 'portal';
ScenicRockObject warpto_valley Valley with name 'valley' 'portal';
ScenicRockObject warpto_waterfall Waterfall with name 'waterf' 'portal';
#endif;

! [ ================================================================== Grammar ]
Include "Grammar";
! Include "NewbieGrammar";

! [ Extend Grammar ----------------------------------------------------------  ]

! Print help when trying to "go up the noun".
[ GoUpDownNounSub;
    print "To go up or down ", (the) noun, " type ~go up~ or ~go down~. 
        To climb ", (the) noun, " type ~climb ", (name) noun, "~^";
];

Extend 	'go'		* 'up'/'down' noun				 -> GoUpDownNoun;
Extend 	'climb'		* 'up'/'down' noun				 -> GoUpDownNoun;

! Print help when trying to "talk to noun"
[ TalkToNounHelpSub;
    print "To ask ", (the) noun, " something type 
        ~ask ", (the) noun, " about (thing or topic)~. 
        To say something to ", (the) noun, " type
        ~say (noun or topic)~.^";
];
Verb    'talk'      * 'to' noun                     -> TalkToNounHelp;

! Add a synonymn for search, as "look behind the noun".
! The default rules does not have "look behind".
[ LookBehindSub;
    <<Search noun>>;
];
Extend    'look'      * 'behind' noun                 -> LookBehind;
